[
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Index",
    "section": "",
    "text": "Please navigate using the sidebar at left."
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "",
    "text": "suppressPackageStartupMessages({\n  library(IsoformSwitchAnalyzeR)\n  library(rtracklayer)\n  library(ggrepel)\n  library(scales)\n  library(GenomicFeatures)\n  library(DescTools)\n  library(tidyverse)\n  library(magrittr)\n})\n\ncolorVector = c(\n  \"Known\" = \"#009E73\",\n  \"ISM\"   = \"#0072B2\",\n  \"ISM_Prefix\" = \"#005996\",\n  \"ISM_Suffix\" = \"#378bcc\",\n  \"NIC\"   = \"#D55E00\",\n  \"NNC\"   = \"#E69F00\",\n  \"Other\" = \"#000000\"\n)\ncolorVector_ismSplit = colorVector[-2]"
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html#load-data",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html#load-data",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "Load Data",
    "text": "Load Data\n\nif(!file.exists(\"data/working/bulkTxome.Rdata\")) {\n  talon_gtf = rtracklayer::import(\"data/cp_vz_0.75_min_7_recovery_talon.gtf.gz\")\n  tx.isoseq =  talon_gtf %>% as_tibble() %>% filter(type == \"transcript\") \n  \n  sqanti_gtf = rtracklayer::import(\"data/sqanti/cp_vz_0.75_min_7_recovery_talon_corrected.gtf.cds.gtf.gz\")\n  tx.sqanti = sqanti_gtf %>% as_tibble() %>% filter(type == \"transcript\")\n  \n  gencode_gtf = rtracklayer::import(\"ref/gencode.v33lift37.annotation.gtf.gz\") \n  tx.gencode =  gencode_gtf %>% as_tibble() %>% filter(type == \"transcript\")\n  \n  txdb.gencode = makeTxDbFromGRanges(gencode_gtf)\n  gencodelengths= transcriptLengths(txdb.gencode)\n  \n  txdb.isoseq = makeTxDbFromGRanges(talon_gtf)\n  isoSeqLengths = transcriptLengths(txdb.isoseq)\n  samps = tribble( \n    ~sample_id, ~condition,\n    \"VZ_209\", \"VZ\",\n    \"VZ_334\", \"VZ\",\n    \"VZ_336\", \"VZ\",\n    \"CP_209\", \"CP\",\n    \"CP_334\", \"CP\",\n    \"CP_336\", \"CP\"\n  ) %>%\n    dplyr::mutate(\n      dplyr::across(condition, as_factor)\n    )\n  \n  cts = read_table(\"data/cp_vz_0.75_min_7_recovery_talon_abundance_filtered.tsv.gz\")\n  cts.collapse = cts %>%\n    mutate(\n      VZ_209 = rowSums(across(matches(\"209_.*_VZ\"))),\n      VZ_334 = rowSums(across(matches(\"334_.*_VZ\"))),\n      VZ_336 = rowSums(across(matches(\"336_.*_VZ\"))),\n      CP_209 = rowSums(across(matches(\"209_.*_CP\"))),\n      CP_334 = rowSums(across(matches(\"334_.*_CP\"))),\n      CP_336 = rowSums(across(matches(\"336_.*_CP\"))),\n      .keep = \"unused\"\n    ) %>%\n    dplyr::select(!c(\"gene_ID\", \"transcript_ID\", \"annot_transcript_name\")) %>%\n    dplyr::rename(\n      gene_id = \"annot_gene_id\",\n      transcript_id = \"annot_transcript_id\",\n      gene_name = \"annot_gene_name\"\n    ) %>%\n    mutate(\n      gene_novelty = as.factor(gene_novelty),\n      transcript_novelty = as.factor(transcript_novelty),\n      ISM_subtype = ISM_subtype %>% na_if(\"None\") %>% as.factor()\n    )\n  cts$counts = rowSums(as.matrix(cts.collapse[,9:14]))\n  \n  cts$novelty2 = as.character(cts$transcript_novelty)\n  cts$novelty2[which(cts$novelty2==\"ISM\" & cts$ISM_subtype==\"Prefix\")] = \"ISM_Prefix\"\n  cts$novelty2[which(cts$novelty2==\"ISM\" & cts$ISM_subtype==\"Suffix\")] = \"ISM_Suffix\"\n  cts$novelty2[cts$novelty2 %in% c(\"Antisense\", \"Genomic\", \"Intergenic\", \"ISM\")] = \"Other\"\n  cts$novelty2 = factor(cts$novelty2,levels=c(\"Known\", \"ISM_Prefix\", \"ISM_Suffix\", \"NIC\", \"NNC\", \"Other\"))\n  \n  \n  TableS1 = tx.isoseq %>% dplyr::select(gene_id, transcript_id, gene_name, transcript_name, seqnames, start, end, strand, transcript_length=width, source, gene_status, gene_type, transcript_status,transcript_type,  havana_transcript, ccdsid, protein_id)\n  TableS1 = TableS1 %>% left_join(cts %>% dplyr::select(transcript_id=annot_transcript_id, transcript_novelty, ISM_subtype, transcript_novelty2 = novelty2, n_exons, cds_length = length, expression_counts = counts))\n  TableS1$expression_TPM = TableS1$expression_counts / (sum(TableS1$expression_counts / 1000000))\n  write_tsv(TableS1, file=\"output/tables/TableS1_transcript_annotation.tsv\")\n  save.image(\"data/working/bulkTxome.Rdata\")\n} else {\n  load(\"data/working/bulkTxome.Rdata\")\n}\n\nWarning in .get_cds_IDX(mcols0$type, mcols0$phase): The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\n\n\nWarning in .reject_transcripts(bad_tx, because): The following transcripts were dropped because they have incompatible\n  CDS and stop codons: ENST00000422803.2_2, ENST00000618549.1_2,\n  ENST00000619291.4_2, ENST00000621077.1_2, ENST00000621229.1_2,\n  ENST00000631326.2_2\n\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  .default = col_double(),\n  annot_gene_id = col_character(),\n  annot_transcript_id = col_character(),\n  annot_gene_name = col_character(),\n  annot_transcript_name = col_character(),\n  gene_novelty = col_character(),\n  transcript_novelty = col_character(),\n  ISM_subtype = col_character()\n)\nℹ Use `spec()` for the full column specifications.\n\n\nJoining with `by = join_by(transcript_id)`"
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html#technical-and-biological-replicates",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html#technical-and-biological-replicates",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "Technical and Biological Replicates",
    "text": "Technical and Biological Replicates\n\nFig1B: Isoform level MDS\n\n##\nlength(unique(cts$annot_transcript_id)) #214516 total isoforms\n\n[1] 214516\n\nlength(unique(cts$annot_gene_id)) #24554 genes\n\n[1] 24554\n\n## Collapsing across technical replicates\ncountMat = as.matrix(cts.collapse[,9:14])\ncs = colSums(countMat) / 1000000 ## TPM normalize\ncountMat.tpm = t(apply(countMat, 1, function(x) { x / cs}))\n\ntable(rowSums(countMat.tpm > 0.1) >3)  ## 175730 isoforms @ TPM > 0.1 in half of samples\n\n\n FALSE   TRUE \n 38786 175730 \n\ntable(rowSums(countMat.tpm > 1) >3)  ## 58102 @ TPM > 1 in half of samples\n\n\n FALSE   TRUE \n156414  58102 \n\nexpressedIsoforms = rowSums(countMat.tpm > .1) >3  ## TPM > .1 in half of samples\nlength(unique(cts$annot_gene_id[expressedIsoforms])) ## 17,299 genes with expressed isoforms (TPM > .1)\n\n[1] 17299\n\n# Analyze technical replicates separately\ncts.all = cts[,12:35]\ncs = colSums(cts.all) / 1000000\ncts.all.tpm = t(apply(cts.all, 1, function(x) { x / cs}))\n\nmds = cmdscale(dist(t(log2(.1+cts.all.tpm))),k = 4)\ndf = data.frame(sample=rownames(mds), PC1 = mds[,1], PC2=mds[,2], PC3=mds[,3], PC4=mds[,4])\ndf$Region = substr(df$sample, 7,9)\ndf$Subject = substr(df$sample, 1,3)\ndf$batch = substr(df$sample, 5,5)\nFig1B=ggplot(df, aes(x=PC1,y=PC2, color=Region, shape=Subject,label=batch)) + geom_point(size=4) +  geom_text(color='black', size=2) +  theme_bw() + ggtitle(\"Isoform level clustering\")\nFig1B\n\n\n\nggsave(Fig1B,filename = \"output/figures/Fig1/Fig1B.pdf\", width = 3.5,height=2)\n\n\n\nFig1C: smoothscatter\n\ngeneCountMap.tpm = tibble(gene = cts$annot_gene_name, as_tibble(cts.all.tpm)) %>% group_by(gene) %>%  summarise(across(everything(), sum))\nmds = cmdscale(dist(t(log2(.1+geneCountMap.tpm %>% dplyr::select(-gene)))),k = 4)\ndf = data.frame(sample=rownames(mds), PC1 = mds[,1], PC2=mds[,2], PC3=mds[,3], PC4=mds[,4])\ndf$Region = substr(df$sample, 7,9)\ndf$Subject = substr(df$sample, 1,3)\ndf$TechnicalReplicate = substr(df$sample, 5,5)\n#ggplot(df, aes(x=PC1,y=PC2, color=Region, shape=Subject)) + geom_point(size=3) + theme_bw() + ggtitle(\"Gene level clustering\")\n\nFig1C=ggplot(as.data.frame(countMat.tpm), aes(x=log2(1+VZ_334), y=log2(1+VZ_336))) + geom_point(color='blue',size=.4,alpha=.5) + theme_bw() + geom_abline(slope=1,lty=2) + geom_smooth(method='lm',color='black') + ggtitle(\"R=0.93, p<2e-16\")\nFig1C\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nggsave(Fig1C ,filename = \"output/figures/Fig1/Fig1C.pdf\", width = 3,height=3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\npdf(file= \"output/figures/Fig1/Fig1Cb.pdf\", width = 4, height=4)\nsmoothScatter(log2(1+countMat.tpm[,\"VZ_334\"]), log2(1+countMat.tpm[,\"VZ_336\"]))\ndev.off()\n\nquartz_off_screen \n                2 \n\nsmoothScatter(log2(1+countMat.tpm[,\"VZ_334\"]), log2(1+countMat.tpm[,\"VZ_336\"]))\n\n\n\npanel.cor <- function(x, y, digits = 2, prefix = \"R=\", cex.cor, ...)\n{\n    usr <- par(\"usr\"); on.exit(par(usr))\n    par(usr = c(0, 1, 0, 1))\n    r <- abs(cor(x, y))\n    txt <- format(c(r, 0.123456789), digits = digits)[1]\n    txt <- paste0(prefix, txt)\n    if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\n    text(0.5, 0.5, txt, cex =1)\n}\n\npdf(file=\"output/figures/supplement/FigS2_bio_replicates.pdf\", width=8,height=6)  \npairs(log2(1+countMat.tpm), panel=function(x,y){smoothScatter(x,y,add=T)},upper.panel = panel.cor)\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\ndev.off()\n\nquartz_off_screen \n                2 \n\n\n\n\nFig1E: tx novelty\n\nFig1E = ggplot(cts %>% filter(counts>10,), aes(x=counts, fill=novelty2)) + geom_histogram(position=position_fill(),alpha=.75, binwidth = .3)+ theme_bw()  +  scale_x_log10()+\n  annotation_logticks(scaled = T,sides='b')+ theme(panel.grid.minor = element_blank()) + labs(x=\"Min observed counts\", y=\"Proportion of transcripts\") + ggtitle(\"Transcript novelty & type\") + theme(plot.title = element_text(hjust=.5))  + scale_fill_manual(values=colorVector_ismSplit)\nFig1E\n\n\n\nggsave(file=\"output/figures/Fig1/Fig1E.pdf\",width=5,height=3)\n\n## Removing MAP1B\nggplot(cts %>% filter(counts>10,annot_gene_name!=\"MAP1B\"), aes(x=counts, fill=novelty2)) + geom_histogram(position=position_fill(),alpha=.5, binwidth = .3)+ theme_bw()  +  scale_x_log10()+\n  annotation_logticks(scaled = T,sides='b')+ theme(panel.grid.minor = element_blank()) + labs(x=\"Min observed counts\", y=\"Proportion of transcripts\") + ggtitle(\"Transcript novelty & type\",subtitle = '(MAP1B removed)') + theme(plot.title = element_text(hjust=.5))  + scale_fill_manual(values=colorVector_ismSplit)"
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html#analyses-of-transcript-length",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html#analyses-of-transcript-length",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "Analyses of Transcript Length",
    "text": "Analyses of Transcript Length\n\nFig1F: Tx Length Histogra\n\ndf<- cts%>% dplyr::select(\"annot_transcript_id\", \"transcript_novelty\", \"ISM_subtype\", \"annot_gene_name\", \"counts\") %>% right_join(isoSeqLengths, by=c(\"annot_transcript_id\" = \"tx_name\")) \n\ndf$novelty2 = as.character(df$transcript_novelty)\ndf$novelty2[which(df$novelty2==\"ISM\" & df$ISM_subtype==\"Prefix\")] = \"ISM_Prefix\"\ndf$novelty2[which(df$novelty2==\"ISM\" & df$ISM_subtype==\"Suffix\")] = \"ISM_Suffix\"\ndf$novelty2[df$novelty2 %in% c(\"Antisense\", \"Genomic\", \"Intergenic\", \"ISM\")] = \"Other\"\ndf$novelty2 = factor(df$novelty2,levels=c(\"Known\", \"ISM_Prefix\", \"ISM_Suffix\", \"NIC\", \"NNC\", \"Other\"))\n\ndf %>% filter(tx_len > 900, tx_len < 6000) %>% group_by(novelty2) %>% summarise(peak=10^mean(log10(tx_len)), median(tx_len), mean(tx_len))\n\n# A tibble: 6 × 4\n  novelty2    peak `median(tx_len)` `mean(tx_len)`\n  <fct>      <dbl>            <dbl>          <dbl>\n1 Known      2305.             2317          2588.\n2 ISM_Prefix 2604.             2701          2809.\n3 ISM_Suffix 2833.             2914          3019.\n4 NIC        3023.             3100          3193.\n5 NNC        2867.             2953          3033.\n6 Other      2616.             2716          2807.\n\nFig1F = ggplot(df, aes(x=tx_len, fill=novelty2)) + geom_histogram(alpha=.75,binwidth = .03)+ \n  theme_bw() + scale_fill_manual(values=colorVector_ismSplit) +\n  scale_x_continuous(trans = log10_trans(),breaks = trans_breaks(\"log10\", function(x) 10^x),\n    labels = trans_format(\"log10\", math_format(10^.x)),limits = c(50,10^5)) + annotation_logticks() +\n  labs(x=\"Transcript Length (bp)\") + ggtitle(\"Transcript length distribution\")\nFig1F\n\nWarning: Removed 6 rows containing non-finite values (`stat_bin()`).\n\n\nWarning: Removed 12 rows containing missing values (`geom_bar()`).\n\n\n\n\nggsave(Fig1F,file='output/figures/Fig1/Fig1F.pdf', width=5,height=2.5)\n\nWarning: Removed 6 rows containing non-finite values (`stat_bin()`).\nRemoved 12 rows containing missing values (`geom_bar()`).\n\n## Zoomed in\nggplot(df, aes(x=tx_len, fill=novelty2)) + geom_histogram(alpha=.5,binwidth = 100)+ \n  theme_bw() + scale_fill_manual(values=colorVector_ismSplit) + xlim(800,5500) + \n  labs(x=\"Transcript Length (bp)\") + ggtitle(\"Transcript length distribution\") + \n  geom_vline(xintercept = 2588, lty=2,color=\"#009E73\")\n\nWarning: Removed 27594 rows containing non-finite values (`stat_bin()`).\nRemoved 12 rows containing missing values (`geom_bar()`).\n\n\n\n\nmean(df$tx_len[df$novelty2==\"Known\"])\n\n[1] 2276.283\n\nsd(df$tx_len[df$novelty2==\"Known\"])\n\n[1] 2224.66\n\nmean(df$tx_len[df$novelty2!=\"Known\"])\n\n[1] 3072.309\n\nsd(df$tx_len[df$novelty2!=\"Known\"])\n\n[1] 1168.997\n\n## Linear model: Known is the intercept\nsummary(lm(log2(tx_len) ~ novelty2,data=df[df$tx_len > 1000,]))\n\n\nCall:\nlm(formula = log2(tx_len) ~ novelty2, data = df[df$tx_len > 1000, \n    ])\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.6246 -0.3952  0.0137  0.3949  6.2778 \n\nCoefficients:\n                    Estimate Std. Error  t value Pr(>|t|)    \n(Intercept)        11.367558   0.002874 3955.796  < 2e-16 ***\nnovelty2ISM_Prefix  0.016804   0.005031    3.341 0.000836 ***\nnovelty2ISM_Suffix  0.126745   0.003850   32.923  < 2e-16 ***\nnovelty2NIC         0.224224   0.003922   57.172  < 2e-16 ***\nnovelty2NNC         0.137284   0.005755   23.855  < 2e-16 ***\nnovelty2Other       0.012843   0.008076    1.590 0.111768    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.5991 on 190337 degrees of freedom\nMultiple R-squared:  0.0208,    Adjusted R-squared:  0.02078 \nF-statistic: 808.7 on 5 and 190337 DF,  p-value: < 2.2e-16\n\nsummary(lm(log2(tx_len) ~ novelty2==\"Known\",data=df))\n\n\nCall:\nlm(formula = log2(tx_len) ~ novelty2 == \"Known\", data = df)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.5655 -0.4458  0.0731  0.5117  7.0423 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(>|t|)    \n(Intercept)             11.472348   0.002319  4948.1   <2e-16 ***\nnovelty2 == \"Known\"TRUE -0.869348   0.004212  -206.4   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8965 on 214514 degrees of freedom\nMultiple R-squared:  0.1657,    Adjusted R-squared:  0.1657 \nF-statistic: 4.26e+04 on 1 and 214514 DF,  p-value: < 2.2e-16\n\n## Non-parametric test\nkruskal.test((tx_len) ~ novelty2==\"Known\",data=df)\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  (tx_len) by novelty2 == \"Known\"\nKruskal-Wallis chi-squared = 23404, df = 1, p-value < 2.2e-16\n\nkruskal.test(log2(tx_len) ~ novelty2,data=df[df$tx_len > 1000,])\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  log2(tx_len) by novelty2\nKruskal-Wallis chi-squared = 4511.4, df = 5, p-value < 2.2e-16\n\nDescTools::DunnTest(log2(tx_len) ~ novelty2, data=df[df$tx_len > 1000,], method='bonferroni')\n\n\n Dunn's test of multiple comparisons using rank sums : bonferroni  \n\n                      mean.rank.diff    pval    \nISM_Prefix-Known           3089.5845 3.2e-10 ***\nISM_Suffix-Known          13024.1853 < 2e-16 ***\nNIC-Known                 22131.1682 < 2e-16 ***\nNNC-Known                 13892.0679 < 2e-16 ***\nOther-Known                2480.9445  0.0121 *  \nISM_Suffix-ISM_Prefix      9934.6008 < 2e-16 ***\nNIC-ISM_Prefix            19041.5837 < 2e-16 ***\nNNC-ISM_Prefix            10802.4834 < 2e-16 ***\nOther-ISM_Prefix           -608.6399  1.0000    \nNIC-ISM_Suffix             9106.9829 < 2e-16 ***\nNNC-ISM_Suffix              867.8826  1.0000    \nOther-ISM_Suffix         -10543.2407 < 2e-16 ***\nNNC-NIC                   -8239.1003 < 2e-16 ***\nOther-NIC                -19650.2236 < 2e-16 ***\nOther-NNC                -11411.1233 < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n## Boxplot\n# ggplot(df, aes(x=novelty2, y=tx_len, fill=novelty2)) + geom_boxplot()+ \n#   theme_bw()  + scale_fill_manual(values=colorVector_ismSplit) + \n#   scale_y_continuous(trans = log10_trans(),breaks = trans_breaks(\"log10\", function(x) 10^x),\n#     labels = trans_format(\"log10\", math_format(10^.x)))\n\n\n\nFig1G: # Exons / gene\n\nFig1G = ggplot(df, aes(x=nexon, fill=novelty2)) + geom_histogram(alpha=.75, binwidth = 1) + theme_bw() + \n  xlim(1,40) + scale_fill_manual(values=colorVector_ismSplit) + labs(x=\"# Exons\", y=\"# Transcripts\") + ggtitle('Exons per  Transcript') + theme(legend.position = \"none\")\nFig1G\n\nWarning: Removed 597 rows containing non-finite values (`stat_bin()`).\n\n\nWarning: Removed 12 rows containing missing values (`geom_bar()`).\n\n\n\n\nggsave(Fig1G,file='output/figures/Fig1/Fig1G.pdf', width=3,height=2.5)\n\nWarning: Removed 597 rows containing non-finite values (`stat_bin()`).\nRemoved 12 rows containing missing values (`geom_bar()`).\n\ndf %>% group_by(novelty2) %>% dplyr::select(nexon) %>% summarise(median(nexon), mean(nexon), sd(nexon), quantile(nexon, .05), quantile(nexon,.95))\n\nAdding missing grouping variables: `novelty2`\n\n\n# A tibble: 6 × 6\n  novelty2   `median(nexon)` `mean(nexon)` `sd(nexon)` quantile(nexon,…¹ quant…²\n  <fct>                <dbl>         <dbl>       <dbl>             <dbl>   <dbl>\n1 Known                    5          7.16        6.88                 1      21\n2 ISM_Prefix               8         10.1         6.99                 2      23\n3 ISM_Suffix               8         10.1         7.01                 2      24\n4 NIC                     12         13.2         7.31                 4      27\n5 NNC                      9         10.3         6.80                 2      23\n6 Other                    5          7.30        6.24                 2      20\n# … with abbreviated variable names ¹​`quantile(nexon, 0.05)`,\n#   ²​`quantile(nexon, 0.95)`\n\ndf %>% group_by(novelty2==\"Known\") %>% dplyr::select(nexon) %>% summarise(median(nexon), mean(nexon), sd(nexon), quantile(nexon, .05), quantile(nexon,.95))\n\nAdding missing grouping variables: `novelty2 == \"Known\"`\n\n\n# A tibble: 2 × 6\n  `novelty2 == \"Known\"` `median(nexon)` `mean(nexon)` sd(nexon…¹ quant…² quant…³\n  <lgl>                           <dbl>         <dbl>      <dbl>   <dbl>   <dbl>\n1 FALSE                              10         11.0        7.25       2      25\n2 TRUE                                5          7.16       6.88       1      21\n# … with abbreviated variable names ¹​`sd(nexon)`, ²​`quantile(nexon, 0.05)`,\n#   ³​`quantile(nexon, 0.95)`\n\n# Linear model (known is intercept)\nsummary(lm(log2(df$nexon) ~ df$novelty2))\n\n\nCall:\nlm(formula = log2(df$nexon) ~ df$novelty2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.4927 -0.6853  0.0657  0.8222  4.0657 \n\nCoefficients:\n                      Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           2.256270   0.004331 520.977   <2e-16 ***\ndf$novelty2ISM_Prefix 0.720984   0.008605  83.788   <2e-16 ***\ndf$novelty2ISM_Suffix 0.728883   0.006378 114.275   <2e-16 ***\ndf$novelty2NIC        1.236409   0.006545 188.897   <2e-16 ***\ndf$novelty2NNC        0.776082   0.010123  76.663   <2e-16 ***\ndf$novelty2Other      0.127124   0.014200   8.952   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.104 on 214510 degrees of freedom\nMultiple R-squared:  0.1525,    Adjusted R-squared:  0.1525 \nF-statistic:  7720 on 5 and 214510 DF,  p-value: < 2.2e-16\n\n## Non-parametric test\nkruskal.test(log2(df$nexon) ~ as.factor(df$novelty2))\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  log2(df$nexon) by as.factor(df$novelty2)\nKruskal-Wallis chi-squared = 29541, df = 5, p-value < 2.2e-16\n\nkruskal.test(log2(df$nexon) ~ as.factor(df$novelty2==\"Known\"))\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  log2(df$nexon) by as.factor(df$novelty2 == \"Known\")\nKruskal-Wallis chi-squared = 20319, df = 1, p-value < 2.2e-16\n\nkruskal.test((df$nexon) ~ as.factor(df$novelty2==\"Known\"))\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  (df$nexon) by as.factor(df$novelty2 == \"Known\")\nKruskal-Wallis chi-squared = 20319, df = 1, p-value < 2.2e-16\n\nDescTools::DunnTest(log2(df$nexon) ~ as.factor(df$novelty2),method='bonferroni')\n\n\n Dunn's test of multiple comparisons using rank sums : bonferroni  \n\n                      mean.rank.diff    pval    \nISM_Prefix-Known          32693.6946 < 2e-16 ***\nISM_Suffix-Known          33127.7388 < 2e-16 ***\nNIC-Known                 61043.3188 < 2e-16 ***\nNNC-Known                 35434.2011 < 2e-16 ***\nOther-Known                3206.1675 0.00083 ***\nISM_Suffix-ISM_Prefix       434.0442 1.00000    \nNIC-ISM_Prefix            28349.6241 < 2e-16 ***\nNNC-ISM_Prefix             2740.5065 0.00050 ***\nOther-ISM_Prefix         -29487.5271 < 2e-16 ***\nNIC-ISM_Suffix            27915.5799 < 2e-16 ***\nNNC-ISM_Suffix             2306.4623 0.00092 ***\nOther-ISM_Suffix         -29921.5713 < 2e-16 ***\nNNC-NIC                  -25609.1177 < 2e-16 ***\nOther-NIC                -57837.1512 < 2e-16 ***\nOther-NNC                -32228.0336 < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html#analyses-of-transcripts-per-gene-disease",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html#analyses-of-transcripts-per-gene-disease",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "Analyses of transcripts per gene & disease",
    "text": "Analyses of transcripts per gene & disease\n\nNDD risk genes ~ unique transcipts per gene\n\nrisk_genes =read.csv(\"ref/ASD+SCZ+DDD_2022.csv\")\npLI_scores = read.table('ref/pLI_scores.ensid.txt',header = T)\nasd_genes = risk_genes$Gene[risk_genes$Set==\"ASD (SFARI score 1)\"]\nddd_genes = risk_genes$Gene[risk_genes$Set==\"DDD (Kaplanis et al. 2019)\"]\n\ngeneCounts = cts %>% group_by(gene_id=substr(annot_gene_id,1,15)) %>% summarise(gene_counts = sum(counts))\ngeneCounts$gene_counts = geneCounts$gene_counts / (sum(geneCounts$gene_counts) / 1000000)\n\ndf <- talon_gtf %>% as_tibble()  %>% \n  mutate(gene_id = str_sub(gene_id, 1, 15)) %>%\n  group_by(gene_id) %>%\n  summarize(n_transcripts = n_distinct(na.omit(transcript_id)), n_exons = n_distinct(na.omit(exon_id))) %>%\n  ungroup() \n\ndf <-as_tibble(gencode_gtf) %>% dplyr::filter(type==\"gene\") %>% mutate(gene_id=substr(gene_id,0,15)) %>% right_join(df, by=\"gene_id\")\ndf <- df %>% left_join(geneCounts) \n\nJoining with `by = join_by(gene_id)`\n\ndf <- pLI_scores %>% as_tibble() %>% dplyr::select(gene_id=gene, pLI) %>% right_join(df)\n\nJoining with `by = join_by(gene_id)`\n\n\nWarning in right_join(., df): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 476 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\ndf$gene_rank = rank(-df$n_transcripts, ties.method = 'first')\ndf$DDD = FALSE\ndf$DDD[df$gene_name %in% c(asd_genes, ddd_genes)] = TRUE\ns=summary(glm(DDD ~ log10(n_transcripts)  + log10(width)  + log10(gene_counts), data=df %>% filter(gene_type == \"protein_coding\"), family='binomial'))\nprint(s)\n\n\nCall:\nglm(formula = DDD ~ log10(n_transcripts) + log10(width) + log10(gene_counts), \n    family = \"binomial\", data = df %>% filter(gene_type == \"protein_coding\"))\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-0.8652  -0.2530  -0.1708  -0.1059   3.5222  \n\nCoefficients:\n                     Estimate Std. Error z value Pr(>|z|)    \n(Intercept)          -10.2296     0.5162 -19.819  < 2e-16 ***\nlog10(n_transcripts)   1.1084     0.2013   5.507 3.64e-08 ***\nlog10(width)           1.0441     0.1057   9.882  < 2e-16 ***\nlog10(gene_counts)     0.3320     0.1161   2.859  0.00425 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 3522.0  on 15146  degrees of freedom\nResidual deviance: 3145.4  on 15143  degrees of freedom\nAIC: 3153.4\n\nNumber of Fisher Scoring iterations: 7\n\nexp(s$coefficients[,1])\n\n         (Intercept) log10(n_transcripts)         log10(width) \n        3.608466e-05         3.029439e+00         2.840918e+00 \n  log10(gene_counts) \n        1.393712e+00 \n\nFig1H=ggplot(df, aes(x = gene_rank, y = n_transcripts,color=DDD)) +\n  geom_point() + geom_line(color='blue') + \n  geom_label_repel(data = df %>% filter(n_transcripts > 150 | (n_transcripts > 75 & DDD==TRUE)),aes(label = gene_name),force = 30, direction='both',nudge_y=-.1,nudge_x = .3, max.iter = 10000,max.overlaps = 50, size=2.5) + scale_color_manual(values=c(\"TRUE\" = \"red\", \"FALSE\" = \"black\")) + scale_y_log10() + scale_x_log10() + theme_bw() + annotation_logticks() + theme(legend.position = 'none') + labs(x=\"Gene rank\", y=\"# Transcripts\") + ggtitle(\"NDD risk genes ~ unique  transcipts per gene\",subtitle=paste0(\"OR \",signif(exp(s$coefficients[2,1]),3),\", P=\", signif(s$coefficients[2,4],2)))\nFig1H\n\n\n\nggsave(file=\"output/figures/Fig1/Fig1H.pdf\",Fig1H, width = 8, height=3)\n\n\n\nFigS3: NDD risk genes ~ unique NOVEL transcipts per gene\n\ndf.novel <- talon_gtf %>% as_tibble()  %>% filter(type==\"transcript\", transcript_id %in% cts$annot_transcript_id[cts$novelty2!=\"Known\"]) %>% \n  mutate(gene_id = str_sub(gene_id, 1, 15)) %>%\n  group_by(gene_id) %>%\n  summarize(n_transcripts = n_distinct(na.omit(transcript_id)), n_exons = n_distinct(na.omit(exon_id))) %>%\n  ungroup() \n\ndf.novel <- as_tibble(gencode_gtf) %>% dplyr::filter(type==\"gene\") %>% mutate(gene_id=substr(gene_id,0,15)) %>% right_join(df.novel, by=\"gene_id\")\ndf.novel <- df.novel %>% left_join(geneCounts) \n\nJoining with `by = join_by(gene_id)`\n\ndf.novel$gene_rank = rank(-df.novel$n_transcripts, ties.method = 'first')\ndf.novel$DDD = FALSE\ndf.novel$DDD[df.novel$gene_name %in% c(asd_genes, ddd_genes)] = TRUE\n\ns=summary(glm(DDD ~ log10(n_transcripts)  + log10(width)  + log10(gene_counts), data=df.novel %>% filter(gene_type == \"protein_coding\"), family='binomial'))\nprint(s)\n\n\nCall:\nglm(formula = DDD ~ log10(n_transcripts) + log10(width) + log10(gene_counts), \n    family = \"binomial\", data = df.novel %>% filter(gene_type == \n        \"protein_coding\"))\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-0.7978  -0.2842  -0.2103  -0.1501   3.4149  \n\nCoefficients:\n                     Estimate Std. Error z value Pr(>|z|)    \n(Intercept)           -9.9549     0.5723 -17.394  < 2e-16 ***\nlog10(n_transcripts)   0.5682     0.1645   3.453 0.000554 ***\nlog10(width)           1.0640     0.1115   9.546  < 2e-16 ***\nlog10(gene_counts)     0.5614     0.1217   4.612 3.98e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 3142.7  on 11204  degrees of freedom\nResidual deviance: 2904.9  on 11201  degrees of freedom\nAIC: 2912.9\n\nNumber of Fisher Scoring iterations: 7\n\nsort(exp(s$coefficients[,1]))\n\n         (Intercept)   log10(gene_counts) log10(n_transcripts) \n        0.0000474938         1.7531245449         1.7651452731 \n        log10(width) \n        2.8979142259 \n\nFigS3=ggplot(df.novel, aes(x = gene_rank, y = n_transcripts,color=DDD)) +\n  geom_point() + geom_line(color='blue') + \n  geom_label_repel(data = df.novel %>% filter(n_transcripts > 150 | (n_transcripts > 75 & DDD==TRUE)),aes(label = gene_name),force = 30, direction='both',nudge_y=-.1,nudge_x = .3, max.iter = 10000,max.overlaps = 50, size=2.5) + scale_color_manual(values=c(\"TRUE\" = \"red\", \"FALSE\" = \"black\")) + scale_y_log10() + scale_x_log10() + theme_bw() + annotation_logticks() + theme(legend.position = 'none') + labs(x=\"Gene rank\", y=\"# Transcripts\") + ggtitle(\"NDD risk genes ~ unique novel transcipts per gene\",subtitle=paste0(\"OR \",signif(exp(s$coefficients[2,1]),2),\", P=\", signif(s$coefficients[2,4],2)))\nFigS3\n\n\n\nggsave(file=\"output/figures/supplement/FigS3G.pdf\",FigS3, width = 8, height=3)"
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html#pathway-analysis",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html#pathway-analysis",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "Pathway Analysis",
    "text": "Pathway Analysis\n\nsumstats <- tx.isoseq %>% group_by(gene_name, gene_type) %>% summarise(total = n_distinct(transcript_id), known = sum(transcript_status==\"KNOWN\"), ISM.pre = sum(ISM.prefix_transcript==\"TRUE\", na.rm=T), ISM.suffix = sum(ISM.suffix_transcript==\"TRUE\", na.rm=T), NIC = sum(NIC_transcript==TRUE, na.rm = T), NNC = sum(NNC_transcript==TRUE, na.rm = T))\n\n`summarise()` has grouped output by 'gene_name'. You can override using the\n`.groups` argument.\n\nwrite.csv(file=\"output/isoformNovetyCounts_at_geneLevel.csv\",sumstats)\n\n\nquery = sort(unique(tx.isoseq$gene_name[tx.isoseq$transcript_status==\"NOVEL\" & (tx.isoseq$NNC_transcript==TRUE | tx.isoseq$NIC_transcript == TRUE)]))\nbg = sort(unique(tx.isoseq$gene_name[tx.isoseq$transcript_status==\"NOVEL\" | tx.isoseq$transcript_status==\"KNOWN\"]))\n\ngo = gprofiler2::gost(query = query,custom_bg = bg,sources = c(\"GO\", \"KEGG\", \"REACTOME\"),as_short_link = T)\n\nDetected custom background input, domain scope is set to 'custom'"
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html#gene-body-coverage",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html#gene-body-coverage",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "Gene Body Coverage",
    "text": "Gene Body Coverage\n\nfiles = dir(path = \"data/QC/RNA_Metrics/\", pattern=\"RNA_Metrics\")\ndf_coverage_isoseq = data.frame(Position=seq(0,100))\n\nfor(i in 1:length(files)) {\n  this_file = data.table::fread(paste0(\"data/QC/RNA_Metrics/\", files[i]),skip=10)\n  names(this_file)[2] = gsub(\".RNA_Metrics\", \"\", files[i])\n  df_coverage_isoseq = cbind(df_coverage_isoseq, this_file[,2])\n}\n\nfiles = dir(path = \"data/QC/RNA_Metrics_short_read//\", pattern=\"RNA_Metrics\")\ndf_coverage_shortread = data.frame(Position=seq(0,100))\n\nfor(i in 1:length(files)) {\n  this_file = data.table::fread(paste0(\"data/QC/RNA_Metrics_short_read/\", files[i]),skip=10)\n  names(this_file)[2] = gsub(\".RNA_Metrics\", \"\", files[i])\n  df_coverage_shortread = cbind(df_coverage_shortread, this_file[,2])\n}\n\n\n\ndf_coverage_isoseq <- df_coverage_isoseq %>% pivot_longer(cols = -Position, names_to = \"Sample\", values_to = \"Normalized_coverage\")\ndf_coverage_isoseq$modality = \"IsoSeq\"\n\ndf_coverage_shortread <- df_coverage_shortread %>% pivot_longer(cols = -Position, names_to = \"Sample\", values_to = \"Normalized_coverage\")\ndf_coverage_shortread$modality = \"short-read\\nRNAseq\\n(ribozero)\" \n\nFigS2A= ggplot(rbind(df_coverage_isoseq, df_coverage_shortread), aes(x=Position,y=Normalized_coverage,group=Sample, color=modality)) + geom_path() + theme_bw() + labs(x=\"Gene body position (5' -> 3')\", y=\"Normalized coverage\")\nggsave(FigS2A,file=\"output/figures/supplement/FigS2A_coverage.pdf\",width=5,height=3)"
  },
  {
    "objectID": "analysis/Figure1_TableS1.html",
    "href": "analysis/Figure1_TableS1.html",
    "title": "Figure 1 - generate Table S1",
    "section": "",
    "text": "theme_set(theme_bw())\ntheme_update(\n  plot.title = element_text(size = rel(1.4), hjust = 0.5),\n  axis.title = element_text(size = rel(1.2)),\n  axis.text = element_text(color=\"black\", size = rel(1)),\n  legend.title = element_text(size = rel(1.2)),\n  legend.text = element_text(color=\"black\", size = rel(1)),\n  strip.text = element_text(color=\"black\", size = rel(1))\n)\n\n\ncts = read_table(\"data/cp_vz_0.75_min_7_recovery_talon_abundance_filtered.tsv.gz\")\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  .default = col_double(),\n  annot_gene_id = col_character(),\n  annot_transcript_id = col_character(),\n  annot_gene_name = col_character(),\n  annot_transcript_name = col_character(),\n  gene_novelty = col_character(),\n  transcript_novelty = col_character(),\n  ISM_subtype = col_character()\n)\nℹ Use `spec()` for the full column specifications.\n\ncts = cts %>%\n  mutate(\n    VZ_209 = rowSums(across(matches(\"209_.*_VZ\"))),\n    VZ_334 = rowSums(across(matches(\"334_.*_VZ\"))),\n    VZ_336 = rowSums(across(matches(\"336_.*_VZ\"))),\n    CP_209 = rowSums(across(matches(\"209_.*_CP\"))),\n    CP_334 = rowSums(across(matches(\"334_.*_CP\"))),\n    CP_336 = rowSums(across(matches(\"336_.*_CP\"))),\n    .keep = \"unused\"\n  ) %>%\n  select(!c(\"gene_ID\", \"transcript_ID\", \"annot_transcript_name\")) %>%\n  dplyr::rename(\n    gene_id = \"annot_gene_id\",\n    transcript_id = \"annot_transcript_id\",\n    gene_name = \"annot_gene_name\"\n  ) %>%\n  mutate(\n    gene_novelty = as.factor(gene_novelty) %>% fct_infreq() %>% fct_relevel(\"Known\"),\n    transcript_novelty = as.factor(transcript_novelty)  %>% fct_infreq(),\n    ISM_subtype = ISM_subtype %>% na_if(\"None\") %>% factor(levels = c(\"Prefix\", \"Suffix\", \"Both\"))\n  )\ncts\n\n# A tibble: 214,516 × 14\n   gene_id  trans…¹ gene_…² n_exons length gene_…³ trans…⁴ ISM_s…⁵ VZ_209 VZ_334\n   <chr>    <chr>   <chr>     <dbl>  <dbl> <fct>   <fct>   <fct>    <dbl>  <dbl>\n 1 ENSG000… ENST00… AL6273…       1    755 Known   Known   <NA>         0      0\n 2 ENSG000… ENST00… AP0062…       4   2257 Known   Known   <NA>         0      0\n 3 ENSG000… ENST00… RP4-66…       1    180 Known   Known   <NA>         1      1\n 4 ENSG000… ENST00… MTND2P…       1   1044 Known   Known   <NA>         0      1\n 5 ENSG000… ENST00… MTCO1P…       1   1543 Known   Known   <NA>         0      0\n 6 ENSG000… ENST00… LINC01…       3   1869 Known   Known   <NA>         0      2\n 7 ENSG000… ENST00… LINC01…       2    566 Known   Known   <NA>         0      2\n 8 ENSG000… ENST00… LINC01…       1   1873 Known   Known   <NA>         1      0\n 9 ENSG000… ENST00… AL6698…       1    114 Known   Known   <NA>         3      0\n10 ENSG000… ENST00… LINC01…       5   6616 Known   Known   <NA>         1      0\n# … with 214,506 more rows, 4 more variables: VZ_336 <dbl>, CP_209 <dbl>,\n#   CP_334 <dbl>, CP_336 <dbl>, and abbreviated variable names ¹​transcript_id,\n#   ²​gene_name, ³​gene_novelty, ⁴​transcript_novelty, ⁵​ISM_subtype\n\n\n\ntalon_gtf = rtracklayer::import(\"data/cp_vz_0.75_min_7_recovery_talon.gtf.gz\")\n\n\ntalon_gtf = talon_gtf %>% as_tibble() %>% filter(type == \"transcript\")\n\n\nsqanti = read_tsv(\"data/sqanti/cp_vz_0.75_min_7_recovery_talon_classification.txt.gz\")\n\nRows: 214516 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (14): isoform, chrom, strand, structural_category, associated_gene, asso...\ndbl (21): length, exons, ref_length, ref_exons, diff_to_TSS, diff_to_TTS, di...\nlgl (13): RTS_stage, FL, n_indels, n_indels_junc, bite, iso_exp, gene_exp, r...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nExternal support used for TALON whitelist creation (some is from our initial unfiltered run of SQANTI and some is from TALON scripts)\n(there might be something wrong with this file - contains NAs)\n\nwhitelist_support = read_tsv(\"data/cp_vz_unfiltered_external_support.tsv.gz\")\n\nRows: 214516 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (7): annot_transcript_id, annot_gene_id, annot_gene_name, gene_novelty,...\ndbl  (5): n_reads, n_donors, dist_to_CAGE_peak, dist_to_polyA_site, dist_to_...\nlgl (10): within_CAGE_peak, within_polyA_site, polyA_motif_found, CAGE_suppo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nwhitelist_support\n\n# A tibble: 214,516 × 22\n   annot_trans…¹ annot…² annot…³ gene_…⁴ trans…⁵ ISM_s…⁶ n_reads n_don…⁷ dist_…⁸\n   <chr>         <chr>   <chr>   <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>\n 1 ENST00000000… ENSG00… ARF5    Known   Known   <NA>        825       3       6\n 2 ENST00000000… ENSG00… M6PR    Known   Known   <NA>       1955       3      19\n 3 ENST00000000… ENSG00… ESRRA   Known   Known   <NA>         11       3       2\n 4 ENST00000001… ENSG00… FKBP4   Known   Known   <NA>       2319       3     -30\n 5 ENST00000001… ENSG00… CYP26B1 Known   Known   <NA>         63       3    6497\n 6 ENST00000002… ENSG00… NDUFAF7 Known   Known   <NA>        158       3     -19\n 7 ENST00000002… ENSG00… FUCA2   Known   Known   <NA>        663       3     -10\n 8 ENST00000002… ENSG00… DBNDD1  Known   Known   <NA>        421       3       0\n 9 ENST00000002… ENSG00… HS3ST1  Known   Known   <NA>       1351       3      -8\n10 ENST00000003… ENSG00… CYP51A1 Known   Known   <NA>       6691       3     -22\n# … with 214,506 more rows, 13 more variables: within_CAGE_peak <lgl>,\n#   dist_to_polyA_site <dbl>, within_polyA_site <lgl>, polyA_motif <chr>,\n#   dist_to_polyA_motif <dbl>, polyA_motif_found <lgl>, CAGE_support_100 <lgl>,\n#   CAGE_support_250 <lgl>, CAGE_support_500 <lgl>, PAS_motif_support_35 <lgl>,\n#   PAS_motif_support_50 <lgl>, PAS_motif_support_100 <lgl>,\n#   long_read_db <lgl>, and abbreviated variable names ¹​annot_transcript_id,\n#   ²​annot_gene_id, ³​annot_gene_name, ⁴​gene_novelty, ⁵​transcript_novelty, …\n\n\n\nsanity_check = whitelist_support %>% left_join(sqanti, by = c(\"annot_transcript_id\" = \"isoform\"))\nsanity_check %>% filter(within_CAGE_peak.x != within_CAGE_peak.y)\n\n# A tibble: 0 × 69\n# … with 69 variables: annot_transcript_id <chr>, annot_gene_id <chr>,\n#   annot_gene_name <chr>, gene_novelty <chr>, transcript_novelty <chr>,\n#   ISM_subtype <chr>, n_reads <dbl>, n_donors <dbl>,\n#   dist_to_CAGE_peak.x <dbl>, within_CAGE_peak.x <lgl>,\n#   dist_to_polyA_site.x <dbl>, within_polyA_site.x <lgl>, polyA_motif.x <chr>,\n#   dist_to_polyA_motif <dbl>, polyA_motif_found.x <lgl>,\n#   CAGE_support_100 <lgl>, CAGE_support_250 <lgl>, CAGE_support_500 <lgl>, …\n\nsanity_check %>% filter(is.na(within_CAGE_peak.x) & !within_CAGE_peak.y)\n\n# A tibble: 3,163 × 69\n   annot_trans…¹ annot…² annot…³ gene_…⁴ trans…⁵ ISM_s…⁶ n_reads n_don…⁷ dist_…⁸\n   <chr>         <chr>   <chr>   <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>\n 1 ENST00000070… ENSG00… PKP2    Known   Known   <NA>         NA      NA      NA\n 2 ENST00000218… ENSG00… STAG2   Known   Known   <NA>         NA      NA      NA\n 3 ENST00000238… ENSG00… ZC2HC1C Known   Known   <NA>         NA      NA      NA\n 4 ENST00000245… ENSG00… RPL23   Known   Known   <NA>         NA      NA      NA\n 5 ENST00000252… ENSG00… FUT5    Known   Known   <NA>         NA      NA      NA\n 6 ENST00000254… ENSG00… UBE2L2  Known   Known   <NA>         NA      NA      NA\n 7 ENST00000254… ENSG00… ZSWIM4  Known   Known   <NA>         NA      NA      NA\n 8 ENST00000254… ENSG00… AL3919… Known   Known   <NA>         NA      NA      NA\n 9 ENST00000261… ENSG00… FOXN3   Known   Known   <NA>         NA      NA      NA\n10 ENST00000262… ENSG00… IKZF4   Known   Known   <NA>         NA      NA      NA\n# … with 3,153 more rows, 60 more variables: within_CAGE_peak.x <lgl>,\n#   dist_to_polyA_site.x <dbl>, within_polyA_site.x <lgl>, polyA_motif.x <chr>,\n#   dist_to_polyA_motif <dbl>, polyA_motif_found.x <lgl>,\n#   CAGE_support_100 <lgl>, CAGE_support_250 <lgl>, CAGE_support_500 <lgl>,\n#   PAS_motif_support_35 <lgl>, PAS_motif_support_50 <lgl>,\n#   PAS_motif_support_100 <lgl>, long_read_db <lgl>, chrom <chr>, strand <chr>,\n#   length <dbl>, exons <dbl>, structural_category <chr>, …\n\n\n\nsupport_for_plot = cts %>% select(transcript_id, transcript_novelty) %>%\n  left_join(\n    read_csv(\"data/within_CAGE/cpvz_refTSS_200_CAGE_results.csv\") %>%\n      mutate(CAGE_support = CAGE_support == \"yes\") %>%\n      dplyr::rename(within_CAGE_refTSS = \"CAGE_support\"),\n    by = c(\"transcript_id\" = \"transcript_ID\")\n  ) %>%\n  left_join(\n    read_csv(\"data/within_CAGE/cpvz_fetal_200_CAGE_results.csv\") %>%\n      mutate(CAGE_support = CAGE_support == \"yes\") %>%\n      dplyr::rename(within_CAGE_fetal = \"CAGE_support\"),\n    by = c(\"transcript_id\" = \"transcript_ID\")\n  ) %>%\n  left_join(\n    read_csv(\"data/within_ATAC/cpvz_Greenleaf_500_ATAC_results.csv\") %>%\n      mutate(CAGE_support = CAGE_support == \"yes\") %>%\n      dplyr::rename(within_ATAC_Greenleaf = \"CAGE_support\"),\n    by = c(\"transcript_id\" = \"transcript_ID\")\n  ) %>%\n  left_join(\n    read_csv(\"data/within_ATAC/cpvz_Nowakowski_500_ATAC_results.csv\") %>%\n      mutate(CAGE_support = CAGE_support == \"yes\") %>%\n      dplyr::rename(within_ATAC_Nowakowski = \"CAGE_support\"),\n    by = c(\"transcript_id\" = \"transcript_ID\")\n  ) %>%\n  left_join(\n    read_csv(\"data/within_ATAC/cpvz_LuisCP_500_ATAC_results.csv\") %>%\n      mutate(CAGE_support = CAGE_support == \"yes\") %>%\n      dplyr::rename(within_ATAC_LuisCP = \"CAGE_support\"),\n    by = c(\"transcript_id\" = \"transcript_ID\")\n  ) %>%\n  left_join(\n    read_csv(\"data/within_ATAC/cpvz_LuisVZ_500_ATAC_results.csv\") %>%\n      mutate(CAGE_support = CAGE_support == \"yes\") %>%\n      dplyr::rename(within_ATAC_LuisGZ = \"CAGE_support\"),\n    by = c(\"transcript_id\" = \"transcript_ID\")\n  ) %>%\n  left_join(\n    sqanti %>% select(isoform, within_polyA_site, polyA_motif_found),\n    by = c(\"transcript_id\" = \"isoform\")\n  ) %>%\n  mutate(across(!c(\"transcript_id\", \"transcript_novelty\"), ~replace_na(., F)))\n\nRows: 214516 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): transcript_ID, CAGE_support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 214516 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): transcript_ID, CAGE_support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 214516 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): transcript_ID, CAGE_support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 214516 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): transcript_ID, CAGE_support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 214516 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): transcript_ID, CAGE_support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 214516 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): transcript_ID, CAGE_support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nsupport_for_plot\n\n# A tibble: 214,516 × 10\n   transcript_id trans…¹ withi…² withi…³ withi…⁴ withi…⁵ withi…⁶ withi…⁷ withi…⁸\n   <chr>         <fct>   <lgl>   <lgl>   <lgl>   <lgl>   <lgl>   <lgl>   <lgl>  \n 1 ENST00000494… Known   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE  \n 2 ENST00000424… Known   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE  \n 3 ENST00000445… Known   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE  \n 4 ENST00000457… Known   TRUE    TRUE    TRUE    TRUE    FALSE   FALSE   TRUE   \n 5 ENST00000414… Known   TRUE    FALSE   FALSE   FALSE   FALSE   FALSE   TRUE   \n 6 ENST00000655… Known   FALSE   TRUE    TRUE    TRUE    FALSE   FALSE   FALSE  \n 7 ENST00000457… Known   FALSE   TRUE    TRUE    TRUE    FALSE   FALSE   FALSE  \n 8 ENST00000591… Known   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   TRUE   \n 9 ENST00000644… Known   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE  \n10 ENST00000445… Known   TRUE    TRUE    TRUE    TRUE    FALSE   FALSE   TRUE   \n# … with 214,506 more rows, 1 more variable: polyA_motif_found <lgl>, and\n#   abbreviated variable names ¹​transcript_novelty, ²​within_CAGE_refTSS,\n#   ³​within_CAGE_fetal, ⁴​within_ATAC_Greenleaf, ⁵​within_ATAC_Nowakowski,\n#   ⁶​within_ATAC_LuisCP, ⁷​within_ATAC_LuisGZ, ⁸​within_polyA_site\n\n\n\nsupport_for_plot2 = support_for_plot %>%\n  group_by(transcript_novelty) %>%\n  summarize(\n#    any_5p = sum(within_CAGE_refTSS | within_CAGE_fetal | within_ATAC_Greenleaf | within_ATAC_Nowakowski, na.rm = T),\n    within_CAGE_peak = sum(within_CAGE_refTSS | within_CAGE_fetal, na.rm = T),\n    within_ATAC_peak = sum(within_ATAC_Greenleaf | within_ATAC_Nowakowski | within_ATAC_LuisCP | within_ATAC_LuisGZ, na.rm = T),\n#    any_3p = sum(within_polyA_site | polyA_motif_found, na.rm = T),\n    within_polyA_site = sum(within_polyA_site, na.rm = T),\n    polyA_motif_found = sum(polyA_motif_found, na.rm = T),\n    n = n()\n  ) %>%\n  pivot_longer(!c(\"transcript_novelty\", \"n\")) %>%\n  mutate(prop = value / n) %>%\n  mutate(end = if_else(name %in% c(\"within_polyA_site\", \"polyA_motif_found\", \"any_3p\"), \"3′-end support\", \"5′-end support\")) %>%\n  mutate(end = end %>% factor(levels = c(\"5′-end support\", \"3′-end support\"))) %>%\n  mutate(name = name %>% as_factor()) %>%\n  mutate(transcript_novelty = transcript_novelty %>% fct_relevel(\"Known\") %>% fct_other(drop = c(\"Antisense\", \"Intergenic\", \"Genomic\")))\nsupport_for_plot2\n\n# A tibble: 28 × 6\n   transcript_novelty     n name              value  prop end           \n   <fct>              <int> <fct>             <int> <dbl> <fct>         \n 1 ISM                83089 within_CAGE_peak  41387 0.498 5′-end support\n 2 ISM                83089 within_ATAC_peak  45668 0.550 5′-end support\n 3 ISM                83089 within_polyA_site 63833 0.768 3′-end support\n 4 ISM                83089 polyA_motif_found 65760 0.791 3′-end support\n 5 Known              65006 within_CAGE_peak  49495 0.761 5′-end support\n 6 Known              65006 within_ATAC_peak  54138 0.833 5′-end support\n 7 Known              65006 within_polyA_site 42187 0.649 3′-end support\n 8 Known              65006 polyA_motif_found 41856 0.644 3′-end support\n 9 NIC                50621 within_CAGE_peak  49442 0.977 5′-end support\n10 NIC                50621 within_ATAC_peak  49674 0.981 5′-end support\n# … with 18 more rows\n\n\n\nggplot(support_for_plot2, aes(x = prop, y = transcript_novelty, fill = fct_rev(name))) +\n  geom_col(position = \"dodge\") +\n  scale_y_discrete(limits = rev) +\n  scale_fill_manual(\n    limits = c(\"within_CAGE_peak\", \"within_ATAC_peak\", \"within_polyA_site\", \"polyA_motif_found\"),\n    labels = c(\"CAGE\", \"ATAC-seq\", \"polyA site\", \"polyA motif\"),\n    values = c(\"#00bfc4\", \"#00a9ff\", \"#c77cff\", \"#ff61cc\")\n  ) +\n  labs(\n    x = \"Proportion of transcripts\",\n    y = NULL,\n    fill = NULL\n  ) +\n  guides(\n    fill = guide_legend(ncol = 2)\n  ) +\n  theme(\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    legend.position = \"bottom\",\n    panel.spacing = unit(2, \"lines\"),\n    plot.margin = margin(11, 11, 11, 11, \"points\")\n  ) +\n  facet_wrap(vars(end))\n\n\n\n\n\n#ggsave(\"output/figures/Fig1_external_support_v8.png\", width = 11, height = 8.5, units = \"in\", dpi = 300)\nggsave(\"output/figures/Fig2/Fig2B_external_support_v2.pdf\", width = 8, height = 6, units = \"in\", dpi = 300, device=cairo_pdf)\n\n\ntableS1 = talon_gtf %>%\n  select(seqnames, start, end, strand, gene_id, gene_name, gene_status, gene_type, transcript_id, transcript_status, transcript_type) %>%\n  left_join(\n    cts %>% select(transcript_id, gene_novelty, transcript_novelty, ISM_subtype, n_exons, length),\n    by = \"transcript_id\"\n  ) %>%\n  left_join(\n    support_for_plot,\n    by = c(\"transcript_id\", \"transcript_novelty\")\n  ) %>%\n#  dplyr::rename(gencode_gene_type = \"gene_type\", gencode_transcript_type = \"transcript_type\") %>%\n  relocate(gene_novelty, .after = gene_type) %>%\n  mutate(\n    within_CAGE_peak = within_CAGE_refTSS | within_CAGE_fetal,\n    within_ATAC_peak = within_ATAC_Greenleaf | within_ATAC_Nowakowski | within_ATAC_LuisCP | within_ATAC_LuisGZ,\n    .keep = \"unused\",\n    .before = within_polyA_site\n  )\ntableS1\n\n# A tibble: 214,516 × 20\n   seqnames start   end strand gene_id   gene_…¹ gene_…² gene_…³ gene_…⁴ trans…⁵\n   <fct>    <int> <int> <fct>  <chr>     <chr>   <chr>   <chr>   <fct>   <chr>  \n 1 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 2 chr1     14404 21859 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 3 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 4 chr1     14404 21119 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 5 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 6 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 7 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 8 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 9 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n10 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n# … with 214,506 more rows, 10 more variables: transcript_status <chr>,\n#   transcript_type <chr>, transcript_novelty <fct>, ISM_subtype <fct>,\n#   n_exons <dbl>, length <dbl>, within_CAGE_peak <lgl>,\n#   within_ATAC_peak <lgl>, within_polyA_site <lgl>, polyA_motif_found <lgl>,\n#   and abbreviated variable names ¹​gene_name, ²​gene_status, ³​gene_type,\n#   ⁴​gene_novelty, ⁵​transcript_id\n\n\n\ntableS1 %>%\n  write_tsv(\"output/tables/TableS1_v5.tsv.gz\")\n\nNumbers for manuscript text:\n\ntableS1 %>% count(transcript_status)\n\n# A tibble: 2 × 2\n  transcript_status      n\n  <chr>              <int>\n1 KNOWN              65006\n2 NOVEL             149510\n\ntableS1Novel1 = tableS1 %>%\n  filter(transcript_novelty %in% c(\"NIC\", \"NNC\"))\n\ntableS1Novel1 %>%\n  summarize(n = n(), n_genes = n_distinct(gene_id))\n\n# A tibble: 1 × 2\n      n n_genes\n  <int>   <int>\n1 65184   10175\n\ntableS1Novel2 = tableS1 %>%\n  filter(transcript_novelty %in% c(\"NIC\", \"NNC\", \"ISM\"))\n\ntableS1Novel2 %>%\n  count(within_CAGE_peak, within_ATAC_peak) %>%\n  mutate(prop = n/nrow(tableS1Novel2))\n\n# A tibble: 4 × 4\n  within_CAGE_peak within_ATAC_peak     n   prop\n  <lgl>            <lgl>            <int>  <dbl>\n1 FALSE            FALSE            28580 0.193 \n2 FALSE            TRUE             15183 0.102 \n3 TRUE             FALSE            10204 0.0688\n4 TRUE             TRUE             94306 0.636 \n\ntableS1Novel2 %>% count(within_CAGE_peak) %>% mutate(prop = n/nrow(tableS1Novel2))\n\n# A tibble: 2 × 3\n  within_CAGE_peak      n  prop\n  <lgl>             <int> <dbl>\n1 FALSE             43763 0.295\n2 TRUE             104510 0.705\n\ntableS1Novel2 %>% count(within_ATAC_peak) %>% mutate(prop = n/nrow(tableS1Novel2))\n\n# A tibble: 2 × 3\n  within_ATAC_peak      n  prop\n  <lgl>             <int> <dbl>\n1 FALSE             38784 0.262\n2 TRUE             109489 0.738\n\ntableS1Novel2 %>%\n  count(within_polyA_site, polyA_motif_found) %>%\n  mutate(prop = n/nrow(tableS1Novel2))\n\n# A tibble: 4 × 4\n  within_polyA_site polyA_motif_found      n   prop\n  <lgl>             <lgl>              <int>  <dbl>\n1 FALSE             FALSE              13342 0.0900\n2 FALSE             TRUE               13429 0.0906\n3 TRUE              FALSE              12279 0.0828\n4 TRUE              TRUE              109223 0.737 \n\ntableS1 %>%\n  filter(transcript_novelty %in% c(\"Known\", \"ISM\")) %>%\n  count(transcript_novelty, within_polyA_site | polyA_motif_found)\n\n# A tibble: 4 × 3\n  transcript_novelty `within_polyA_site | polyA_motif_found`     n\n  <fct>              <lgl>                                   <int>\n1 ISM                FALSE                                    9997\n2 ISM                TRUE                                    73092\n3 Known              FALSE                                   15470\n4 Known              TRUE                                    49536\n\n\nSplice junctions from SQANTI:\n\nsqantiJunc = read_tsv(\"data/sqanti/cp_vz_0.75_min_7_recovery_talon_junctions.txt.gz\")\n\nRows: 1901871 Columns: 24\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (10): isoform, chrom, strand, junction_number, transcript_coord, junctio...\ndbl  (9): genomic_start_coord, genomic_end_coord, diff_to_Ref_start_site, di...\nlgl  (5): bite_junction, RTS_junction, indel_near_junct, phyloP_start, phylo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nuniqueJunc = sqantiJunc %>%\n  group_by(chrom, strand, genomic_start_coord, genomic_end_coord) %>%\n  summarize(\n    n = sum(intropolis.v1.hg19.tsv.min_count_10_unique),\n    intropolis_support = n > 0,\n    novel = all(junction_category == \"novel\"),\n    canonical = all(canonical == \"canonical\"),\n    .groups = \"drop\"\n  )\n\nuniqueJunc %>% count(intropolis_support) %>% mutate(prop = n/nrow(uniqueJunc))\n\n# A tibble: 2 × 3\n  intropolis_support      n   prop\n  <lgl>               <int>  <dbl>\n1 FALSE               10896 0.0471\n2 TRUE               220360 0.953 \n\nuniqueJunc %>% count(novel) %>% mutate(prop = n/nrow(uniqueJunc))\n\n# A tibble: 2 × 3\n  novel      n  prop\n  <lgl>  <int> <dbl>\n1 FALSE 193141 0.835\n2 TRUE   38115 0.165\n\nuniqueJunc %>% filter(novel) %>% count(intropolis_support) %>% mutate(prop = n/nrow(uniqueJunc %>% filter(novel)))\n\n# A tibble: 2 × 3\n  intropolis_support     n  prop\n  <lgl>              <int> <dbl>\n1 FALSE               9862 0.259\n2 TRUE               28253 0.741\n\n\nProblematic spliceJns.txt gives us 57.5% novel SJs:\n\ngencodeJuncOld = read_tsv(\"data/splice_junctions/spliceJns.problematic.txt\", col_names = c(\"chrom\", \"genomic_start_coord\", \"genomic_end_coord\", \"strand\")) %>%\n  select(!starts_with(\"X\")) %>%\n  mutate(strand = case_when(strand == 1 ~ \"+\", strand == 2 ~ \"-\")) %>%\n  mutate(novel2 = FALSE)\n\nRows: 474236 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): chrom\ndbl (5): genomic_start_coord, genomic_end_coord, strand, X5, X6\nlgl (3): X7, X8, X9\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nuniqueJunc2 = uniqueJunc %>% left_join(gencodeJuncOld) %>% mutate(novel2 = replace_na(novel2, TRUE))\n\nJoining with `by = join_by(chrom, strand, genomic_start_coord,\ngenomic_end_coord)`\n\nuniqueJunc2 %>% count(novel2) %>% mutate(prop = n/nrow(uniqueJunc2))\n\n# A tibble: 2 × 3\n  novel2      n  prop\n  <lgl>   <int> <dbl>\n1 FALSE   98334 0.425\n2 TRUE   132922 0.575\n\n\nUpdated spliceJns.txt agrees with SQANTI:\n\ngencodeJunc = read_tsv(\"data/splice_junctions/spliceJns.exon_reorder.txt\", col_names = c(\"chrom\", \"genomic_start_coord\", \"genomic_end_coord\", \"strand\")) %>%\n  select(!starts_with(\"X\")) %>%\n  mutate(strand = case_when(strand == 1 ~ \"+\", strand == 2 ~ \"-\")) %>%\n  mutate(novel2 = FALSE)\n\nRows: 383616 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): chrom\ndbl (5): genomic_start_coord, genomic_end_coord, strand, X5, X6\nlgl (3): X7, X8, X9\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nuniqueJunc2 = uniqueJunc %>% left_join(gencodeJunc) %>% mutate(novel2 = replace_na(novel2, TRUE))\n\nJoining with `by = join_by(chrom, strand, genomic_start_coord,\ngenomic_end_coord)`\n\nuniqueJunc2 %>% count(novel2) %>% mutate(prop = n/nrow(uniqueJunc2))\n\n# A tibble: 2 × 3\n  novel2      n  prop\n  <lgl>   <int> <dbl>\n1 FALSE  192904 0.834\n2 TRUE    38352 0.166\n\n\nJoining with intropolis junctions also agrees with SQANTI:\n\nintropJunc = read_tsv(\"ref/intropolis/intropolis_v1_hg19_2samples_10counts_starSJout.tsv.gz\", col_names = c(\"chrom\", \"genomic_start_coord\", \"genomic_end_coord\", \"strand\")) %>%\n  select(!starts_with(\"X\")) %>%\n  mutate(strand = case_when(strand == 1 ~ \"+\", strand == 2 ~ \"-\")) %>%\n  mutate(intropolis_support2 = TRUE)\n\nRows: 4974342 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): chrom\ndbl (8): genomic_start_coord, genomic_end_coord, strand, X5, X6, X7, X8, X9\nlgl (1): X10\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nuniqueJunc2 = uniqueJunc %>%\n  left_join(intropJunc) %>%\n  mutate(intropolis_support2 = replace_na(intropolis_support2, FALSE))\n\nJoining with `by = join_by(chrom, strand, genomic_start_coord,\ngenomic_end_coord)`\n\nuniqueJunc2 %>% count(intropolis_support2) %>% mutate(prop = n/nrow(uniqueJunc2))\n\n# A tibble: 2 × 3\n  intropolis_support2      n   prop\n  <lgl>                <int>  <dbl>\n1 FALSE                10897 0.0471\n2 TRUE                220359 0.953"
  },
  {
    "objectID": "analysis/Figure2_isoFraction.html",
    "href": "analysis/Figure2_isoFraction.html",
    "title": "Figure 2 - Isoform Fraction analysis",
    "section": "",
    "text": "Rows: 214516 Columns: 35\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (7): annot_gene_id, annot_transcript_id, annot_gene_name, annot_transcr...\ndbl (28): gene_ID, transcript_ID, n_exons, length, 209_1_VZ, 209_2_VZ, 209_3...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "analysis/Figure2_isoFraction.html#get-average-gene-expression-and-isoform-number",
    "href": "analysis/Figure2_isoFraction.html#get-average-gene-expression-and-isoform-number",
    "title": "Figure 2 - Isoform Fraction analysis",
    "section": "Get average gene expression and isoform number",
    "text": "Get average gene expression and isoform number\n\ngenes = cts %>% dplyr::select(annot_gene_id, annot_transcript_id,annot_gene_name) %>% group_by(annot_gene_id) %>% summarise(numIso=n_distinct(annot_transcript_id))\n\ncountMat = as.matrix(cts.collapse[,9:14])\ncs = colSums(countMat) / 1000000 ## TPM normalize\ncountMat.tpm = t(apply(countMat, 1, function(x) { x / cs}))\nisoTPM = data.frame(annot_gene_id = cts$annot_gene_id, annot_transcript_id = cts$annot_transcript_id, isoTPM=rowMeans(countMat.tpm))\n\ngenes <- genes %>% left_join(isoTPM %>% group_by(annot_gene_id) %>% summarise(geneTPM = log2(.1 + mean(isoTPM))))\n\nJoining with `by = join_by(annot_gene_id)`"
  },
  {
    "objectID": "analysis/Figure2_isoFraction.html#treeplot",
    "href": "analysis/Figure2_isoFraction.html#treeplot",
    "title": "Figure 2 - Isoform Fraction analysis",
    "section": "TreePlot",
    "text": "TreePlot\n\nlibrary(treemapify)\n\ndf_treemap = cts  %>% dplyr::select(Gene=annot_gene_name, Isoform=annot_transcript_name, novelty2, counts) %>% filter(Gene%in% c(\"TBR1\",\"SATB2\", \"SOX5\", \"SOX2\", \"EOMES\", \"DLX1\",\"POU3F2\", \"HOPX\", \"HES1\", \"RBFOX2\"))\n\n\nggplot(df_treemap, aes(area=counts, fill=Gene, label=Isoform, alpha=(novelty2==\"Known\"), subgroup=Gene)) + \n  geom_treemap() +geom_treemap_subgroup_border(colour = \"black\", size = 5, alpha=1) +\n  geom_treemap_subgroup_text(place = \"centre\", grow = TRUE,\n                             alpha = 0.95, colour = \"black\",\n                             fontface = \"italic\") +\n  geom_treemap_text(colour = \"white\", place = \"top\", alpha=.5,\n                    size = 15, grow = F)+   theme(legend.position = \"none\")\n\nWarning: Using alpha for a discrete variable is not advised.\n\n\n\n\ndf_treemap = cts  %>% dplyr::select(Gene=annot_gene_name, Isoform=annot_transcript_name, novelty2, counts) %>% filter(Gene%in% c(\"SCN2A\", \"CHD8\", \"SYNGAP1\", \"ADNP\", \"PTEN\", \"FOXP1\", \"CHD2\", \"POGZ\", \"GRIN2B\", \"KTM5B\", \"ARID1B\", \"ASH1L\"))\n\n\nFig5_ASDtreeplot = ggplot(df_treemap, aes(area=counts, fill=Gene, label=Isoform, alpha=(novelty2==\"Known\"), subgroup=Gene)) + \n  geom_treemap() +geom_treemap_subgroup_border(colour = \"black\", size = 2, alpha=1) +\n  geom_treemap_subgroup_text(place = \"centre\", grow = F,\n                             alpha = 0.95, colour = \"black\",\n                             fontface = \"italic\") +\n  geom_treemap_text(colour = \"grey\", place = \"top\", alpha=.5,\n                    size = 15, grow = F)+   theme(legend.position = \"none\") + \n  scale_fill_brewer(palette = 'Paired')\n\nggsave(Fig5_ASDtreeplot, file=\"output/figures/Fig5/Fig5_ASDtreeplot.pdf\",width=5,height=3)\n\nWarning: Using alpha for a discrete variable is not advised."
  },
  {
    "objectID": "analysis/Figure2_novel_exons.html",
    "href": "analysis/Figure2_novel_exons.html",
    "title": "Figure 2 - Novel Exons",
    "section": "",
    "text": "options(stringsAsFactors = F)\noptions(ucscChromosomeNames = F)\n\nsuppressMessages({\n  library(data.table)\n  library(tidyverse)\n  library(rtracklayer)\n  library(GenomicFeatures)\n  library(GenomicRanges)\n  library(plyranges)\n#  devtools::install_github(\"mskilab/gUtils\")\n  library(gUtils)\n\n})\n\ncolorVector = c(\n  \"Known\" = \"#009E73\",\n  \"ISM\"   = \"#0072B2\",\n  \"ISM_Prefix\" = \"#005996\",\n  \"ISM_Suffix\" = \"#378bcc\",\n  \"NIC\"   = \"#D55E00\",\n  \"NNC\"   = \"#E69F00\",\n  \"Other\" = \"#000000\"\n)\ncolorVector_ismSplit = colorVector[-2]\n\n # Gencode v33 Annotations\n  gencode=\"ref/gencode.v33lift37.annotation.gtf.gz\"\n  gr.gencode = rtracklayer::import(gencode)\n  #txdb.gencode = makeTxDbFromGRanges(gr.gencode)\n\n  # Isoseq Annotations\n  isoseq=\"data/cp_vz_0.75_min_7_recovery_talon.gtf.gz\"\n  gr.isoseq = rtracklayer::import(isoseq)\n  #txdb.isoseq = makeTxDbFromGRanges(gr.isoseq)"
  },
  {
    "objectID": "analysis/Figure2_novel_exons.html#ashoks-code-using-bash-and-bedtools",
    "href": "analysis/Figure2_novel_exons.html#ashoks-code-using-bash-and-bedtools",
    "title": "Figure 2 - Novel Exons",
    "section": "Ashok’s code using bash and bedtools",
    "text": "Ashok’s code using bash and bedtools\n\n\ngzcat ref/gencode.v33lift37.annotation.gtf.gz | awk '{if($3==\"exon\") { for(i=1;i<=NF;i++)if($i~/(exon_id)/){ print $1\"\\t\"$4\"\\t\"$5\"\\t\"$7\"\\t\"$16\"\\t\"$i\"\\t\"$(i+1)}}}' |  sed 's/[\";]//g' | awk '{print $1\"\\t\"$2\"\\t\"$3\"\\t\"$5\"_\"$6\"_\"$7\"\\t\"\"1000\"\"\\t\"$4}' | awk '!seen[$0]++' > data/working/novel_exons/All_Gencode_Exon.bed\n\ngzcat data/cp_vz_0.75_min_7_recovery_talon.gtf.gz | awk '{if($3==\"exon\") { for(i=1;i<=NF;i++)if($i~/(exon_status|talon_exon|gene_name)/){ printf \"%s%s\",(!c++? \"\":FS),$i\"\\t\"$(i+ 1)  }; print \"\\t\"$1\"\\t\"$4\"\\t\"$5\"\\t\"$7; c=0 }\n}' | sed 's/[\";]//g' | awk '{if($6==\"NOVEL\") print $7\"\\t\"$8\"\\t\"$9\"\\t\"$2\"_\"$3\"_\"$4\"\\t\"\"1000\"\"\\t\"$NF}' | awk '!seen[$0]++' > data/working/novel_exons/All_Novel_Exon.bed\n\nbedtools intersect -a data/working/novel_exons/All_Novel_Exon.bed -b data/working/novel_exons/All_Gencode_Exon.bed -v > data/working/novel_exons/No_genecode_ovelap_novel_exon.bed\n\nsort -k 1,1 -k2,2n  data/working/novel_exons/All_Novel_Exon.bed > data/working/novel_exons/All_Novel_Exon_sorted.bed\nsort -k 1,1 -k2,2n  data/working/novel_exons/All_Gencode_Exon.bed > data/working/novel_exons/All_Gencode_Exon_sorted.bed\n\n\nbedtools multiinter -header -names Novel Gencode -i data/working/novel_exons/All_Novel_Exon_sorted.bed data/working/novel_exons/All_Gencode_Exon_sorted.bed > data/working/novel_exons/bulk_NewCoding.txt\n\n***** WARNING: File data/working/novel_exons/All_Novel_Exon.bed has inconsistent naming convention for record:\nGL000204.1  56744   57007   TALONG000062493_talon_exon_1018404  1000    -\n\n***** WARNING: File data/working/novel_exons/All_Novel_Exon.bed has inconsistent naming convention for record:\nGL000204.1  56744   57007   TALONG000062493_talon_exon_1018404  1000    -\n\n\n#Mike’s code using R\n\n#How many distinct GENCODE exons?\n  exons.gencode_unique = gr.gencode %>% as_tibble() %>% filter(type=='exon') %>%\n    dplyr::select(seqnames, start, end, exon_id)\n  exons.gencode_unique$seqnames=as.character(exons.gencode_unique$seqnames)\n  length(unique(exons.gencode_unique$exon_id)) #748355 unique exon IDs in gencode\n\n[1] 748355\n\n  exons.gencode_unique$coord = paste0(exons.gencode_unique$seqnames, \":\", exons.gencode_unique$start, \"-\", exons.gencode_unique$end)\n  length(unique(exons.gencode_unique$coord)) #634758 unique chr-start-stop in gencode\n\n[1] 634758\n\n  exons.gencode = unique(gr.gencode[gr.gencode$type=='exon',])\n  length(exons.gencode)\n\n[1] 634771\n\n  ashok.gencode= read.table(\"data/working/novel_exons/All_Gencode_Exon_sorted.bed\")\n  dim(ashok.gencode) # 750284 in Ashok's bed file\n\n[1] 750284      6\n\n  # How many distinct IsoSeq exons? ~83k\n    exons.isoseq_unique = gr.isoseq %>% as_tibble() %>% filter(type=='exon',exon_status==\"NOVEL\") %>% dplyr::select(seqnames, start, end, exon_id) %>% mutate(coord=paste0(as.character(seqnames), \":\", start, \"-\", end))\n  length(unique(exons.isoseq_unique$exon_id)) #334861 by exon_ID in Talon\n\n[1] 82882\n\n  length(unique(exons.isoseq_unique$coord)) #334774 by coordinates\n\n[1] 82850\n\n   ashok.isoseq = read.table(\"data/working/novel_exons/All_Novel_Exon.bed\")\n  dim(ashok.isoseq) #83153 in Ashok's bed file\n\n[1] 83153     6\n\n  exons.isoseq = unique(gr.isoseq[gr.isoseq$type==\"exon\",])\n  \n  \n  # Find compltely non-overlapping exons\n  ## Used two methods, both give 7039 unique exons in TALON not overlapping in Gencode -- from 3549 genes\n  novel <- exons.isoseq %>% filter_by_non_overlaps(exons.gencode, minoverlap = 2L) %>% filter(grepl(\"chr\", seqnames))\n  \n  length(novel) #7039 novel exons\n\n[1] 7039\n\n  length(unique(novel$gene_id)) #3551 genes with novel exons\n\n[1] 3551\n\n  sum(width(novel %>% reduce_ranges())) #3849462 bp --> 3.85MB of novel exons\n\n[1] 3849462\n\n  novel2 = subsetByOverlaps(exons.isoseq, exons.gencode,invert = T,type='any',ignore.strand=T, minoverlap = 2L)\n  novel2 = novel2[grepl('chr',seqnames(novel2))]\n  length(unique(novel2$gene_name))\n\n[1] 3549\n\n  these_novel = novel2 %>% as_tibble()\n  \n  write.csv(these_novel, file=\"data/working/novel_exons/mike_novel.csv\")\n \n  ## Write GTF for novel exons, and control (strand flipped exons)\n   export(novel2,\"data/working/novel_exons/novel_exons_mike.gff\",format = \"gff\")\n    export(gr.flipstrand(novel2),\"data/working/novel_exons/novel_exons_strandflip_mike.gff\",format = \"gff\")\n   \n  \n   \n  ashok.novel =  read.table(\"data/working/novel_exons/No_genecode_ovelap_novel_exon.bed\")\n  ashok.novel = ashok.novel[grepl(\"chr\",ashok.novel$V1),]\n  dim(ashok.novel) # Ashok gets 7041 isoforms in 3542 genes\n\n[1] 7041    6\n\n  ashok.novel.genes = unique(unlist(lapply(strsplit(ashok.novel$V4, \"_\"),'[',1)))\n  \n  length(intersect(ashok.novel.genes, novel2$gene_name))\n\n[1] 3539\n\n  ashok.novel.genes[!ashok.novel.genes %in% novel2$gene_name]\n\n[1] \"SLC35A1\"    \"PPP1R32\"    \"AC007262.2\"\n\n  novel2$gene_name[!novel2$gene_name %in% ashok.novel.genes]\n\n [1] \"PINK1\"           \"ERI3\"            \"RBM5\"            \"B3GALNT1\"       \n [5] \"PDK4\"            \"SMARCD3\"         \"RBM17\"           \"ABLIM1\"         \n [9] \"DDB1\"            \"TALONG000089386\"\n\n\n\nthese_novel %>% head()\n\n# A tibble: 6 × 54\n  seqnames  start    end width strand source type  score phase gene_id   gene_…¹\n  <fct>     <int>  <int> <int> <fct>  <fct>  <fct> <dbl> <int> <chr>     <chr>  \n1 chr1      18913  19139   227 -      TALON  exon     NA    NA ENSG0000… WASH7P \n2 chr1      18913  20286  1374 -      TALON  exon     NA    NA ENSG0000… WASH7P \n3 chr1      18913  21119  2207 -      TALON  exon     NA    NA ENSG0000… WASH7P \n4 chr1      18913  20960  2048 -      TALON  exon     NA    NA ENSG0000… WASH7P \n5 chr1      18913  19416   504 -      TALON  exon     NA    NA ENSG0000… WASH7P \n6 chr1     840675 841059   385 +      TALON  exon     NA    NA ENSG0000… AL6456…\n# … with 43 more variables: gene_status <chr>, gene_type <chr>,\n#   talon_gene <chr>, havana_gene <chr>, hgnc_id <chr>, level <chr>,\n#   remap_num_mappings <chr>, remap_status <chr>, remap_target_status <chr>,\n#   transcript_id <chr>, transcript_status <chr>, transcript_name <chr>,\n#   talon_transcript <chr>, NNC_transcript <chr>, exon_number <chr>,\n#   exon_id <chr>, talon_exon <chr>, exon_status <chr>, ont <chr>,\n#   remap_original_location <chr>, source.1 <chr>, tag <chr>, …\n\nthese_novel$protein_coding = these_novel$gene_type==\"protein_coding\"\nthese_novel$protein_coding[is.na(these_novel$protein_coding)] = F\nthese_novel$protein_coding = factor(these_novel$protein_coding, levels=c(TRUE,FALSE))\nFig2_exonWidth = ggplot(these_novel, aes(x=width,fill=protein_coding)) + geom_histogram(alpha=.5) + scale_x_log10(limits=c(10,10000))  + theme_bw() +\n  labs(x=\"Novel exon width (bp)\")\nFig2_exonWidth\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 62 rows containing non-finite values (`stat_bin()`).\n\n\nWarning: Removed 4 rows containing missing values (`geom_bar()`).\n\n\n\n\nggsave(Fig2_exonWidth, file=\"output/figures/Fig2/Fig2_exonWidth.pdf\",width=4,height=3)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 62 rows containing non-finite values (`stat_bin()`).\nRemoved 4 rows containing missing values (`geom_bar()`)."
  },
  {
    "objectID": "analysis/Figure2_PlotGene.html",
    "href": "analysis/Figure2_PlotGene.html",
    "title": "Figure 2 - Plot One Gene",
    "section": "",
    "text": "options(stringsAsFactors = F)\noptions(ucscChromosomeNames = F)\n\nsuppressMessages({\n  library(data.table)\n  library(tidyverse)\n  library(IsoformSwitchAnalyzeR)\n  library(rtracklayer)\n  library(ggrepel)\n  library(scales)\n  library(GenomicFeatures)\n  library(GenomicRanges)\n  library(Gviz)\n\n})\n\ncolorVector = c(\n  \"Known\" = \"#009E73\",\n  \"ISM\"   = \"#0072B2\",\n  \"ISM_Prefix\" = \"#005996\",\n  \"ISM_Suffix\" = \"#378bcc\",\n  \"NIC\"   = \"#D55E00\",\n  \"NNC\"   = \"#E69F00\",\n  \"Other\" = \"#000000\"\n)\ncolorVector_ismSplit = colorVector[-2]"
  },
  {
    "objectID": "analysis/Figure2_PlotGene.html#plot-one-gene",
    "href": "analysis/Figure2_PlotGene.html#plot-one-gene",
    "title": "Figure 2 - Plot One Gene",
    "section": "Plot One Gene",
    "text": "Plot One Gene\n\nisoseq.gene.names = rtracklayer::import(\"data/cp_vz_0.75_min_7_recovery_talon.gtf.gz\") %>%\n  as_tibble() %>%\n  dplyr::filter(type == \"gene\") %>%\n  dplyr::select(gene_id, gene_name)\n\ngr.isoseq = gr.isoseq %>% left_join(isoseq.gene.names)\n\nJoining with `by = join_by(gene_id)`\n\nannot.gene = as_tibble(gr.gencode) %>% filter(type==\"gene\")\n  \ncurrent_gene=\"UBE3A\"\ngenes_to_plot = data.frame(V1 = current_gene, V2 = unique(na.omit(gr.gencode$transcript_id[which(gr.gencode$gene_name==current_gene)])), V3=\"Gencode\")\n\ngenes_to_plot = rbind(genes_to_plot, data.frame(V1 = current_gene, V2 = unique(na.omit(gr.isoseq$transcript_id[which(gr.isoseq$gene_name==current_gene)])), V3=\"Isoseq\"))\ngenes_to_plot = genes_to_plot[!apply(is.na(genes_to_plot), 1,any),]\n\n\n\n gencode_only=base::setdiff(with(genes_to_plot,V2[V1 == current_gene & V3==\"Gencode\"]) , with(genes_to_plot,V2[V1 == current_gene & V3==\"Isoseq\"]))\n  \n shared=base::intersect(with(genes_to_plot,V2[V1 == current_gene & V3==\"Gencode\"]) , with(genes_to_plot,V2[V1 == current_gene & V3==\"Isoseq\"]))\n  \n novel=base::setdiff(with(genes_to_plot,V2[V1 == current_gene & V3==\"Isoseq\"]) , with(genes_to_plot,V2[V1 == current_gene & V3==\"Gencode\"]))\n  novel=novel[grepl(\"^TALON\",novel)]\n\n\n  # gencode tracks\n  gencode_only_transcript_onegene=gencode_transcript[gencode_only,]\n  gencode_only_transcript_onegene=unlist(gencode_only_transcript_onegene)\n  elementMetadata(gencode_only_transcript_onegene)$transcript <- names(gencode_only_transcript_onegene)\n  gencode_only_track=GeneRegionTrack(gencode_only_transcript_onegene,group = \"transcript\",name = \"Gencode undetected\")\n\n  shared_transcript=gencode_transcript[shared,]\n  shared_transcript=unlist(shared_transcript)\n  elementMetadata(shared_transcript)$transcript=names(shared_transcript)\n  shared_track=GeneRegionTrack(shared_transcript,group = \"transcript\",name = \"Gencode detected\")\n  displayPars(gencode_only_track)=list(stacking=\"squish\",\n                                       background.panel = \"#ffffb2\",\n                                       fill=\"#006d2c\",\n                                       col=\"#006d2c\",\n                                       lwd=0.3,\n                                       col.line=\"black\",\n                                       fontcolor.title=\"black\",\n                                       background.title=\"#bd0026\")\n  displayPars(shared_track)=list(stacking=\"squish\",\n                                 background.panel = \"#f1eef6\",\n                                 fill=\"#d62424\",\n                                 col=\"#d62424\",\n                                 lwd=0.3,\n                                 col.line=\"black\",\n                                 fontcolor.title=\"black\",\n                                 background.title=\"#045a8d\")\n  # isoseq tracks\n  isoseq_transcript_onegene=isoseq_transcript[novel,]\n  isoseq_transcript_onegene=unlist(isoseq_transcript_onegene)\n  elementMetadata(isoseq_transcript_onegene)$transcript=names(isoseq_transcript_onegene)\n  seqlevels(isoseq_transcript_onegene) = seqlevels(isoseq_transcript_onegene)[1:25]\n  isoseq_track=GeneRegionTrack(isoseq_transcript_onegene,group = \"transcript\",name = \"Novel\", u=FALSE)\n  displayPars(isoseq_track)=list(stacking=\"squish\",\n                                 background.panel = \"#bcbddc\",\n                                 fill=\"#171cc7\",\n                                 col=\"#171cc7\",\n                                 lwd=0.3,\n                                 col.line=\"black\",\n                                 showId = FALSE,\n                                 transcriptAnnotation = \"transcript\",\n                                 fontcolor.title=\"black\",\n                                 background.title=\"#7a0177\")\n\n\n  # universal tracks\n  axisTrack <- GenomeAxisTrack()\n  ideoTrack <- IdeogramTrack(genome = \"hg19\", chromosome = unique(seqnames(gencode_only_track)))\n\n  leftmost=min(c(gencode_only_transcript_onegene@ranges@start,shared_transcript@ranges@start,isoseq_transcript_onegene@ranges@start))\n  rightmost=max(c(gencode_only_transcript_onegene@ranges@start,shared_transcript@ranges@start,isoseq_transcript_onegene@ranges@start))\n  extra=(rightmost - leftmost)*0.05\n  plotTracks(list(ideoTrack,axisTrack,jc_track,cage,gencode_only_track,shared_track,isoseq_track),\n             chromosome = unique(seqnames(isoseq_track)),\n             from = leftmost - extra,\n             to = rightmost + extra,\n             sizes = c(1.5,1.5,1.5,1.5,5, max(1.5,0.35*length(shared)),max(2,0.3*length(novel))))\n\nLoading required package: GenomicInteractions\nLoading required package: InteractionSet\n\nAttaching package: 'GenomicInteractions'\n\nThe following object is masked from 'package:Gviz':\n\n    availableDisplayPars\n\nThe following object is masked from 'package:scales':\n\n    is.trans\n\nThe following object is masked from 'package:DESeq2':\n\n    plotCounts\n\n\n\n\n\n\n#devtools::install_github(\"dzhang32/ggtranscript\")\nlibrary(ggtranscript)\n\nthis_gene=\"UBE3A\"\n\nthese_exons <- gr.isoseq %>% dplyr::filter(annot_gene_name == this_gene & type == \"exon\" & (counts > 10 | novelty2==\"Known\"))\nthis_cds <- gr.isoseq %>% dplyr::filter(annot_gene_name == this_gene & type == \"CDS\" & (counts > 10 | novelty2==\"Known\"))\n\ng1<-these_exons %>% \n    ggplot(aes(\n        xstart = start,\n        xend = end,\n        y = reorder(annot_transcript_name, counts)\n    )) +\n    geom_range(\n        aes(fill = log2(1+cpm), group=novelty2), height=.25) + \n  geom_range(data=this_cds, aes(fill = log2(1+cpm), group=novelty2)) + \n    geom_intron(\n        data = to_intron(these_exons, \"annot_transcript_name\"),\n        aes(strand = strand),arrow.min.intron.length = 500,\n        arrow = grid::arrow(ends = \"last\", length = grid::unit(0.1, \"inches\")),\n        color='grey60',\n    ) + facet_grid(novelty2~.,scale='free',space='free') + theme_bw() + labs(y=\"\") + ggtitle(this_gene,subtitle = unique(these_exons$seqnames)) + theme(plot.title = element_text(hjust=.5), plot.subtitle = element_text(hjust=.5))\ng1 \n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n\n\n\n\nggsave(g1, file=paste0(\"output/figures/switch_plots/ggtranscript_\", this_gene,\".pdf\"),height=10, width=12)\n\n# \n# these_exons <- gr.isoseq %>% dplyr::filter(annot_gene_name == this_gene & (type == \"exon\" | type==\"CDS\")& (counts > 100 | novelty2==\"Known\"))\n# \n# this_gene_rescaled <- shorten_gaps(\n#   these_exons, \n#   to_intron(these_exons %>% filter(type==\"exon\"), \"annot_transcript_name\"), \n#   group_var = \"annot_transcript_name\"\n#   )\n# \n# this_cds_rescaled <- shorten_gaps(\n#   this_cds, \n#   to_intron(this_cds, \"annot_transcript_name\"), \n#   group_var = \"annot_transcript_name\"\n#   )\n# \n# this_gene_rescaled %>%\n#     dplyr::filter(type == \"exon\") %>%\n#     ggplot(aes(\n#         xstart = start,\n#         xend = end,\n#         y = annot_transcript_name\n#     )) +\n#     geom_range(\n#       aes(fill = log(1+cpm)), height=.25) + \n#     geom_range(data=this_gene_rescaled %>% filter(type==\"CDS\"),aes(fill = log(1+cpm)))+\n#     geom_intron(\n#         data = this_gene_rescaled %>% dplyr::filter(type == \"intron\"), \n#         arrow.min.intron.length = 200, aes(strand=strand)\n#     )+ facet_grid(novelty2~.,scale='free',space='free') + theme_bw() + labs(y=\"\")"
  },
  {
    "objectID": "analysis/Figure2_plotNovelGenes.html",
    "href": "analysis/Figure2_plotNovelGenes.html",
    "title": "Figure 2 - Plot Novel Genes",
    "section": "",
    "text": "options(stringsAsFactors = F)\noptions(ucscChromosomeNames = F)\n\nsuppressMessages({\n  library(data.table)\n  library(tidyverse)\n  library(IsoformSwitchAnalyzeR)\n  library(rtracklayer)\n  library(ggrepel)\n  library(scales)\n  library(GenomicFeatures)\n  library(GenomicRanges)\n  library(GenomicInteractions)\n  library(Gviz)\n  library(ggtranscript)\n\n\n})\n\ncolorVector = c(\n  \"Known\" = \"#009E73\",\n  \"ISM\"   = \"#0072B2\",\n  \"ISM_Prefix\" = \"#005996\",\n  \"ISM_Suffix\" = \"#378bcc\",\n  \"NIC\"   = \"#D55E00\",\n  \"NNC\"   = \"#E69F00\",\n  \"Other\" = \"#000000\"\n)\ncolorVector_ismSplit = colorVector[-2]\n\n\nif(!file.exists('data/working/locusPlot_workingData.RData')) {\n  \n  # CAGE tracks\n  cage=AnnotationTrack(range = \"ref/CAGE/hg19.cage_peak_phase1and2combined_coord.bed\",\n                       background.panel = \"#99d8c9\",\n                       fill=\"#fc9272\",\n                       name = \"CAGE peaks\",\n                       col.line=\"#99d8c9\",\n                       background.title=\"#2ca25f\",\n                       fontcolor.title=\"black\")\n  \n  # Intropolis junctions\n  jc=read.delim(\"ref/intropolis/intropolis_v1_hg19_2samples_10counts_starSJout.tsv.gz\",header = F)\n  jc= jc[jc$V7>100,]\n  anchor.one = GRanges(jc$V1, IRanges(jc$V2 + 1, width=5))\n  anchor.two = GRanges(jc$V1, IRanges(jc$V3, width=5))\n  interaction_counts = log2(jc$V7)\n  \n  jc_object=GenomicInteractions(anchor.one,anchor.two,interaction_counts)\n  jc_track=InteractionTrack(jc_object,name = \"Intropolis junctions\")\n  displayPars(jc_track)=list(background.panel = \"#fee0d2\",\n                             col.interactions =\"#6a51a3\", #\"#43a2ca\",\n                             col.anchors.line = \"gray\",\n                             col.anchors.line = \"gray\",\n                             lwd=0.6,\n                             fontcolor.title=\"black\",\n                             background.title=\"#de2d26\",\n                             plot.outside = FALSE)\n  \n  # Gencode v33 Annotations\n  gencode=\"ref/gencode.v33lift37.annotation.gtf.gz\"\n  gencode_txdb=makeTxDbFromGFF(gencode, format=\"gtf\")\n  gencode_transcript=exonsBy(gencode_txdb,by=\"tx\",use.names=T)\n  gr.gencode = rtracklayer::import(gencode) %>% as_tibble()\n  \n  # Isoseq Annotations\n  isoseq=\"data/sqanti/cp_vz_0.75_min_7_recovery_talon_corrected.gtf.cds.gff.gz\"\n  isoseq_txdb=makeTxDbFromGFF(isoseq, format=\"gtf\")\n  isoseq_transcript=exonsBy(isoseq_txdb,by=\"tx\",use.names=T)\n  gr.isoseq = rtracklayer::import(isoseq) %>% as_tibble()\n  \n  cts = read_table(\"data/cp_vz_0.75_min_7_recovery_talon_abundance_filtered.tsv.gz\")\ncts$novelty2 = as.character(cts$transcript_novelty)\ncts$novelty2[which(cts$novelty2==\"ISM\" & cts$ISM_subtype==\"Prefix\")] = \"ISM_Prefix\"\ncts$novelty2[which(cts$novelty2==\"ISM\" & cts$ISM_subtype==\"Suffix\")] = \"ISM_Suffix\"\ncts$novelty2[cts$novelty2 %in% c(\"Antisense\", \"Genomic\", \"Intergenic\", \"ISM\")] = \"Other\"\ncts$novelty2 = factor(cts$novelty2,levels=c(\"Known\", \"ISM_Prefix\", \"ISM_Suffix\", \"NIC\", \"NNC\", \"Other\"))\ncts$counts = rowSums(cts[,c(12:35)])\ncts$cpm = cts$counts / (sum(cts$counts)/1000000)\n\ngr.isoseq.old = gr.isoseq\n\ngr.isoseq <- gr.isoseq.old %>% left_join(cts, by=c(\"transcript_id\" = \"annot_transcript_id\"))\n\n  save.image('data/working/locusPlot_workingData.RData')\n\n} else {\n  load('data/working/locusPlot_workingData.RData')\n}\n\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... \n\n\nWarning in .get_cds_IDX(mcols0$type, mcols0$phase): The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\n\n\nWarning in .reject_transcripts(bad_tx, because): The following transcripts were dropped because they have incompatible\n  CDS and stop codons: ENST00000422803.2_2, ENST00000618549.1_2,\n  ENST00000619291.4_2, ENST00000621077.1_2, ENST00000621229.1_2,\n  ENST00000631326.2_2\n\n\nOK\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... \n\n\nWarning in .get_cds_IDX(mcols0$type, mcols0$phase): some CDS phases are missing\nor not between 0 and 2\n\n\nOK\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  .default = col_double(),\n  annot_gene_id = col_character(),\n  annot_transcript_id = col_character(),\n  annot_gene_name = col_character(),\n  annot_transcript_name = col_character(),\n  gene_novelty = col_character(),\n  transcript_novelty = col_character(),\n  ISM_subtype = col_character()\n)\nℹ Use `spec()` for the full column specifications."
  },
  {
    "objectID": "analysis/Figure2_plotNovelGenes.html#find-novel-intergenic-genes",
    "href": "analysis/Figure2_plotNovelGenes.html#find-novel-intergenic-genes",
    "title": "Figure 2 - Plot Novel Genes",
    "section": "Find Novel Intergenic Genes",
    "text": "Find Novel Intergenic Genes\n\n\n.\n Antisense Intergenic      Known \n       413        310     213793 \n\n\n[[1]]\n\n\n\n[[2]]\n\n\n\n[[3]]\n\n\n\n[[4]]\n\n\n\n[[5]]\n\n\n\n[[6]]\n\n\n\n[[7]]\n\n\n\n[[8]]\n\n\n\n[[9]]\n\n\n\n[[10]]\n\n\n\n[[11]]\n\n\n\n[[12]]\n\n\n\n[[13]]\n\n\n\n[[14]]\n\n\n\n[[15]]\n\n\n\n[[16]]\n\n\n\n[[17]]\n\n\n\n[[18]]\n\n\n\n[[19]]\n\n\n\n[[20]]\n\n\n\n[[21]]\n\n\n\n[[22]]\n\n\n\n[[23]]\n\n\n\n[[24]]\n\n\n\n[[25]]\n\n\n\n[[26]]\n\n\n\n[[27]]\n\n\n\n[[28]]\n\n\n\n[[29]]\n\n\n\n[[30]]\n\n\n\n[[31]]\n\n\n\n[[32]]\n\n\n\n[[33]]\n\n\n\n[[34]]\n\n\n\n[[35]]\n\n\n\n[[36]]\n\n\n\n[[37]]\n\n\n\n[[38]]\n\n\n\n[[39]]\n\n\n\n[[40]]\n\n\n\n[[41]]\n\n\n\n[[42]]\n\n\n\n[[43]]\n\n\n\n[[44]]\n\n\n\n[[45]]\n\n\n\n[[46]]\n\n\n\n[[47]]\n\n\n\n[[48]]\n\n\n\n[[49]]\n\n\n\n[[50]]\n\n\n\n[[51]]\n\n\n\n[[52]]\n\n\n\n[[53]]\n\n\n\n[[54]]\n\n\n\n[[55]]\n\n\n\n[[56]]\n\n\n\n[[57]]\n\n\n\n[[58]]\n\n\n\n[[59]]\n\n\n\n[[60]]\n\n\n\n[[61]]\n\n\n\n[[62]]\n\n\nquartz_off_screen \n                2"
  },
  {
    "objectID": "analysis/Figure2_plotNovelGenes.html#plot-antisense-genes",
    "href": "analysis/Figure2_plotNovelGenes.html#plot-antisense-genes",
    "title": "Figure 2 - Plot Novel Genes",
    "section": "Plot antisense genes",
    "text": "Plot antisense genes\n\n\n[1] 0\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n[1] 11\n[1] 12\n[1] 13\n[1] 14\n[1] 15\n[1] 16\n[1] 17\n[1] 18\n[1] 19\n[1] 20\n[1] 21\n[1] 22\n[1] 23\n[1] 24\n[1] 25\n[1] 26\n[1] 27\n[1] 28\n[1] 29\n[1] 30\n[1] 31\n[1] 32\n[1] 33\n[1] 34\n[1] 35\n[1] 36\n[1] 37\n[1] 38\n[1] 39\n[1] 40\n[1] 41\n[1] 42\n[1] 43\n[1] 44\n[1] 45\n[1] 46\n[1] 47\n[1] 48\n[1] 49\n[1] 50\n[1] 51\n[1] 52\n[1] 53\n[1] 54\n[1] 55\n[1] 56\n[1] 57\n[1] 58\n[1] 59\n[1] 60\n[1] 61\n[1] 62\n[1] 63\n[1] 64\n[1] 65\n[1] 66\n[1] 67\n[1] 68\n[1] 69\n[1] 70\n[1] 71\n[1] 72\n[1] 73\n[1] 74\n[1] 75\n[1] 76\n[1] 77\n[1] 78\n[1] 79\n[1] 80\n[1] 81\n[1] 82\n[1] 83\n[1] 84\n[1] 85\n[1] 86\n[1] 87\n[1] 88\n[1] 89\n[1] 90\n[1] 91\n[1] 92\n[1] 93\n[1] 94\n[1] 95\n[1] 96\n[1] 97\n[1] 98\n[1] 99\n[1] 100\n[1] 101\n[1] 102\n[1] 103\n[1] 104\n[1] 105\n[1] 106\n[1] 107\n[1] 108\n[1] 109\n[1] 110\n[1] 111\n[1] 112\n[1] 113\n[1] 114\n[1] 115\n[1] 116\n[1] 117\n[1] 118\n[1] 119\n[1] 120\n[1] 121\n[1] 122\n[1] 123\n[1] 124\n[1] 125\n[1] 126\n[1] 127\n[1] 128\n[1] 129\n[1] 130\n[1] 131\n[1] 132\n[1] 133\n[1] 134\n[1] 135\n[1] 136\n[1] 137\n[1] 138\n[1] 139\n[1] 140\n[1] 141\n[1] 142\n[1] 143\n[1] 144\n[1] 145\n[1] 146\n[1] 147\n[1] 148\n[1] 149\n[1] 150\n[1] 151\n[1] 152\n[1] 153\n[1] 154\n[1] 155\n[1] 156\n[1] 157\n[1] 158\n[1] 159\n[1] 160\n[1] 161\n[1] 162\n[1] 163\n[1] 164\n[1] 165\n[1] 166\n[1] 167\n[1] 168\n[1] 169\n[1] 170\n[1] 171\n[1] 172\n[1] 173\n[1] 174\n[1] 175\n[1] 176\n[1] 177\n[1] 178\n[1] 179\n[1] 180\n[1] 181\n[1] 182\n[1] 183\n[1] 184\n[1] 185\n[1] 186\n[1] 187\n[1] 188\n[1] 189\n[1] 190\n[1] 191\n[1] 192\n[1] 193\n[1] 194\n[1] 195\n[1] 196\n[1] 197\n[1] 198\n[1] 199\n[1] 200\n[1] 201\n[1] 202\n[1] 203\n[1] 204\n[1] 205\n[1] 206\n[1] 207\n[1] 208\n[1] 209\n[1] 210\n[1] 211\n[1] 212\n[1] 213\n[1] 214\n[1] 215\n[1] 216\n[1] 217\n[1] 218\n[1] 219\n[1] 220\n[1] 221\n[1] 222\n[1] 223\n[1] 224\n[1] 225\n[1] 226\n[1] 227\n[1] 228\n[1] 229\n[1] 230\n[1] 231\n[1] 232\n[1] 233\n[1] 234\n[1] 235\n[1] 236\n[1] 237\n[1] 238\n[1] 239\n[1] 240\n[1] 241\n[1] 242\n[1] 243\n[1] 244\n[1] 245\n[1] 246\n[1] 247\n\n\n[[1]]\n\n\n\n[[2]]\n\n\n\n[[3]]\n\n\n\n[[4]]\n\n\n\n[[5]]\n\n\n\n[[6]]\n\n\n\n[[7]]\n\n\n\n[[8]]\n\n\n\n[[9]]\n\n\n\n[[10]]\n\n\n\n[[11]]\n\n\n\n[[12]]\n\n\n\n[[13]]\n\n\n\n[[14]]\n\n\n\n[[15]]\n\n\n\n[[16]]\n\n\n\n[[17]]\n\n\n\n[[18]]\n\n\n\n[[19]]\n\n\n\n[[20]]\n\n\n\n[[21]]\n\n\n\n[[22]]\n\n\n\n[[23]]\n\n\n\n[[24]]\n\n\n\n[[25]]\n\n\n\n[[26]]\n\n\n\n[[27]]\n\n\n\n[[28]]\n\n\n\n[[29]]\n\n\n\n[[30]]\n\n\n\n[[31]]\n\n\n\n[[32]]\n\n\n\n[[33]]\n\n\n\n[[34]]\n\n\n\n[[35]]\n\n\n\n[[36]]\n\n\n\n[[37]]\n\n\n\n[[38]]\n\n\n\n[[39]]\n\n\n\n[[40]]\n\n\n\n[[41]]\n\n\n\n[[42]]\n\n\n\n[[43]]\n\n\n\n[[44]]\n\n\n\n[[45]]\n\n\n\n[[46]]\n\n\n\n[[47]]\n\n\n\n[[48]]\n\n\n\n[[49]]\n\n\n\n[[50]]\n\n\n\n[[51]]\n\n\n\n[[52]]\n\n\n\n[[53]]\n\n\n\n[[54]]\n\n\n\n[[55]]\n\n\n\n[[56]]\n\n\n\n[[57]]\n\n\n\n[[58]]\n\n\n\n[[59]]\n\n\n\n[[60]]\n\n\n\n[[61]]\n\n\n\n[[62]]\n\n\n\n[[63]]\n\n\n\n[[64]]\n\n\n\n[[65]]\n\n\n\n[[66]]\n\n\n\n[[67]]\n\n\n\n[[68]]\n\n\n\n[[69]]\n\n\n\n[[70]]\n\n\n\n[[71]]\n\n\n\n[[72]]\n\n\n\n[[73]]\n\n\n\n[[74]]\n\n\n\n[[75]]\n\n\n\n[[76]]\n\n\n\n[[77]]\n\n\n\n[[78]]\n\n\n\n[[79]]\n\n\n\n[[80]]\n\n\n\n[[81]]\n\n\n\n[[82]]\n\n\n\n[[83]]\n\n\n\n[[84]]\n\n\n\n[[85]]\n\n\n\n[[86]]\n\n\n\n[[87]]\n\n\n\n[[88]]\n\n\n\n[[89]]\n\n\n\n[[90]]\n\n\n\n[[91]]\n\n\n\n[[92]]\n\n\n\n[[93]]\n\n\n\n[[94]]\n\n\n\n[[95]]\n\n\n\n[[96]]\n\n\n\n[[97]]\n\n\n\n[[98]]\n\n\n\n[[99]]\n\n\n\n[[100]]\n\n\n\n[[101]]\n\n\n\n[[102]]\n\n\n\n[[103]]\n\n\n\n[[104]]\n\n\n\n[[105]]\n\n\n\n[[106]]\n\n\n\n[[107]]\n\n\n\n[[108]]\n\n\n\n[[109]]\n\n\n\n[[110]]\n\n\n\n[[111]]\n\n\n\n[[112]]\n\n\n\n[[113]]\n\n\n\n[[114]]\n\n\n\n[[115]]\n\n\n\n[[116]]\n\n\n\n[[117]]\n\n\n\n[[118]]\n\n\n\n[[119]]\n\n\n\n[[120]]\n\n\n\n[[121]]\n\n\n\n[[122]]\n\n\n\n[[123]]\n\n\n\n[[124]]\n\n\n\n[[125]]\n\n\n\n[[126]]\n\n\n\n[[127]]\n\n\n\n[[128]]\n\n\n\n[[129]]\n\n\n\n[[130]]\n\n\n\n[[131]]\n\n\n\n[[132]]\n\n\n\n[[133]]\n\n\n\n[[134]]\n\n\n\n[[135]]\n\n\n\n[[136]]\n\n\n\n[[137]]\n\n\n\n[[138]]\n\n\n\n[[139]]\n\n\n\n[[140]]\n\n\n\n[[141]]\n\n\n\n[[142]]\n\n\n\n[[143]]\n\n\n\n[[144]]\n\n\n\n[[145]]\n\n\n\n[[146]]\n\n\n\n[[147]]\n\n\n\n[[148]]\n\n\n\n[[149]]\n\n\n\n[[150]]\n\n\n\n[[151]]\n\n\n\n[[152]]\n\n\n\n[[153]]\n\n\n\n[[154]]\n\n\n\n[[155]]\n\n\n\n[[156]]\n\n\n\n[[157]]\n\n\n\n[[158]]\n\n\n\n[[159]]\n\n\n\n[[160]]\n\n\n\n[[161]]\n\n\n\n[[162]]\n\n\n\n[[163]]\n\n\n\n[[164]]\n\n\n\n[[165]]\n\n\n\n[[166]]\n\n\n\n[[167]]\n\n\n\n[[168]]\n\n\n\n[[169]]\n\n\n\n[[170]]\n\n\n\n[[171]]\n\n\n\n[[172]]\n\n\n\n[[173]]\n\n\n\n[[174]]\n\n\n\n[[175]]\n\n\n\n[[176]]\n\n\n\n[[177]]\n\n\n\n[[178]]\n\n\n\n[[179]]\n\n\n\n[[180]]\n\n\n\n[[181]]\n\n\n\n[[182]]\n\n\n\n[[183]]\n\n\n\n[[184]]\n\n\n\n[[185]]\n\n\n\n[[186]]\n\n\n\n[[187]]\n\n\n\n[[188]]\n\n\n\n[[189]]\n\n\n\n[[190]]\n\n\n\n[[191]]\n\n\n\n[[192]]\n\n\n\n[[193]]\n\n\n\n[[194]]\n\n\n\n[[195]]\n\n\n\n[[196]]\n\n\n\n[[197]]\n\n\n\n[[198]]\n\n\n\n[[199]]\n\n\n\n[[200]]\n\n\n\n[[201]]\n\n\n\n[[202]]\n\n\n\n[[203]]\n\n\n\n[[204]]\n\n\n\n[[205]]\n\n\n\n[[206]]\n\n\n\n[[207]]\n\n\n\n[[208]]\n\n\n\n[[209]]\n\n\n\n[[210]]\n\n\n\n[[211]]\n\n\n\n[[212]]\n\n\n\n[[213]]\n\n\n\n[[214]]\n\n\n\n[[215]]\n\n\n\n[[216]]\n\n\n\n[[217]]\n\n\n\n[[218]]\n\n\n\n[[219]]\n\n\n\n[[220]]\n\n\n\n[[221]]\n\n\n\n[[222]]\n\n\n\n[[223]]\n\n\n\n[[224]]\n\n\n\n[[225]]\n\n\n\n[[226]]\n\n\n\n[[227]]\n\n\n\n[[228]]\n\n\n\n[[229]]\n\n\n\n[[230]]\n\n\n\n[[231]]\n\n\n\n[[232]]\n\n\n\n[[233]]\n\n\n\n[[234]]\n\n\n\n[[235]]\n\n\n\n[[236]]\n\n\n\n[[237]]\n\n\n\n[[238]]\n\n\n\n[[239]]\n\n\n\n[[240]]\n\n\n\n[[241]]\n\n\n\n[[242]]\n\n\n\n[[243]]\n\n\n\n[[244]]\n\n\n\n[[245]]\n\n\n\n[[246]]\n\n\n\n[[247]]\n\n\n\n[[248]]\n\n\nquartz_off_screen \n                2"
  },
  {
    "objectID": "analysis/Figure2_plotNovelGenes.html#novel-gene-talong000088362",
    "href": "analysis/Figure2_plotNovelGenes.html#novel-gene-talong000088362",
    "title": "Figure 2 - Plot Novel Genes",
    "section": "Novel gene: TALONG000088362",
    "text": "Novel gene: TALONG000088362\n\nthis_gene = \"TALONG000088362\"   \nthese_exons <- gr.isoseq %>% dplyr::filter(annot_gene_name == this_gene & type == \"exon\")\nthis_cds <- gr.isoseq %>% dplyr::filter(annot_gene_name == this_gene & type == \"CDS\")\nthis.start = min(c(these_exons$start, these_exons$end)-5e4)\nthis.end = max(c(these_exons$start, these_exons$end)+5e4)\n\ngencode_exons =gr.gencode %>% dplyr::filter(type==\"exon\", seqnames==as.character(these_exons$seqnames[1]),start > this.start, end < this.end)\n\nFigS3F <- ggplot(these_exons, aes(xstart = start,xend = end, y = annot_transcript_name)) +\n  geom_range(aes(fill = log2(1+cpm), group=novelty2), height=.25) + \n  geom_range(data=this_cds, aes(fill = log2(1+cpm), group=novelty2)) + \n    geom_intron(\n        data = to_intron(these_exons, \"annot_transcript_name\"),\n        aes(strand = strand),arrow.min.intron.length = 5000,\n        arrow = grid::arrow(ends = \"last\", length = grid::unit(0.1, \"inches\")),\n        color='grey60',\n    ) +\n  xlim(this.start, this.end) + \n  geom_range(data=gencode_exons, fill='darkgrey', aes(xstart = start,xend = end, y=gene_name)) +\n  geom_intron(\n        data = to_intron(gencode_exons, \"transcript_name\"),\n        aes(strand = strand,y=gene_name),arrow.min.intron.length = 5000,\n        arrow = grid::arrow(ends = \"last\", length = grid::unit(0.1, \"inches\")),\n        color='grey60',\n    ) +\n  \n  facet_grid(source~.,scales = 'free', space = 'free') + ggtitle(this_gene, subtitle = paste0(these_exons$seqnames[1], \":\", this.start+5e4,\"-\", this.end-5e4)) + theme(legend.position = 'none') + labs(x=these_exons$seqnames[1], y=\"\")  +theme_bw() + scale_fill_gradient(low = 'darkgrey', high='red', limits=c(0,12)) + theme(legend.position = 'none')\nggsave(FigS3F, file='output/figures/supplement/FigS3F.pdf', height=4, width=6)"
  },
  {
    "objectID": "analysis/Figure3_IsoformSwitchAnalyzeR.html",
    "href": "analysis/Figure3_IsoformSwitchAnalyzeR.html",
    "title": "Figure 3 - IsoformSwitchAnalyzeR",
    "section": "",
    "text": "https://bioconductor.org/packages/3.14/bioc/vignettes/IsoformSwitchAnalyzeR/inst/doc/IsoformSwitchAnalyzeR.html"
  },
  {
    "objectID": "analysis/Figure3_IsoformSwitchAnalyzeR.html#build-switch-list",
    "href": "analysis/Figure3_IsoformSwitchAnalyzeR.html#build-switch-list",
    "title": "Figure 3 - IsoformSwitchAnalyzeR",
    "section": "Build switch list",
    "text": "Build switch list\n\nMake design\n\nmyDesign = tribble(\n  ~sampleID, ~condition, ~donor,\n  \"VZ_209\", \"VZ\", \"209\",\n  \"VZ_334\", \"VZ\", \"334\",\n  \"VZ_336\", \"VZ\", \"336\",\n  \"CP_209\", \"CP\", \"209\",\n  \"CP_334\", \"CP\", \"334\",\n  \"CP_336\", \"CP\", \"336\",\n) %>%\n  dplyr::mutate(\n    dplyr::across(c(condition, donor), as_factor)\n  )\n\n\n\nExtract Expresssion\n\ncts = read_table(\"data/cp_vz_0.75_min_7_recovery_talon_abundance_filtered.tsv.gz\")\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  .default = col_double(),\n  annot_gene_id = col_character(),\n  annot_transcript_id = col_character(),\n  annot_gene_name = col_character(),\n  annot_transcript_name = col_character(),\n  gene_novelty = col_character(),\n  transcript_novelty = col_character(),\n  ISM_subtype = col_character()\n)\nℹ Use `spec()` for the full column specifications.\n\ncts = cts %>%\n  mutate(\n    VZ_209 = rowSums(across(matches(\"209_.*_VZ\"))),\n    VZ_334 = rowSums(across(matches(\"334_.*_VZ\"))),\n    VZ_336 = rowSums(across(matches(\"336_.*_VZ\"))),\n    CP_209 = rowSums(across(matches(\"209_.*_CP\"))),\n    CP_334 = rowSums(across(matches(\"334_.*_CP\"))),\n    CP_336 = rowSums(across(matches(\"336_.*_CP\"))),\n    .keep = \"unused\"\n  ) %>%\n  dplyr::select(!c(\"gene_ID\", \"transcript_ID\", \"annot_transcript_name\")) %>%\n  dplyr::rename(\n    gene_id = \"annot_gene_id\",\n    transcript_id = \"annot_transcript_id\",\n    gene_name = \"annot_gene_name\"\n  ) %>%\n  mutate(\n    gene_novelty = as.factor(gene_novelty),\n    transcript_novelty = as.factor(transcript_novelty),\n    ISM_subtype = ISM_subtype %>% na_if(\"None\") %>% as.factor()\n  )\ntalonExpression = cts %>%\n  dplyr::select(transcript_id, starts_with(c(\"VZ\", \"CP\"))) %>%\n  dplyr::rename(isoform_id = \"transcript_id\")\ntalonExpression\n\n# A tibble: 214,516 × 7\n   isoform_id          VZ_209 VZ_334 VZ_336 CP_209 CP_334 CP_336\n   <chr>                <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 ENST00000494149.2_2      0      0      2      0      0      0\n 2 ENST00000424587.2        0      0      0      0      0      2\n 3 ENST00000445840.1        1      1      0      0      0      0\n 4 ENST00000457540.1_1      0      1      1      0      0      0\n 5 ENST00000414273.1_1      0      0      1      0      0      0\n 6 ENST00000655765.1_2      0      2      0      2      1      2\n 7 ENST00000457084.1_2      0      2      0      0      0      0\n 8 ENST00000591702.1_2      1      0      2      2      0      0\n 9 ENST00000644482.1_1      3      0      0      0      0      0\n10 ENST00000445118.7_3      1      0      0      8      0      0\n# … with 214,506 more rows\n\n\n\n\nCreate pre-filtered switchAnalyzeRlist\nIsoformSwitchAnalyzeR will make assumptions based on whether file extension is .gtf(.gz) or .gff(.gz)… was necessary to symlink _corrected.gtf.cds.gff.\n\nrdata_path  = \"data/working/talonSwitchList_preFilter.rds\"\nif(!file.exists(rdata_path)) { \n  talonSwitchList <- importRdata(\n      isoformCountMatrix   = talonExpression,\n      designMatrix         = myDesign,\n      isoformExonAnnoation = 'data/cp_vz_0.75_min_7_recovery_talon.gtf.gz',\n      isoformNtFasta       = 'data/sqanti/cp_vz_0.75_min_7_recovery_talon_corrected.fasta.gz',\n      addAnnotatedORFs     = FALSE,\n      fixStringTieAnnotationProblem = FALSE # otherwise will mess up gene_ids\n  )\n  talonSwitchList <- addORFfromGTF(\n    switchAnalyzeRlist     = talonSwitchList,\n    pathToGTF              = 'data/sqanti/cp_vz_0.75_min_7_recovery_talon_corrected.gtf.cds.gtf.gz'\n  )\n  talonSwitchList <- preFilter(\n    switchAnalyzeRlist         = talonSwitchList,\n    geneExpressionCutoff       = 1,     # default\n    isoformExpressionCutoff    = 0,     # default\n    IFcutoff                   = 0.01,  # default\n    removeSingleIsoformGenes   = TRUE,  # default\n    reduceToSwitchingGenes     = FALSE, # default (we didn't run DEXSeq yet)\n    keepIsoformInAllConditions = TRUE   # we only have 2 conditions so doesn't matter\n  )\n  saveRDS(talonSwitchList, file = rdata_path)\n} else {\n  talonSwitchList = readRDS(rdata_path)\n}\nsummary(talonSwitchList)\n\nThis switchAnalyzeRlist list contains:\n 102319 isoforms from 10809 genes\n 1 comparison from 2 conditions (in total 6 samples)\n\nFeature analyzed:\n[1] \"ntSequence, ORFs\"\n\n\n\nswitchPlot(\n  talonSwitchList,\n  gene='KMT2E'\n)\n\nWarning in switchPlot(talonSwitchList, gene = \"KMT2E\"): We recomend running the\nisoform switching analysis before doing the transcript plot. See\n?detectIsoformSwitching for more details"
  },
  {
    "objectID": "analysis/Figure3_IsoformSwitchAnalyzeR.html#run-deseq2",
    "href": "analysis/Figure3_IsoformSwitchAnalyzeR.html#run-deseq2",
    "title": "Figure 3 - IsoformSwitchAnalyzeR",
    "section": "Run DESeq2",
    "text": "Run DESeq2\n\nDTE\n\ncts_preFilter = talonExpression %>% filter(isoform_id %in% talonSwitchList$isoformFeatures$isoform_id)\ncts_preFilter\n\n# A tibble: 102,319 × 7\n   isoform_id           VZ_209 VZ_334 VZ_336 CP_209 CP_334 CP_336\n   <chr>                 <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 ENST00000669922.1_2       4     10      4      6      9     10\n 2 ENST00000659124.1_2       4      0      0      9      0      0\n 3 ENST00000441765.6_3       1      0      0      0      1      0\n 4 ENST00000668541.1_2       0      0      0      5      1      5\n 5 ENST00000327044.7_3     283    672    708    804    820    665\n 6 ENST00000428771.6_3       0      1      0      0      2      0\n 7 ENST00000304952.10_3      0     25     41      3      5     16\n 8 ENST00000481869.1_2       0      6      4      2      2      6\n 9 ENST00000484667.2_2       0      4      5      0      0      9\n10 ENST00000379370.7_2       4     12      7      9     34      8\n# … with 102,309 more rows\n\n\n\ndds = DESeqDataSetFromMatrix(\n  as.data.frame(cts_preFilter),\n  as.data.frame(myDesign),\n  ~ donor + condition,\n  tidy = T\n)\n\nconverting counts to integer mode\n\n\n\n# takes 30sec\nsystem.time({\n  dds  = DESeq(dds)\n})\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\n   user  system elapsed \n 12.054   0.378  12.886 \n\nDTE_results = DESeq2::results(dds)\nDTE_results\n\nlog2 fold change (MLE): condition CP vs VZ \nWald test p-value: condition CP vs VZ \nDataFrame with 102319 rows and 6 columns\n                      baseMean log2FoldChange     lfcSE       stat    pvalue\n                     <numeric>      <numeric> <numeric>  <numeric> <numeric>\nENST00000669922.1_2   6.794078      0.3497446  0.926990  0.3772904 0.7059578\nENST00000659124.1_2   2.340796      0.1825893  1.972493  0.0925678 0.9262469\nENST00000441765.6_3   0.406806     -0.0633991  4.033013 -0.0157200 0.9874577\nENST00000668541.1_2   1.695927      3.8310438  2.135802  1.7937258 0.0728569\nENST00000327044.7_3 615.853668      0.3351470  0.261315  1.2825405 0.1996531\n...                        ...            ...       ...        ...       ...\nTALONT003163865        1.27255        2.91192   2.53106   1.150474  0.249949\nTALONT003172883        1.32847        2.46363   2.50056   0.985233  0.324510\nTALONT003175107        1.61344        3.01946   2.33696   1.292045  0.196342\nTALONT003196342        1.10300        2.77499   2.66225   1.042347  0.297251\nTALONT003225592        1.41593        1.80728   2.62236   0.689179  0.490711\n                         padj\n                    <numeric>\nENST00000669922.1_2  0.925055\nENST00000659124.1_2        NA\nENST00000441765.6_3        NA\nENST00000668541.1_2        NA\nENST00000327044.7_3  0.570881\n...                       ...\nTALONT003163865            NA\nTALONT003172883            NA\nTALONT003175107            NA\nTALONT003196342            NA\nTALONT003225592            NA\n\n\n\nDTE_results = DTE_results %>%\n  as_tibble(rownames = \"isoform_id\") %>%\n  mutate(padj = replace_na(padj, 1))\n\n\n\nDGE\nMike note – lets calculate DGE for all genes (expressed) not just those in talonSwitchList_part1, which filters out genes with only 1 isoform, etc Should be ~25k\n\ncts_gene = read_table(\"data/cp_vz_talon_abundance.tsv.gz\") %>%\n  mutate(\n    VZ_209 = rowSums(across(matches(\"209_.*_VZ\"))),\n    VZ_334 = rowSums(across(matches(\"334_.*_VZ\"))),\n    VZ_336 = rowSums(across(matches(\"336_.*_VZ\"))),\n    CP_209 = rowSums(across(matches(\"209_.*_CP\"))),\n    CP_334 = rowSums(across(matches(\"334_.*_CP\"))),\n    CP_336 = rowSums(across(matches(\"336_.*_CP\"))),\n    .keep = \"unused\"\n  ) %>%\n  group_by(annot_gene_id, annot_gene_name, gene_novelty) %>%\n  summarize(across(starts_with(c(\"VZ\", \"CP\")), sum), .groups = \"drop\") %>%\n  dplyr::rename(\n    gene_id = \"annot_gene_id\",\n    gene_name = \"annot_gene_name\"\n  ) %>%\n  mutate(gene_novelty = as.factor(gene_novelty))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  .default = col_double(),\n  annot_gene_id = col_character(),\n  annot_transcript_id = col_character(),\n  annot_gene_name = col_character(),\n  annot_transcript_name = col_character(),\n  gene_novelty = col_character(),\n  transcript_novelty = col_character(),\n  ISM_subtype = col_character()\n)\nℹ Use `spec()` for the full column specifications.\n\ncts_gene_preFilter = cts_gene %>%\n  filter(gene_id %in% unique(cts$gene_id)) %>% # Filtering for those with at least one detected isoform\n  dplyr::select(gene_id, starts_with(c(\"VZ\", \"CP\")))\ncts_gene_preFilter\n\n# A tibble: 24,554 × 7\n   gene_id              VZ_209 VZ_334 VZ_336 CP_209 CP_334 CP_336\n   <chr>                 <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 ENSG00000000003.15_4    443    993    812    335    483    305\n 2 ENSG00000000419.12_5     30    119    108    388    123    311\n 3 ENSG00000000457.14_6    149    300    222    192    149    148\n 4 ENSG00000000460.17_6    103    423    275     99    132     76\n 5 ENSG00000000938.13_5      0      3     10     14      4     11\n 6 ENSG00000000971.16_3     13     17     23     21     26      9\n 7 ENSG00000001036.14_4    206    243    415    163    105    205\n 8 ENSG00000001084.13_9     49     73     51     54     65     44\n 9 ENSG00000001167.14_3    184    401    249    436    525    286\n10 ENSG00000001460.18_6      5      9     15     44     21     42\n# … with 24,544 more rows\n\n\n\ndds_gene = DESeqDataSetFromMatrix(\n  as.data.frame(cts_gene_preFilter),\n  as.data.frame(myDesign),\n  ~ donor + condition,\n  tidy = T\n)\n\nconverting counts to integer mode\n\n\n\n# takes 10sec\nsystem.time({\n  dds_gene  = DESeq(dds_gene)\n})\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\n   user  system elapsed \n  3.582   0.118   3.735 \n\nDGE_results = DESeq2::results(dds_gene)\nDGE_results\n\nlog2 fold change (MLE): condition CP vs VZ \nWald test p-value: condition CP vs VZ \nDataFrame with 24554 rows and 6 columns\n                      baseMean log2FoldChange     lfcSE      stat      pvalue\n                     <numeric>      <numeric> <numeric> <numeric>   <numeric>\nENSG00000000003.15_4 547.45338      -1.127697  0.224974  -5.01257 5.37067e-07\nENSG00000000419.12_5 168.65442       1.554264  0.394700   3.93784 8.22188e-05\nENSG00000000457.14_6 189.49516      -0.588598  0.272137  -2.16287 3.05513e-02\nENSG00000000460.17_6 172.14571      -1.381243  0.295422  -4.67548 2.93261e-06\nENSG00000000938.13_5   6.44186       1.487234  1.237223   1.20207 2.29335e-01\n...                        ...            ...       ...       ...         ...\nTALONG000171040        7.30690        6.13371   1.58942   3.85908 0.000113814\nTALONG000171269        1.51623        3.77994   2.59371   1.45735 0.145019484\nTALONG000180651        3.39053        4.85165   1.95562   2.48088 0.013106017\nTALONG000182469        2.31534        4.58042   2.20513   2.07717 0.037785814\nTALONG000183977        1.57984        3.87094   2.55344   1.51597 0.129526613\n                            padj\n                       <numeric>\nENSG00000000003.15_4 6.36749e-06\nENSG00000000419.12_5 6.41440e-04\nENSG00000000457.14_6 1.04347e-01\nENSG00000000460.17_6 3.06182e-05\nENSG00000000938.13_5 4.59846e-01\n...                          ...\nTALONG000171040      0.000856288\nTALONG000171269               NA\nTALONG000180651      0.053168102\nTALONG000182469      0.123652258\nTALONG000183977               NA\n\n\n\nDGE_results = DGE_results %>%\n  as_tibble(rownames = \"gene_id\") %>%\n  mutate(padj = replace_na(padj, 1))"
  },
  {
    "objectID": "analysis/Figure3_IsoformSwitchAnalyzeR.html#switch-analysis-part-1",
    "href": "analysis/Figure3_IsoformSwitchAnalyzeR.html#switch-analysis-part-1",
    "title": "Figure 3 - IsoformSwitchAnalyzeR",
    "section": "Switch analysis part 1",
    "text": "Switch analysis part 1\n\nrdata_path  = \"data/working/talonSwitchList_part1.rds\"\nif (!file.exists(rdata_path)) {\n  ### DEXSeq DTU - takes 15min\n  talonSwitchList_part1 <- isoformSwitchTestDEXSeq(\n    switchAnalyzeRlist         = talonSwitchList,\n    reduceToSwitchingGenes     = FALSE\n  )\n\n  ### Add DTE/DGE to switchList\n  idx = match(talonSwitchList_part1$isoformFeatures$isoform_id, DTE_results$isoform_id)\n  talonSwitchList_part1$isoformFeatures$iso_q_value = DTE_results$padj[idx]\n\n  idx = match(talonSwitchList_part1$isoformFeatures$gene_id, DGE_results$gene_id)\n  talonSwitchList_part1$isoformFeatures$gene_q_value = DGE_results$padj[idx]\n  \n  ### Extract AA sequences\n  talonSwitchList_part1$aaSequence = NULL\n  isoformFeatures_part1 = talonSwitchList_part1$isoformFeatures\n  talonSwitchList_part1$isoformFeatures = isoformFeatures_part1 %>%\n    as_tibble() %>%\n    group_by(gene_id) %>%\n    mutate(\n      isoform_switch_q_value = if_else(any(\n        # our actual filtering criteria - genes with DTU, DTE, or DGE\n        (isoform_switch_q_value < 0.05 & dIF > 0.1) | iso_q_value < 0.05 | gene_q_value < 0.05\n      ), 0, 1),\n      dIF = 1\n    ) %>%\n    ungroup() %>%\n    as.data.frame()\n  talonSwitchList_part1 <- extractSequence(\n    switchAnalyzeRlist = talonSwitchList_part1,\n    pathToOutput       = \"data/working/IsoformSwitchAnalyzeR/\",\n    extractNTseq       = TRUE,\n    extractAAseq       = TRUE,\n    removeShortAAseq   = TRUE,\n    removeLongAAseq    = FALSE,\n    onlySwitchingGenes = TRUE\n  )\n  talonSwitchList_part1$isoformFeatures = isoformFeatures_part1\n  \n  ### Save to file\n  saveRDS(talonSwitchList_part1, file = rdata_path)\n} else {\n  talonSwitchList_part1 = readRDS(rdata_path)\n}\nsummary(talonSwitchList_part1)\n\nThis switchAnalyzeRlist list contains:\n 102319 isoforms from 10809 genes\n 1 comparison from 2 conditions (in total 6 samples)\n\nSwitching features:\n  Comparison Isoforms Switches Genes\n1   VZ vs CP     1860     1073  1237\n\nFeature analyzed:\n[1] \"Isoform Switch Identification, ntSequence, ORFs, aaSequence\"\n\n\nWARNING: extractSequence() silently caches its result in switchList$aaSequence. If this object exists, extractSequence() will return the same result, no matter if you adjust alpha, dIFcutoff, or even re-run isoformSwitchTestDEXSeq().\nWhat are the exact isoforms extractSequence() will return sequences for? (Slightly fewer if removeShortAAseq = TRUE)\n\norf_isoforms = talonSwitchList_part1$orfAnalysis %>% as_tibble() %>%\n  drop_na(orfTransciptStart) %>%\n  pull(isoform_id)\ntalonSwitchList_part1$isoformFeatures %>% as_tibble() %>%\n  group_by(gene_id) %>% filter(any(isoform_switch_q_value < 0.05 & abs(dIF) > 0.1)) %>% ungroup() %>%\n  filter(isoform_id %in% orf_isoforms)\n\n# A tibble: 12,026 × 30\n   iso_ref       gene_…¹ isofo…² gene_id condi…³ condi…⁴ gene_…⁵ gene_…⁶ iso_b…⁷\n   <chr>         <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 isoComp_0000… geneCo… ENST00… ENSG00… VZ      CP      TSPAN6  protei… protei…\n 2 isoComp_0000… geneCo… TALONT… ENSG00… VZ      CP      TSPAN6  protei… <NA>   \n 3 isoComp_0000… geneCo… TALONT… ENSG00… VZ      CP      TSPAN6  protei… <NA>   \n 4 isoComp_0000… geneCo… TALONT… ENSG00… VZ      CP      TSPAN6  protei… <NA>   \n 5 isoComp_0000… geneCo… TALONT… ENSG00… VZ      CP      TSPAN6  protei… <NA>   \n 6 isoComp_0000… geneCo… TALONT… ENSG00… VZ      CP      TSPAN6  protei… <NA>   \n 7 isoComp_0000… geneCo… TALONT… ENSG00… VZ      CP      TSPAN6  protei… <NA>   \n 8 isoComp_0000… geneCo… ENST00… ENSG00… VZ      CP      C1orf1… protei… protei…\n 9 isoComp_0000… geneCo… ENST00… ENSG00… VZ      CP      C1orf1… protei… protei…\n10 isoComp_0000… geneCo… ENST00… ENSG00… VZ      CP      C1orf1… protei… protei…\n# … with 12,016 more rows, 21 more variables: gene_overall_mean <dbl>,\n#   gene_value_1 <dbl>, gene_value_2 <dbl>, gene_stderr_1 <dbl>,\n#   gene_stderr_2 <dbl>, gene_log2_fold_change <dbl>, gene_q_value <dbl>,\n#   iso_overall_mean <dbl>, iso_value_1 <dbl>, iso_value_2 <dbl>,\n#   iso_stderr_1 <dbl>, iso_stderr_2 <dbl>, iso_log2_fold_change <dbl>,\n#   iso_q_value <dbl>, IF_overall <dbl>, IF1 <dbl>, IF2 <dbl>, dIF <dbl>,\n#   isoform_switch_q_value <dbl>, gene_switch_q_value <dbl>, PTC <lgl>, and …"
  },
  {
    "objectID": "analysis/Figure3_IsoformSwitchAnalyzeR.html#table-s3",
    "href": "analysis/Figure3_IsoformSwitchAnalyzeR.html#table-s3",
    "title": "Figure 3 - IsoformSwitchAnalyzeR",
    "section": "Table S3",
    "text": "Table S3\n\nWhat genes does IsoformSwitchAnalyzeR think are significant?\n\nextractTopSwitches(\n  talonSwitchList_part1, filterForConsequences = FALSE, n=Inf\n) %>%  as_tibble()\n\n# A tibble: 1,237 × 7\n   gene_ref          gene_id             gene_…¹ condi…² condi…³ gene_sw…⁴  Rank\n   <chr>             <chr>               <chr>   <chr>   <chr>       <dbl> <int>\n 1 geneComp_00001085 ENSG00000073584.20… SMARCE1 VZ      CP      1.03e-211     1\n 2 geneComp_00000969 ENSG00000070087.14… PFN2    VZ      CP      6.32e-118     2\n 3 geneComp_00008384 ENSG00000155849.15… ELMO1   VZ      CP      3.74e-116     3\n 4 geneComp_00000525 ENSG00000044115.21… CTNNA1  VZ      CP      3.84e-103     4\n 5 geneComp_00005804 ENSG00000133884.10… DPF2    VZ      CP      4.94e- 95     5\n 6 geneComp_00020536 ENSG00000263001.6_6 GTF2I   VZ      CP      9.35e- 94     6\n 7 geneComp_00001542 ENSG00000087274.17… ADD1    VZ      CP      2.19e- 85     7\n 8 geneComp_00003418 ENSG00000111667.13… USP5    VZ      CP      6.38e- 83     8\n 9 geneComp_00004817 ENSG00000124783.14… SSR1    VZ      CP      2.45e- 80     9\n10 geneComp_00000441 ENSG00000033627.16… ATP6V0… VZ      CP      4.61e- 74    10\n# … with 1,227 more rows, and abbreviated variable names ¹​gene_name,\n#   ²​condition_1, ³​condition_2, ⁴​gene_switch_q_value\n\n\n\ntalonSwitchList_part1$isoformFeatures %>% as_tibble() %>%\n  group_by(gene_ref, gene_id, gene_name, condition_1, condition_2, gene_switch_q_value) %>%\n  filter(any(isoform_switch_q_value < 0.05 & abs(dIF) > 0.1)) %>%\n  summarize() %>%\n  arrange(gene_switch_q_value)\n\n`summarise()` has grouped output by 'gene_ref', 'gene_id', 'gene_name',\n'condition_1', 'condition_2'. You can override using the `.groups` argument.\n\n\n# A tibble: 1,237 × 6\n# Groups:   gene_ref, gene_id, gene_name, condition_1, condition_2 [1,237]\n   gene_ref          gene_id              gene_name conditio…¹ condi…² gene_sw…³\n   <chr>             <chr>                <chr>     <chr>      <chr>       <dbl>\n 1 geneComp_00001085 ENSG00000073584.20_8 SMARCE1   VZ         CP      1.03e-211\n 2 geneComp_00000969 ENSG00000070087.14_5 PFN2      VZ         CP      6.32e-118\n 3 geneComp_00008384 ENSG00000155849.15_4 ELMO1     VZ         CP      3.74e-116\n 4 geneComp_00000525 ENSG00000044115.21_7 CTNNA1    VZ         CP      3.84e-103\n 5 geneComp_00005804 ENSG00000133884.10_4 DPF2      VZ         CP      4.94e- 95\n 6 geneComp_00020536 ENSG00000263001.6_6  GTF2I     VZ         CP      9.35e- 94\n 7 geneComp_00001542 ENSG00000087274.17_6 ADD1      VZ         CP      2.19e- 85\n 8 geneComp_00003418 ENSG00000111667.13_4 USP5      VZ         CP      6.38e- 83\n 9 geneComp_00004817 ENSG00000124783.14_6 SSR1      VZ         CP      2.45e- 80\n10 geneComp_00000441 ENSG00000033627.16_4 ATP6V0A1  VZ         CP      4.61e- 74\n# … with 1,227 more rows, and abbreviated variable names ¹​condition_1,\n#   ²​condition_2, ³​gene_switch_q_value\n\n\n\n\nWhat transcripts does IsoformSwitchAnalyzeR think are significant?\n\nextractTopSwitches(\n  talonSwitchList_part1, extractGenes = FALSE, filterForConsequences = FALSE, n=Inf\n) %>%  as_tibble()\n\nWarning in .fun(piece, ...): Less than n genes genes with significant switches\nwere found. Returning those.\n\n\n# A tibble: 1,860 × 12\n   iso_ref    gene_…¹ isofo…² gene_id gene_…³ condi…⁴ condi…⁵   IF1   IF2    dIF\n   <chr>      <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <dbl> <dbl>  <dbl>\n 1 isoComp_0… geneCo… ENST00… ENSG00… SMARCE1 VZ      CP      0.57  0.164 -0.405\n 2 isoComp_0… geneCo… ENST00… ENSG00… PFN2    VZ      CP      0.25  0.021 -0.228\n 3 isoComp_0… geneCo… ENST00… ENSG00… ELMO1   VZ      CP      0.404 0.024 -0.38 \n 4 isoComp_0… geneCo… ENST00… ENSG00… CTNNA1  VZ      CP      0.541 0.129 -0.413\n 5 isoComp_0… geneCo… ENST00… ENSG00… DPF2    VZ      CP      0.082 0.553  0.47 \n 6 isoComp_0… geneCo… ENST00… ENSG00… GTF2I   VZ      CP      0.128 0.017 -0.111\n 7 isoComp_0… geneCo… TALONT… ENSG00… ADD1    VZ      CP      0.31  0.059 -0.251\n 8 isoComp_0… geneCo… ENST00… ENSG00… CTNNA1  VZ      CP      0.124 0.32   0.197\n 9 isoComp_0… geneCo… ENST00… ENSG00… USP5    VZ      CP      0.314 0.693  0.379\n10 isoComp_0… geneCo… ENST00… ENSG00… USP5    VZ      CP      0.561 0.185 -0.376\n# … with 1,850 more rows, 2 more variables: isoform_switch_q_value <dbl>,\n#   Rank <int>, and abbreviated variable names ¹​gene_ref, ²​isoform_id,\n#   ³​gene_name, ⁴​condition_1, ⁵​condition_2\n\n\n\ntalonSwitchList_part1$isoformFeatures %>% as_tibble() %>%\n  filter(isoform_switch_q_value < 0.05 & abs(dIF) > 0.1) %>%\n  dplyr::select(iso_ref, gene_ref, isoform_id, gene_id, gene_name, condition_1, condition_2, IF1, IF2, dIF, isoform_switch_q_value) %>%\n  arrange(isoform_switch_q_value)\n\n# A tibble: 1,860 × 11\n   iso_ref  gene_…¹ isofo…² gene_id gene_…³ condi…⁴ condi…⁵    IF1    IF2    dIF\n   <chr>    <chr>   <chr>   <chr>   <chr>   <chr>   <chr>    <dbl>  <dbl>  <dbl>\n 1 isoComp… geneCo… ENST00… ENSG00… SMARCE1 VZ      CP      0.570  0.164  -0.405\n 2 isoComp… geneCo… ENST00… ENSG00… PFN2    VZ      CP      0.250  0.0213 -0.228\n 3 isoComp… geneCo… ENST00… ENSG00… ELMO1   VZ      CP      0.404  0.0237 -0.380\n 4 isoComp… geneCo… ENST00… ENSG00… CTNNA1  VZ      CP      0.541  0.129  -0.413\n 5 isoComp… geneCo… ENST00… ENSG00… DPF2    VZ      CP      0.0823 0.553   0.470\n 6 isoComp… geneCo… ENST00… ENSG00… GTF2I   VZ      CP      0.128  0.0167 -0.111\n 7 isoComp… geneCo… TALONT… ENSG00… ADD1    VZ      CP      0.310  0.059  -0.251\n 8 isoComp… geneCo… ENST00… ENSG00… CTNNA1  VZ      CP      0.124  0.320   0.197\n 9 isoComp… geneCo… ENST00… ENSG00… USP5    VZ      CP      0.314  0.693   0.379\n10 isoComp… geneCo… ENST00… ENSG00… USP5    VZ      CP      0.561  0.185  -0.376\n# … with 1,850 more rows, 1 more variable: isoform_switch_q_value <dbl>, and\n#   abbreviated variable names ¹​gene_ref, ²​isoform_id, ³​gene_name,\n#   ⁴​condition_1, ⁵​condition_2\n\n\n\n\nCreate our Table S3\nNote: isoformSwitchAnalyzer uses both q-value (<.05) and effect size cutoff |dIF>.1| for DTU calling. Lets remove the dIF effect size cutoff here so that we can directly compare DGE, DTE, and DTU genes in the Venn Diagram below\n\ntableS3 = talonSwitchList_part1$isoformFeatures %>%\n  as_tibble() %>%\n  dplyr::select(isoform_id, gene_id, gene_name, condition_1, condition_2) %>%\n  left_join(\n    talonSwitchList_part1$isoformSwitchAnalysis %>% dplyr::select(isoform_id, dIF, pvalue, padj)\n  ) %>%\n  dplyr::rename(\n    DTU_dIF    = \"dIF\",\n    DTU_pval   = \"pvalue\",\n    DTU_qval   = \"padj\"\n  ) %>%\n  mutate(\n    DTU = DTU_qval < 0.05 # & abs(DTU_dIF) > 0.1\n  ) %>%\n  left_join(\n    DTE_results %>% dplyr::select(isoform_id, log2FoldChange, pvalue, padj)\n  ) %>%\n  dplyr::rename(\n    DTE_log2FC = \"log2FoldChange\",\n    DTE_pval   = \"pvalue\",\n    DTE_qval   = \"padj\"\n  ) %>%\n  mutate(\n    DTE = DTE_qval < 0.05\n  ) %>%\n  left_join(\n    DGE_results %>% dplyr::select(gene_id, log2FoldChange, pvalue, padj)\n  ) %>%\n  dplyr::rename(\n    DGE_log2FC = \"log2FoldChange\",\n    DGE_pval   = \"pvalue\",\n    DGE_qval   = \"padj\"\n  ) %>%\n  mutate(\n    DGE = DGE_qval < 0.05\n  )\n\nJoining with `by = join_by(isoform_id)`\nJoining with `by = join_by(isoform_id)`\nJoining with `by = join_by(gene_id)`\n\ntableS3\n\n# A tibble: 102,319 × 17\n   isoform_id   gene_id gene_…¹ condi…² condi…³  DTU_dIF DTU_pval DTU_qval DTU  \n   <chr>        <chr>   <chr>   <chr>   <chr>      <dbl>    <dbl>    <dbl> <lgl>\n 1 ENST0000037… ENSG00… TSPAN6  VZ      CP      -0.347   4.89e-14 9.84e-12 TRUE \n 2 TALONT00074… ENSG00… TSPAN6  VZ      CP       0.140   1.42e- 8 1.23e- 6 TRUE \n 3 TALONT00074… ENSG00… TSPAN6  VZ      CP       0.196   1.36e- 6 7.89e- 5 TRUE \n 4 TALONT00074… ENSG00… TSPAN6  VZ      CP       0.00667 6.29e- 1 9.24e- 1 FALSE\n 5 TALONT00074… ENSG00… TSPAN6  VZ      CP      -0.00633 4.95e- 1 8.74e- 1 FALSE\n 6 TALONT00074… ENSG00… TSPAN6  VZ      CP      -0.00867 1.89e- 1 6.47e- 1 FALSE\n 7 TALONT00074… ENSG00… TSPAN6  VZ      CP       0.017   1.48e- 3 3.08e- 2 TRUE \n 8 ENST0000037… ENSG00… DPM1    VZ      CP      -0.0317  8.43e- 1 9.76e- 1 FALSE\n 9 ENST0000037… ENSG00… DPM1    VZ      CP      -0.0273  2.34e- 1 7.00e- 1 FALSE\n10 ENST0000037… ENSG00… DPM1    VZ      CP       0.0993  1.48e- 1 5.89e- 1 FALSE\n# … with 102,309 more rows, 8 more variables: DTE_log2FC <dbl>, DTE_pval <dbl>,\n#   DTE_qval <dbl>, DTE <lgl>, DGE_log2FC <dbl>, DGE_pval <dbl>,\n#   DGE_qval <dbl>, DGE <lgl>, and abbreviated variable names ¹​gene_name,\n#   ²​condition_1, ³​condition_2\n\n\n\ntableS3 %>% write_tsv(\"output/tables/TableS3_v3.tsv.gz\")\n\ntableS3b_geneLevel = tableS3 %>%\n  group_by(gene_name, gene_id) %>%\n  summarize(\n    DTU = any(DTU), DTE = any(DTE), DGE = any(DGE),\n    DTU_qval_min = min(DTU_qval), DTU_pval_min = min(DTU_pval),\n    DTE_qval_min = min(DTE_qval), DTE_pval_min = min(DTE_pval),\n    DGE_pval = min(DGE_pval), DGE_qval = min(DGE_qval)\n  )\n\n`summarise()` has grouped output by 'gene_name'. You can override using the\n`.groups` argument.\n\ntableS3b_geneLevel %>% write_tsv(\"output/tables/TableS3b_geneLevel.tsv.gz\")\n\nNote: log2fc in switchlist are based on the calculated RPKM values, not raw counts, so they don’t agree with DESEq2 log2fc columns.\nSanity check: The isoform_switch_q_value column in switchList\\(isoformFeatures comes from the padj column in switchList\\)isoformSwitchAnalysis (which is the DEXSeq results). gene_switch_q_value is just the minimum padj of any isoform for that gene.\n\nleft_join(\n  talonSwitchList_part1$isoformFeatures %>% as_tibble(),\n  talonSwitchList_part1$isoformSwitchAnalysis %>% as_tibble(),\n  by = \"isoform_id\"\n) %>%\n  filter(isoform_switch_q_value != padj)\n\n# A tibble: 0 × 39\n# … with 39 variables: iso_ref.x <chr>, gene_ref.x <chr>, isoform_id <chr>,\n#   gene_id <chr>, condition_1.x <chr>, condition_2.x <chr>, gene_name <chr>,\n#   gene_biotype <chr>, iso_biotype <chr>, gene_overall_mean <dbl>,\n#   gene_value_1 <dbl>, gene_value_2 <dbl>, gene_stderr_1 <dbl>,\n#   gene_stderr_2 <dbl>, gene_log2_fold_change <dbl>, gene_q_value <dbl>,\n#   iso_overall_mean <dbl>, iso_value_1 <dbl>, iso_value_2 <dbl>,\n#   iso_stderr_1 <dbl>, iso_stderr_2 <dbl>, iso_log2_fold_change <dbl>, …\n\nleft_join(\n  talonSwitchList_part1$isoformFeatures %>% as_tibble(),\n  talonSwitchList_part1$isoformSwitchAnalysis %>% as_tibble(),\n  by = \"isoform_id\"\n) %>%\n  group_by(gene_id) %>%\n  filter(gene_switch_q_value != min(padj))\n\n# A tibble: 0 × 39\n# Groups:   gene_id [0]\n# … with 39 variables: iso_ref.x <chr>, gene_ref.x <chr>, isoform_id <chr>,\n#   gene_id <chr>, condition_1.x <chr>, condition_2.x <chr>, gene_name <chr>,\n#   gene_biotype <chr>, iso_biotype <chr>, gene_overall_mean <dbl>,\n#   gene_value_1 <dbl>, gene_value_2 <dbl>, gene_stderr_1 <dbl>,\n#   gene_stderr_2 <dbl>, gene_log2_fold_change <dbl>, gene_q_value <dbl>,\n#   iso_overall_mean <dbl>, iso_value_1 <dbl>, iso_value_2 <dbl>,\n#   iso_stderr_1 <dbl>, iso_stderr_2 <dbl>, iso_log2_fold_change <dbl>, …"
  },
  {
    "objectID": "analysis/Figure3_IsoformSwitchAnalyzeR.html#fig3",
    "href": "analysis/Figure3_IsoformSwitchAnalyzeR.html#fig3",
    "title": "Figure 3 - IsoformSwitchAnalyzeR",
    "section": "Fig3",
    "text": "Fig3\n\nFig3a: Volcano Plots\n\ncts$novelty2 = as.character(cts$transcript_novelty)\ncts$novelty2[which(cts$novelty2==\"ISM\" & cts$ISM_subtype==\"Prefix\")] = \"ISM_Prefix\"\ncts$novelty2[which(cts$novelty2==\"ISM\" & cts$ISM_subtype==\"Suffix\")] = \"ISM_Suffix\"\ncts$novelty2[cts$novelty2 %in% c(\"Antisense\", \"Genomic\", \"Intergenic\", \"ISM\")] = \"Other\"\ncts$novelty2 = factor(cts$novelty2,levels=c(\"Known\", \"ISM_Prefix\", \"ISM_Suffix\", \"NIC\", \"NNC\", \"Other\"))\n\ndata_to_label1 = talonSwitchList_part1$isoformFeatures %>%\n  filter((-log10(isoform_switch_q_value) > 50 & (abs(dIF) > .1)) | \n           (abs(dIF) > .5 & isoform_switch_q_value < 1e-10))\ndata_to_label2 = talonSwitchList_part1$isoformFeatures %>% \n  filter(isoform_switch_q_value < .05, gene_name %in% c(\"SRRM1\", \"PTBP2\", \"ELAVL2\", \"ELAVL4\", \"RBFOX2\",\"NF1\", \"TSC2\", \"UBE3A\", \"KMT2E\", \"KMT5B\", \"SMARCD3\", \"SMARCA1\", \"FOXP2\", \"GRIA3\", \"VAMP1\", \"GAD1\", \"NLGN4X\", \"NRXN1\")) %>% group_by(gene_name) %>% slice_max(n = 1, abs(dIF))\n\ndata_to_label <- bind_rows(data_to_label1,data_to_label2)\n\nFig3a = ggplot(data=talonSwitchList_part1$isoformFeatures %>% left_join(cts %>% dplyr::select(isoform_id=transcript_id, novelty=novelty2)), \n       aes(x=dIF, y=-log10(isoform_switch_q_value))) +\n     geom_point(\n        aes(color=novelty), # default cutoff\n        size=2, alpha=.5) +\n    geom_hline(yintercept = -log10(0.05), linetype='dashed',color='red') + # default cutoff\n    labs(x='difference in isoform fraction (dIF)', y='-log10 ( Isoform Switch Q Value )') +\n    theme_bw() + xlim(-1,1) + scale_color_manual(values=colorVector_ismSplit) + \n  ggrepel::geom_text_repel(data =  data_to_label %>% filter(dIF < 0),aes(label=gene_name, segment.size  = .1),size=3,force = 10, max.overlaps = 50,nudge_y = 10, nudge_x = -.2) + \n  ggrepel::geom_text_repel(data =  data_to_label %>% filter(dIF > 0),aes(label=gene_name, segment.size  = .1),size=3,force = 10, max.overlaps = 50,nudge_y = 10, nudge_x = .2) + theme(legend.position = 'none') + geom_vline(xintercept = 0,lty=1,color='darkgrey')\n\nJoining with `by = join_by(isoform_id)`\n\nFig3a\n\nWarning: Removed 4 rows containing missing values (`geom_point()`).\n\n\nWarning: Removed 1 rows containing missing values (`geom_text_repel()`).\n\n\n\n\nggsave(Fig3a, file=\"output/figures/Fig3/Fig3a.pdf\",width=6,height=4)\n\nWarning: Removed 4 rows containing missing values (`geom_point()`).\nRemoved 1 rows containing missing values (`geom_text_repel()`).\n\nFig3a.fg = ggplot(data=talonSwitchList_part1$isoformFeatures %>% left_join(cts %>% dplyr::select(isoform_id=transcript_id, novelty=novelty2)), \n       aes(x=dIF, y=-log10(isoform_switch_q_value))) +\n     geom_point(\n        aes(color=novelty), color=NA, # default cutoff\n        size=2, alpha=.5) +\n    geom_hline(yintercept = -log10(0.05), linetype='dashed',color='red') + # default cutoff\n    labs(x='difference in isoform fraction (dIF)', y='-log10 ( Isoform Switch Q Value )') +\n    theme_bw() + xlim(-1,1) + scale_color_manual(values=colorVector_ismSplit) + \n ggrepel::geom_text_repel(data =  data_to_label %>% filter(dIF < 0),aes(label=gene_name, segment.size   = .1),size=3,force = 10, max.overlaps = 50,nudge_y = 10, nudge_x = -.2) + \n  ggrepel::geom_text_repel(data =  data_to_label %>% filter(dIF > 0),aes(label=gene_name, segment.size  = .1),size=3,force = 10, max.overlaps = 50,nudge_y = 10, nudge_x = .2)+theme(legend.position = 'none') + geom_vline(xintercept = 0,lty=1,color='darkgrey')\n\nJoining with `by = join_by(isoform_id)`\n\nFig3a.fg\n\nWarning: Removed 102319 rows containing missing values (`geom_point()`).\nRemoved 1 rows containing missing values (`geom_text_repel()`).\n\n\n\n\nggsave(Fig3a.fg, file=\"output/figures/Fig3/Fig3a_fg.pdf\",width=6,height=4)\n\nWarning: Removed 102319 rows containing missing values (`geom_point()`).\nRemoved 1 rows containing missing values (`geom_text_repel()`).\n\nFig3a.bg =ggplot(data=talonSwitchList_part1$isoformFeatures %>% left_join(cts %>% dplyr::select(isoform_id=transcript_id, novelty=novelty2)), \n       aes(x=dIF, y=-log10(isoform_switch_q_value))) +\n     geom_point(\n        aes(color=novelty), # default cutoff\n        size=2, alpha=.5)  + scale_color_manual(values=colorVector_ismSplit) + theme_void()  + theme(legend.position = 'none')\n\nJoining with `by = join_by(isoform_id)`\n\nggsave(Fig3a.bg, file=\"output/figures/Fig3/Fig3a_bg.jpg\",width=6,height=4)\n\nWarning: Removed 4 rows containing missing values (`geom_point()`).\n\n\n\n\nFig3a_2: Pie Chart\n\nthis_df = talonSwitchList_part1$isoformFeatures %>% \n  left_join(cts %>% dplyr::select(isoform_id=transcript_id, novelty=novelty2)) %>%\n  filter(isoform_switch_q_value < .05) %>% group_by(novelty) %>% summarise(switches=n_distinct(isoform_id))\n\nJoining with `by = join_by(isoform_id)`\n\nthis_df<-this_df %>% arrange(desc(novelty)) %>%\n  mutate(prop = switches / sum(switches) *100) %>%\n  mutate(ypos = cumsum(prop)- 0.5*prop )\n\nFig3a_part2 = ggplot(this_df, aes(x=\"\", y=prop, fill=novelty)) +\n  geom_bar(stat=\"identity\", width=1, color=\"white\") +\n  coord_polar(\"y\",start=0) + \n  theme_void() + theme(legend.position = 'none', plot.title = element_text(hjust=.5)) +\n  scale_fill_manual(values=colorVector_ismSplit) + \n  geom_text(aes(y=ypos, label = paste0(novelty,\"\\n(N=\", switches, \")\")), color = \"white\", size=5) \n  Fig3a_part2\n\n\n\n  ggsave(Fig3a_part2, file=\"output/figures/Fig3/Fig3a_part2.pdf\",width=4,height=4)\n\n\n\nFig3b: DGE vs DTU plots\n\nthis_df = talonSwitchList_part1$isoformFeatures %>% \n  left_join(cts %>% dplyr::select(isoform_id=transcript_id, novelty=novelty2))\n\nJoining with `by = join_by(isoform_id)`\n\nthis_df$gene_q_value = DGE_results$padj[match(this_df$gene_id, DGE_results$gene_id)]\n\nFig3b = ggplot(data=this_df, \n       aes(x=gene_log2_fold_change, y=dIF)) +\n     geom_point(\n        aes(color=abs(dIF) > 0.1 & isoform_switch_q_value < 0.05, # default cutoff\n            shape = abs(gene_log2_fold_change) > .1 & gene_q_value < .05),\n        size=1, alpha=.5,\n    ) +\n    geom_hline(yintercept = 0, linetype='dashed') + # default cutoff\n    geom_vline(xintercept =0, linetype='dashed') + # default cutoff\n    labs(y='difference in isoform fraction (dIF)', x='Gene log2FC') +\n    theme_bw()  + xlim(-5,5)+\n  scale_color_manual('Signficant\\nIsoform Switch', values = c('black','red')) +\n  scale_shape_manual('Signficant\\nDGE', values = c(\"FALSE\"=1, \"TRUE\"=16)) +\n  ggrepel::geom_text_repel(data = talonSwitchList_part1$isoformFeatures %>% filter(abs(dIF) > .5 & isoform_switch_q_value < 0.05), aes(label=gene_name),size=3, max.overlaps = 20)\n\nFig3b\n\nWarning: Removed 31 rows containing missing values (`geom_point()`).\n\n\nWarning: Removed 1 rows containing missing values (`geom_text_repel()`).\n\n\nWarning: ggrepel: 4 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\nggsave(Fig3b, file=\"output/figures/Fig3/Fig3b.pdf\",width=8,height=5)\n\nWarning: Removed 31 rows containing missing values (`geom_point()`).\n\n\nWarning: Removed 1 rows containing missing values (`geom_text_repel()`).\n\n\nWarning: ggrepel: 2 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n## DGE Volcano plot colored by DTU\nthis_df = DGE_results %>% left_join(cts_gene %>% dplyr::select(gene_id, gene_name)) %>% \n  left_join(tableS3 %>% dplyr::select(gene_id, DTU) %>% group_by(gene_id) %>% summarise(DTU = any(DTU)))\n\nJoining with `by = join_by(gene_id)`\nJoining with `by = join_by(gene_id)`\n\nthis_df$DTU[is.na(this_df$DTU)] = F\nthis_df$DTU = factor(this_df$DTU, levels=c(\"TRUE\", \"FALSE\"))\nggplot(this_df %>% filter(DTU==FALSE), aes(x=log2FoldChange, y=-log10(padj))) + geom_point(alpha=.25, color='grey') + geom_point(data=this_df %>% filter(DTU==TRUE), alpha=.5, color='red') + theme_bw()\n\n\n\n\n\n\nFig3c: Venn Diagrams\n\ngene_overlaps = tableS3 %>% group_by(gene_id) %>% summarise(DTE = any(DTE), DGE=any(DGE), DTU=any(DTU)) %>% dplyr::select(-gene_id)\n\n# Sanity check: 2,679 of 10809 genes with DTU (iso_q_value< .05)\nswitches=extractTopSwitches(\n  talonSwitchList_part1, extractGenes = TRUE, dIFcutoff = 0, filterForConsequences = FALSE, n=Inf\n) %>%  as_tibble()\ntable(gene_overlaps$DTU)\n\n\nFALSE  TRUE \n 8130  2679 \n\n# Gene-level DGE:  4475 of 24554 -- note different backgrounds\ntable(DGE_results$padj < .05)\n\n\nFALSE  TRUE \n20079  4475 \n\n# Fisher's Exact Test\nsource(file = \"code/fisher_overlap.R\")\nORA(tableS3$gene_id[tableS3$DTU_qval<.05],DGE_results$gene_id[DGE_results$padj<.05], tableS3$gene_id, DGE_results$gene_id)\n\n                    OR               Fisher p                 -95%CI \n    \"2.00059991005475\" \"1.21479676549559e-46\"     \"1.81968255413102\" \n                +95%CI                Overlap         Reference List \n    \"2.19910780950278\"                 \"1010\"                 \"2898\" \n            Input List             Background         % List Overlap \n                \"2679\"                \"10809\"                 \"34.9\" \n\n# 1411 isoform-switching genes without even nominally significant evidence of DGE\nlength(intersect(tableS3$gene_id[tableS3$DTU_qval<.05], DGE_results$gene_id[DGE_results$pvalue>.05]))\n\n[1] 1411\n\nFig3c = ggVennDiagram(list(DTU = which(gene_overlaps$DTU), \n                                  DGE = which(gene_overlaps$DGE),\n                                  DTE = which(gene_overlaps$DTE))) + \n  scale_fill_gradient(low=\"grey\",high = \"red\")\nFig3c\n\n\n\nggsave(Fig3c, file=\"output/figures/Fig3/Fig3c.pdf\",width=8,height=5)"
  },
  {
    "objectID": "analysis/Figure3_IsoformSwitchAnalyzeR.html#switch-analysis-part-2-functional-consequences",
    "href": "analysis/Figure3_IsoformSwitchAnalyzeR.html#switch-analysis-part-2-functional-consequences",
    "title": "Figure 3 - IsoformSwitchAnalyzeR",
    "section": "Switch analysis part 2 (functional consequences)",
    "text": "Switch analysis part 2 (functional consequences)\nIUPred and SignalP are difficult to run. Non-webserver IUPred2A/3 only takes a single sequence at a time, so requires a wrapper. Although “V5 is supported” for SignalP (I guess through the webserver?) v5.0 and v6.0 no longer seem to produce the expected output (-f summary) of v4.1.\nCurrently, trying to import from the webtools_v3 crashes R.\n\nrdata_path  = \"data/working/talonSwitchList_part2.rds\"\nif (!file.exists(rdata_path)) {\n  talonSwitchList_part2 <- isoformSwitchAnalysisPart2(\n    switchAnalyzeRlist        = talonSwitchList_part1, \n    n                         = 10, # number of PDF plots to generate\n    removeNoncodinORFs        = FALSE,\n    pathToCPC2resultFile      = \"data/working/IsoformSwitchAnalyzeR_webtools_v4/result_cpc2.txt\",\n    pathToPFAMresultFile      = \"data/working/IsoformSwitchAnalyzeR_webtools_v4/result_pfam_scan.txt\",\n    # might want to disable smoothing through `analyzeIUPred2A` since IUPred3 now\n    # performs smoothing:\n    pathToIUPred2AresultFile  = \"data/working/IsoformSwitchAnalyzeR_webtools_v4/result_iupred3.txt.gz\",\n    pathToSignalPresultFile   = \"data/working/IsoformSwitchAnalyzeR_webtools_v4/result_signalP.txt\",\n    pathToOutput              = \"output/IsoformSwitchAnalyzeR/\",\n    outputPlots               = T\n  )\n  # todo - split this into individual functions because `analyzeSwitchConsequences`\n  # is still filtering on dIF in addition to qval\n  \n  talonSwitchList_part2 <- analyzeSwitchConsequences(talonSwitchList_part2, onlySigIsoforms = T, dIFcutoff = 0, consequencesToAnalyze = c('tss','tts','last_exon','isoform_length','exon_number','intron_structure','ORF_length', '5_utr_seq_similarity', '5_utr_length', '3_utr_seq_similarity', '3_utr_length','coding_potential','ORF_seq_similarity','NMD_status','domains_identified','signal_peptide_identified'))\n  \n  \n  saveRDS(talonSwitchList_part2, file=rdata_path)\n} else {\n  talonSwitchList_part2 = readRDS(rdata_path)\n}\n\nPlot a gene:\n\npdf(file=\"output/figures/Fig3/Fig3_SMARCC2.pdf\", height=4, width=8)\nswitchPlot(\n  talonSwitchList_part2,dIFcutoff = .1,logYaxis = TRUE,\n  gene='SMARCC2'\n)\ndev.off()\n\nquartz_off_screen \n                2 \n\npdf(file=\"output/figures/Fig4/FigS4_NF1.pdf\", height=4, width=6)\nswitchPlot(\n  talonSwitchList_part2,dIFcutoff = .1,logYaxis = TRUE,\n  gene='NF1'\n)\ndev.off()\n\nquartz_off_screen \n                2 \n\nswitchPlot(\n  talonSwitchList_part2,\n  gene='TALONG000088362'\n)"
  },
  {
    "objectID": "analysis/Figure3_IsoformSwitchAnalyzeR.html#functional-analysis-of-isoform-switches",
    "href": "analysis/Figure3_IsoformSwitchAnalyzeR.html#functional-analysis-of-isoform-switches",
    "title": "Figure 3 - IsoformSwitchAnalyzeR",
    "section": "Functional Analysis of Isoform Switches:",
    "text": "Functional Analysis of Isoform Switches:\n\npdf(file='output/figures/Fig3/Fig3e.pdf', width=7,height=5)\nswitch_consequences <- extractConsequenceEnrichment(\n    talonSwitchList_part2,dIFcutoff = 0,countGenes = F,\n    returnResult = T # if TRUE returns a data.frame with the summary statistics\n)\ndev.off()\n\nquartz_off_screen \n                2 \n\nwrite_tsv(switch_consequences, file=\"output/tables/TableS3_switchConsequences_summary_v2.tsv\")\nwrite_tsv(talonSwitchList_part2$switchConsequence, file=\"output/tables/TableS3_switchConsequences_data.tsv\")\n\nconsequence = extractConsequenceSummary(\n    talonSwitchList_part2, includeCombined = T,\n    dIFcutoff=0, returnResult = T)\n\n\n\nextractSplicingEnrichment(\n    talonSwitchList_part2,dIFcutoff = 0,onlySigIsoforms = T,\n    countGenes = F,\n    returnResult = TRUE # if TRUE returns a data.frame with the summary statistics\n)\n\n\n\n\n  condition_1 condition_2                            AStype nUp nDown    propUp\n1          VZ          CP     A3 gain (paired with A3 loss) 603   472 0.5609302\n2          VZ          CP     A5 gain (paired with A5 loss) 526   466 0.5302419\n3          VZ          CP ATSS gain (paired with ATSS loss) 868   679 0.5610860\n4          VZ          CP ATTS gain (paired with ATTS loss) 690   544 0.5591572\n5          VZ          CP               ES (paired with EI) 776  1153 0.4022810\n6          VZ          CP     IR gain (paired with IR loss) 266   265 0.5009416\n7          VZ          CP   MEE gain (paired with MEE loss)   4     3 0.5714286\n8          VZ          CP             MES (paired with MEI) 364   587 0.3827550\n  propUpCiLo propUpCiHi   propUpPval   propUpQval Significant Comparison\n1  0.5306659  0.5908602 7.202013e-05 1.152322e-04        TRUE VZ\\nvs\\nCP\n2  0.4986297  0.5616742 6.097909e-02 8.130545e-02       FALSE VZ\\nvs\\nCP\n3  0.5359374  0.5860023 1.705724e-06 4.548597e-06        TRUE VZ\\nvs\\nCP\n4  0.5309374  0.5870945 3.592843e-05 7.185686e-05        TRUE VZ\\nvs\\nCP\n5  0.3803020  0.4245576 8.845503e-18 7.076402e-17        TRUE VZ\\nvs\\nCP\n6  0.4575691  0.5443036 1.000000e+00 1.000000e+00       FALSE VZ\\nvs\\nCP\n7  0.1840516  0.9010117 1.000000e+00 1.000000e+00       FALSE VZ\\nvs\\nCP\n8  0.3517411  0.4144974 4.775090e-13 1.910036e-12        TRUE VZ\\nvs\\nCP\n\nextractSplicingSummary(talonSwitchList_part2,\n                       splicingToAnalyze = 'all',dIFcutoff = 0,\n                       onlySigIsoforms = T,asFractionTotal = F)\n\n\n\n\n\nAlternative TSS isoform switches\n\nTSS_switches =talonSwitchList_part2$switchConsequence %>% as_tibble() %>% \n  filter(featureCompared == 'tss', isoformsDifferent==TRUE) %>% \n  dplyr::select(gene_name, isoformUpregulated, isoformDownregulated) %>%\n  left_join(talonSwitchList_part2$isoformFeatures %>% dplyr::select(isoformUpregulated=isoform_id, dIF, isoform_switch_q_value)) \n\nJoining with `by = join_by(isoformUpregulated)`\n\n# Top 10 TSS switches by isoform fraction\nTSS_switches%>% arrange(-abs(dIF))\n\n# A tibble: 2,452 × 5\n   gene_name isoformUpregulated   isoformDownregulated   dIF isoform_switch_q_…¹\n   <chr>     <chr>                <chr>                <dbl>               <dbl>\n 1 S100A16   ENST00000368705.2_2  ENST00000368706.9_3  0.811            5.86e- 3\n 2 CPVL      TALONT000753261      ENST00000265394.10_3 0.769            7.02e-16\n 3 ZNF358    ENST00000596712.1_3  ENST00000597229.2_2  0.766            7.57e- 4\n 4 PLAUR     ENST00000340093.8_5  TALONT000368020      0.697            5.55e- 8\n 5 ELMO1     ENST00000396045.7_2  ENST00000310758.8_2  0.654            1.67e-39\n 6 ELMO1     ENST00000396045.7_2  ENST00000448602.5_2  0.654            1.67e-39\n 7 ELMO1     ENST00000396045.7_2  TALONT000761865      0.654            1.67e-39\n 8 BIN1      ENST00000316724.10_4 ENST00000348750.8_3  0.624            1.51e- 5\n 9 BIN1      ENST00000316724.10_4 ENST00000393040.7_3  0.624            1.51e- 5\n10 BIN1      ENST00000316724.10_4 ENST00000409400.1_4  0.624            1.51e- 5\n# … with 2,442 more rows, and abbreviated variable name ¹​isoform_switch_q_value\n\nfor(top_genes in TSS_switches %>% arrange(-abs(dIF)) %>% dplyr::select(gene_name) %>% \n    unique() %>% head(10) %>% pull()) {\nswitchPlot(\n  talonSwitchList_part2,\n  gene=top_genes)\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Top 10 TSS switches by q-value\nTSS_switches%>% arrange(isoform_switch_q_value)\n\n# A tibble: 2,452 × 5\n   gene_name isoformUpregulated   isoformDownregulated   dIF isoform_switch_q_…¹\n   <chr>     <chr>                <chr>                <dbl>               <dbl>\n 1 CTNNA1    ENST00000540387.5_1  ENST00000302763.12_2 0.197            1.04e-83\n 2 PKM       TALONT000323027      TALONT000323086      0.453            9.72e-73\n 3 TPM1      ENST00000334895.10_2 ENST00000358278.7_3  0.475            4.54e-65\n 4 TPM1      ENST00000334895.10_2 ENST00000558868.5_1  0.475            4.54e-65\n 5 TPM1      ENST00000334895.10_2 ENST00000560959.5_1  0.475            4.54e-65\n 6 KIF2A     ENST00000407818.7_2  ENST00000401507.7_2  0.276            1.96e-54\n 7 KIF2A     ENST00000407818.7_2  TALONT000664196      0.276            1.96e-54\n 8 ABAT      ENST00000396600.6_1  ENST00000268251.13_2 0.317            4.11e-51\n 9 ABAT      ENST00000396600.6_1  ENST00000425191.6_1  0.317            4.11e-51\n10 ABAT      ENST00000396600.6_1  TALONT000412117      0.317            4.11e-51\n# … with 2,442 more rows, and abbreviated variable name ¹​isoform_switch_q_value\n\nfor(top_genes in TSS_switches %>% arrange(isoform_switch_q_value) %>% dplyr::select(gene_name) %>% \n    unique() %>% head(10) %>% pull()) {\nswitchPlot(\n  talonSwitchList_part2,\n  gene=top_genes)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwrite_tsv(TSS_switches, file=\"output/tables/TableS3_tss_switches.tsv\")"
  },
  {
    "objectID": "analysis/Figure3_IsoformSwitchAnalyzeR.html#plot-interesting-disease-genes",
    "href": "analysis/Figure3_IsoformSwitchAnalyzeR.html#plot-interesting-disease-genes",
    "title": "Figure 3 - IsoformSwitchAnalyzeR",
    "section": "Plot interesting disease genes",
    "text": "Plot interesting disease genes\n\npdf_path = \"output/figures/switch_plots/switch_plots_diseaseGenes.pdf\"\nif(!file.exists(pdf_path)) {\n  disease_genes = read.csv('ref/ASD+SCZ+DDD_2022.csv')\n  interesting_genes = extractTopSwitches(talonSwitchList_part2, filterForConsequences = T, n = Inf)\n  interesting_genes = interesting_genes$gene_name\n  interesting_genes = interesting_genes[interesting_genes %in% disease_genes$Gene]\n\n  pdf(file=pdf_path)\n  for(this_gene in interesting_genes) {\n  switchPlot(\n    talonSwitchList_part2,\n    gene=this_gene\n  )\n    print(this_gene)\n  }\n  dev.off()\n}\n\n[1] \"DPF2\"\n\n\n[1] \"GTF2I\"\n\n\n[1] \"ATP6V0A1\"\n\n\n[1] \"SMARCC2\"\n\n\n[1] \"TBR1\"\n\n\n[1] \"ABAT\"\n\n\n[1] \"AP1S2\"\n\n\n[1] \"GPHN\"\n\n\n[1] \"NRCAM\"\n\n\n[1] \"ELAVL2\"\n\n\n[1] \"CADM1\"\n\n\n[1] \"ZEB2\"\n\n\n[1] \"PRICKLE1\"\n\n\n[1] \"MYH10\"\n\n\n[1] \"PROM1\"\n\n\n[1] \"DNM1L\"\n\n\n[1] \"PKN2\"\n\n\n[1] \"ROBO2\"\n\n\n[1] \"AMPH\"\n\n\n[1] \"CACNB1\"\n\n\n[1] \"CDC42\"\n\n\n[1] \"TSC2\"\n\n\n[1] \"CELF2\"\n\n\n[1] \"AKAP9\"\n\n\n[1] \"SATB1\"\n\n\n[1] \"POMGNT1\"\n\n\n[1] \"NCDN\"\n\n\n[1] \"FGF12\"\n\n\n[1] \"MAP7\"\n\n\n[1] \"ZNF711\"\n\n\n[1] \"FOXP1\"\n\n\n[1] \"NF1\"\n\n\n[1] \"APBA2\"\n\n\n[1] \"PRUNE2\"\n\n\n[1] \"GNAO1\"\n\n\n[1] \"KLHL5\"\n\n\nWarning: Removed 1 rows containing missing values (`geom_segment()`).\nRemoved 1 rows containing missing values (`geom_segment()`).\n\n\n[1] \"PBX1\"\n\n\n[1] \"SLC38A10\"\n\n\n[1] \"ACTN4\"\n\n\n[1] \"PHLDB1\"\n\n\n[1] \"FAM174B\"\n\n\n[1] \"CAMTA1\"\n\n\n[1] \"PHF14\"\n\n\n[1] \"PPARGC1A\"\n\n\n[1] \"DPYSL2\"\n\n\n[1] \"BRINP3\"\n\n\n[1] \"ARHGEF7\"\n\n\n[1] \"ATL1\"\n\n\n[1] \"ANK3\"\n\n\n[1] \"NTRK2\"\n\n\n[1] \"CDIP1\"\n\n\n[1] \"FOXP2\"\n\n\n[1] \"HNRNPK\"\n\n\n[1] \"HOPX\"\n\n\n[1] \"ZMYND8\"\n\n\nWarning: Removed 1 rows containing missing values (`geom_segment()`).\nRemoved 1 rows containing missing values (`geom_segment()`).\n\n\n[1] \"ST7\"\n\n\n[1] \"TRAPPC9\"\n\n\n[1] \"MRTFB\"\n\n\n[1] \"EXOC6\"\n\n\n[1] \"SPOP\"\n\n\n[1] \"UBE3A\"\n\n\n[1] \"RTN4\"\n\n\n[1] \"PDE1C\"\n\n\n[1] \"HNRNPF\"\n\n\n[1] \"NEO1\"\n\n\n[1] \"RANBP9\"\n\n\n[1] \"SLC16A9\"\n\n\n[1] \"TRIM46\"\n\n\n[1] \"CAMK2B\"\n\n\n[1] \"NCKAP5\"\n\n\n[1] \"PLAUR\"\n\n\n[1] \"TRIM58\"\n\n\n[1] \"ZMYND11\"\n\n\n[1] \"SET\"\n\n\n[1] \"FGF13\"\n\n\n[1] \"TCF4\"\n\n\n[1] \"PIK3R1\"\n\n\n[1] \"KLHL35\"\n\n\n[1] \"SETBP1\"\n\n\n[1] \"TBC1D5\"\n\n\n[1] \"VAMP2\"\n\n\n[1] \"NADK\"\n\n\n[1] \"AFF3\"\n\n\n[1] \"SPEN\"\n\n\n[1] \"GCA\"\n\n\n[1] \"PSD3\"\n\n\n[1] \"EXOC6B\"\n\n\n[1] \"PPP3CA\"\n\n\nWarning: Removed 1 rows containing missing values (`geom_segment()`).\nRemoved 1 rows containing missing values (`geom_segment()`).\n\n\n[1] \"SNX5\"\n\n\n[1] \"SLC1A2\"\n\n\n[1] \"ABLIM2\"\n\n\n[1] \"JADE1\"\n\n\n[1] \"STX1A\"\n\n\n[1] \"DNMT3A\"\n\n\n[1] \"ZNF138\"\n\n\n[1] \"RAP1GDS1\"\n\n\n[1] \"IP6K2\"\n\n\n[1] \"CADM2\"\n\n\n[1] \"PSMC6\"\n\n\n[1] \"NELFCD\"\n\n\n[1] \"TCF20\"\n\n\n[1] \"CAMK4\"\n\n\n[1] \"NIPA2\"\n\n\nWarning: Removed 2 rows containing missing values (`geom_segment()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_segment()`).\n\n\n[1] \"CACNB4\"\n\n\n[1] \"TOP3B\"\n\n\n[1] \"PCDH11X\"\n\n\n[1] \"PAK1\"\n\n\n[1] \"TAOK2\"\n\n\n[1] \"FADS1\"\n\n\n[1] \"RPP14\"\n\n\n[1] \"RAB11FIP5\"\n\n\n[1] \"ABL1\"\n\n\n[1] \"F8\"\n\n\n[1] \"CPEB4\"\n\n\n[1] \"PCDHA6\"\n\n\n[1] \"ANKS1B\"\n\n\n[1] \"MAP1A\"\n\n\n[1] \"DAGLA\"\n\n\nquartz_off_screen \n                2"
  },
  {
    "objectID": "analysis/Figure3_IsoformSwitchAnalyzeR.html#plot-genes-with-top-switching-novel-isoforms",
    "href": "analysis/Figure3_IsoformSwitchAnalyzeR.html#plot-genes-with-top-switching-novel-isoforms",
    "title": "Figure 3 - IsoformSwitchAnalyzeR",
    "section": "Plot genes with top switching novel isoforms",
    "text": "Plot genes with top switching novel isoforms\n\npdf_path = \"output/figures/switch_plots/Fig3_switch_plots_novelIsoforms.pdf\"\nif(!file.exists(pdf_path)) {\n  disease_genes = read.csv('ref/ASD+SCZ+DDD_2022.csv')\n  switches = talonSwitchList_part2$isoformFeatures %>% left_join(cts %>% dplyr::select(isoform_id=transcript_id, novelty=novelty2))\n  interesting_genes <- switches %>% filter(novelty!=\"Known\" & isoform_switch_q_value < 10e-15 ) %>% dplyr::arrange(isoform_switch_q_value) %>% dplyr::select(gene_name) %>% pull() %>% unique()\n  \n  interesting_genes = unique(c(interesting_genes[1:10], interesting_genes[interesting_genes%in% disease_genes$Gene]))\n  interesting_genes\n  \n  pdf(file = pdf_path)\n    for(this_gene in interesting_genes) {\n    switchPlot(\n      talonSwitchList_part2,\n      gene=this_gene\n    )\n      print(this_gene)\n    }\n  dev.off()\n}\n\nJoining with `by = join_by(isoform_id)`\n\n\n[1] \"ADD1\"\n\n\n[1] \"PKM\"\n\n\n[1] \"SMARCC2\"\n\n\n[1] \"KIF1B\"\n\n\n[1] \"MYO6\"\n\n\n[1] \"INTS10\"\n\n\n[1] \"SEPTIN2\"\n\n\n[1] \"VCAN\"\n\n\n[1] \"FNBP1L\"\n\n\n[1] \"ARVCF\"\n\n\n[1] \"ELAVL2\"\n\n\n[1] \"MYH10\"\n\n\n[1] \"CLTC\"\n\n\n[1] \"ROBO2\"\n\n\n[1] \"EIF4A2\"\n\n\n[1] \"CADM1\"\n\n\n[1] \"AKAP9\"\n\n\n[1] \"POMGNT1\"\n\n\n[1] \"ZEB2\"\n\n\n[1] \"EIF4G1\"\n\n\n[1] \"NCDN\"\n\n\n[1] \"PSAP\"\n\n\n[1] \"PTK2\"\n\n\n[1] \"NF1\"\n\n\n[1] \"APBA2\"\n\n\n[1] \"KMT2E\"\n\n\nquartz_off_screen \n                2 \n\n\nthis is a disgusting hack\n\nstrp <- function(x) str_extract(x, \"^[^\\\\.]*\")\n\nstrippedSwitchList = function(switchList) {\n  switchList$isoformFeatures$isoform_id <- strp(switchList$isoformFeatures$isoform_id)\n  switchList[[\"exons\"]]@elementMetadata@listData[[\"isoform_id\"]] <- strp(switchList[[\"exons\"]]@elementMetadata@listData[[\"isoform_id\"]])\n  switchList$isoformCountMatrix$isoform_id <- strp(switchList$isoformCountMatrix$isoform_id)\n  switchList$isoformRepExpression$isoform_id <- strp(switchList$isoformRepExpression$isoform_id)\n  switchList$orfAnalysis$isoform_id <- strp(switchList$orfAnalysis$isoform_id)\n  switchList$isoformSwitchAnalysis$isoform_id <- strp(switchList$isoformSwitchAnalysis$isoform_id)\n  switchList$domainAnalysis$isoform_id <- strp(switchList$domainAnalysis$isoform_id)\n  switchList$idrAnalysis$isoform_id <- strp(switchList$idrAnalysis$isoform_id)\n  switchList$signalPeptideAnalysis$isoform_id <- strp(switchList$signalPeptideAnalysis$isoform_id)\n  switchList$AlternativeSplicingAnalysis$isoform_id <- strp(switchList$AlternativeSplicingAnalysis$isoform_id)\n  \n  switchList$switchConsequence$isoformUpregulated <- strp(switchList$switchConsequence$isoformUpregulated)\n  switchList$switchConsequence$isoformDownregulated <- strp(switchList$switchConsequence$isoformDownregulated)\n  return(switchList)\n}\n\ntalonSwitchList_part2_strp = strippedSwitchList(talonSwitchList_part2)\n\n\ntheme_set(theme_gray(base_size = 18))\ntheme_update(\n  axis.text = element_text(color=\"black\"),\n  plot.title = element_text(size = rel(1), hjust = 0.5)\n)\n\nexport at 8 x 6in\n\nswitchPlot(talonSwitchList_part2_strp, gene = \"KMT2E\")\n\n\n\nswitchPlot(talonSwitchList_part2_strp, gene = \"UBE3A\")"
  },
  {
    "objectID": "analysis/Figure3_DTU_enrichments.html",
    "href": "analysis/Figure3_DTU_enrichments.html",
    "title": "Figure 3 - DTU enrichments",
    "section": "",
    "text": "suppressPackageStartupMessages({\n  library(tidyverse)\n  library(rtracklayer)\n  library(ggrepel)\n  library(biomaRt)\n})\nknitr::opts_chunk$set(fig.width=12, fig.height=8) \n\nsource(\"code/fisher_overlap.R\")\n\ntableS3.isoform <- read_tsv(\"output/tables/TableS3_v3.tsv.gz\")\n\nRows: 102319 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (5): isoform_id, gene_id, gene_name, condition_1, condition_2\ndbl (9): DTU_dIF, DTU_pval, DTU_qval, DTE_log2FC, DTE_pval, DTE_qval, DGE_lo...\nlgl (3): DTU, DTE, DGE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntableS3.isoform$ensg = substr(tableS3.isoform$gene_id,1,15)\ntableS3.gene <- read_tsv(\"output/tables/TableS3b_geneLevel.tsv.gz\")\n\nRows: 10809 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (2): gene_name, gene_id\ndbl (6): DTU_qval_min, DTU_pval_min, DTE_qval_min, DTE_pval_min, DGE_pval, D...\nlgl (3): DTU, DTE, DGE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncts = read_table(\"data/cp_vz_0.75_min_7_recovery_talon_abundance_filtered.tsv.gz\")\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  .default = col_double(),\n  annot_gene_id = col_character(),\n  annot_transcript_id = col_character(),\n  annot_gene_name = col_character(),\n  annot_transcript_name = col_character(),\n  gene_novelty = col_character(),\n  transcript_novelty = col_character(),\n  ISM_subtype = col_character()\n)\nℹ Use `spec()` for the full column specifications.\n\ngeneAnno = rtracklayer::import(\"ref/gencode.v33lift37.annotation.gtf.gz\") %>% as_tibble() %>% filter(type=='gene')\ngeneAnno$ensg = substr(geneAnno$gene_id,1,15)\n\ndatAnno = tableS3.isoform %>% mutate(ensg = substr(gene_id,1,15))\ndatAnno <- datAnno %>% left_join(cts %>% dplyr::select(isoform_id = annot_transcript_id, length))\n\nJoining with `by = join_by(isoform_id)`\n\ngeneSetsForLDSC = data.frame(ensg = unique(datAnno$ensg), set= \"background\")\ngeneSetsForLDSC = rbind(geneSetsForLDSC, data.frame(set = \"DTU\", \n                                   ensg = unique(tableS3.isoform$ensg[tableS3.isoform$DTU ==TRUE])))\ngeneSetsForLDSC = rbind(geneSetsForLDSC, data.frame(set = \"DTU.up\", \n                                   ensg = unique(tableS3.isoform$ensg[tableS3.isoform$DTU ==TRUE &\n                                                                      tableS3.isoform$DTU_dIF > 0])))\ngeneSetsForLDSC = rbind(geneSetsForLDSC, data.frame(set = \"DTU.down\", \n                                   ensg = unique(tableS3.isoform$ensg[tableS3.isoform$DTU ==TRUE &\n                                                                      tableS3.isoform$DTU_dIF < 0])))\ngeneSetsForLDSC = rbind(geneSetsForLDSC, data.frame(set = \"DTU.not.DGE\", \n                                   ensg = unique(tableS3.isoform$ensg[tableS3.isoform$DTU ==TRUE &\n                                                                      tableS3.isoform$DGE == FALSE])))\ngeneSetsForLDSC = rbind(geneSetsForLDSC, data.frame(set = \"DTU.not.DTE\", \n                                   ensg = unique(tableS3.isoform$ensg[tableS3.isoform$DTU ==TRUE &\n                                                                      tableS3.isoform$DTE == FALSE])))\ngeneSetsForLDSC = rbind(geneSetsForLDSC, data.frame(set = \"DTE\", \n                                   ensg = unique(tableS3.isoform$ensg[tableS3.isoform$DTE ==TRUE])))\ngeneSetsForLDSC = rbind(geneSetsForLDSC, data.frame(set = \"DTE.up\", \n                                   ensg = unique(tableS3.isoform$ensg[tableS3.isoform$DTE ==TRUE &\n                                                                      tableS3.isoform$DTE_log2FC > 0])))\ngeneSetsForLDSC = rbind(geneSetsForLDSC, data.frame(set = \"DTE.down\", \n                                   ensg = unique(tableS3.isoform$ensg[tableS3.isoform$DTE ==TRUE &\n                                                                      tableS3.isoform$DTE_log2FC < 0])))\ngeneSetsForLDSC = rbind(geneSetsForLDSC, data.frame(set = \"DGE\", \n                                   ensg = unique(tableS3.isoform$ensg[tableS3.isoform$DGE ==TRUE])))\ngeneSetsForLDSC = rbind(geneSetsForLDSC, data.frame(set = \"DGE.up\", \n                                   ensg = unique(tableS3.isoform$ensg[tableS3.isoform$DGE ==TRUE &\n                                                                      tableS3.isoform$DGE_log2FC > 0])))\ngeneSetsForLDSC = rbind(geneSetsForLDSC, data.frame(set = \"DGE.down\", \n                                   ensg = unique(tableS3.isoform$ensg[tableS3.isoform$DGE ==TRUE &\n                                                                      tableS3.isoform$DGE_log2FC < 0])))\n\nwrite_tsv(geneSetsForLDSC, file='output/tables/TableS3_DTU_DGE_DTE_forLDSC.tsv')\n\ngeneSetsForLDSC$gene = datAnno$gene_name[match(geneSetsForLDSC$ensg, datAnno$ensg)]\nwrite_tsv(geneSetsForLDSC[,c(\"gene\", \"set\")], file='output/tables/TableS3_DTU_DGE_DTE_forTransite.tsv')"
  },
  {
    "objectID": "analysis/Figure3_DTU_enrichments.html#fig3d-dtu-pathway",
    "href": "analysis/Figure3_DTU_enrichments.html#fig3d-dtu-pathway",
    "title": "Figure 3 - DTU enrichments",
    "section": "Fig3d: DTU pathway",
    "text": "Fig3d: DTU pathway\n\nDTU <- tableS3.gene %>% filter(DTU==T) %>% arrange(DTU_qval_min) %>% dplyr::select(gene_id) %>% pull() %>% substr(0,15)\nDTU.bg = tableS3.isoform%>% dplyr::select(gene_id)%>% unique() %>% pull() %>% substr(0,15)\n\n## Pathway analysis with gProfileR\n## Note: ordered query here because genes are ranked by DTU significance. Usually this will be F\n## Always use the matching background gene set\npath = gprofiler2::gost(query=DTU,ordered_query = T,correction_method = 'fdr',\n                        custom_bg = DTU.bg, sources = c(\"GO\",\"KEGG\", \"REACTOME\"))\n\nDetected custom background input, domain scope is set to 'custom'\n\n## Filter results for terms between 5-3000 genes. Also here I remove results where a child GO term is also included, just because there were a lot of results. Can remove this \ndf_path = as_tibble(path$result) %>% filter(term_size < 3000, path$result$term_size>5) \ndf_path <- df_path %>% filter(!term_id %in% unlist(df_path$parents))\n\n## Plot top 5 results per database\nFig3d <- df_path %>% group_by(source) %>% slice_min(p_value,n=5,with_ties = T) %>% ungroup() %>%\n  ggplot(aes(x=reorder(term_name, -p_value), y=-log10(p_value), fill=source)) + geom_bar(stat='identity',position=position_identity()) + coord_flip() + theme_bw() + labs(x=\"\")  + \n  facet_grid(source~., space = 'free', scales='free') + theme(legend.position = 'none')\nFig3d\n\n\n\n#ggsave(Fig3d, file=\"output/figures/Fig3d.pdf\",width=4.5,height=3)\n\n\nDTU.up and DTU.down\n\nDTU.up <- tableS3.isoform %>%  filter(DTU_dIF > 0, DTU_qval < .05)  %>% arrange(DTU_qval) %>% \n  dplyr::select(gene_id)%>% unique() %>% pull() %>% substr(0,15) \n\nDTU.down <- tableS3.isoform %>%  filter(DTU_dIF < 0, DTU_qval < .05)  %>% arrange(DTU_qval) %>% \n  dplyr::select(gene_id)%>% unique() %>% pull() %>% substr(0,15)\n\nDTU.bg = tableS3.isoform  %>% arrange(DTU_qval) %>% dplyr::select(gene_id)%>% unique() %>% pull() %>% substr(0,15)\n\n## Pathway analysis with gProfileR\n## Note: ordered query here because genes are ranked by DTU significance. Usually this will be F\n## Always use the matching background gene set\npath.up = gprofiler2::gost(query=DTU.up,ordered_query = T,correction_method = 'fdr',\n                        custom_bg = DTU.bg, sources = c(\"GO\",\"KEGG\", \"REACTOME\", \"CORUM\", \"WP\"))\n\nDetected custom background input, domain scope is set to 'custom'\n\n## Filter results for terms between 5-3000 genes. Also here I remove results where a child GO term is also included, just because there were a lot of results. Can remove this \ndf_path.up = as_tibble(path.up$result) %>% filter(term_size < 3000, term_size>5) %>% mutate(direction='up')\ndf_path.up <- df_path.up %>% filter(!term_id %in% unlist(df_path.up$parents))\n\n## Plot top 5 results per database\nFig3d.up <- df_path.up %>% group_by(source) %>% slice_min(p_value,n=8) %>% ungroup() %>%\n  ggplot(aes(x=reorder(term_name, -p_value), y=-log10(p_value), fill=source)) + geom_bar(stat='identity', position=position_identity()) + coord_flip() + theme_bw() + labs(x=\"\")  + ggtitle(\"DTU.up\") +\n  facet_grid(source~., space = 'free', scales='free') + theme(legend.position = 'none')\n\n\npath.down = gprofiler2::gost(query=DTU.down,ordered_query = T,correction_method = 'fdr',\n                        custom_bg = DTU.bg, sources = c(\"GO\",\"KEGG\", \"REACTOME\"))\n\nDetected custom background input, domain scope is set to 'custom'\n\n## Filter results for terms between 5-3000 genes. Also here I remove results where a child GO term is also included, just because there were a lot of results. Can remove this \ndf_path.down = as_tibble(path.down$result) %>% filter(term_size < 3000, term_size>5)  %>% mutate(direction='down')\ndf_path.down <- df_path.down %>% filter(!term_id %in% unlist(df_path$parents))\n\n## Plot top 5 results per database\nFig3d.down <- df_path.down %>% group_by(source) %>% slice_min(p_value,n=8) %>% ungroup() %>%\n  ggplot(aes(x=reorder(term_name, -p_value), y=-log10(p_value), fill=source)) + geom_bar(stat='identity', position=position_identity()) + coord_flip() + theme_bw() + labs(x=\"\")  + ggtitle(\"DTU.down\") +\n  facet_grid(source~., space = 'free', scales='free') + theme(legend.position = 'none')\n\ncowplot::plot_grid(Fig3d.down, Fig3d.up,ncol=2)\n\n\n\n\n\n\nDTU all pathways\n\nDTU <- tableS3.gene %>% filter(DTU==T) %>% arrange(DTU_qval_min) %>% dplyr::select(gene_id) %>% pull() %>% substr(0,15)\nDTU.bg = tableS3.gene%>% dplyr::select(gene_id)%>% pull() %>% substr(0,15)\npath = gprofiler2::gost(query=DTU,ordered_query = T,correction_method = 'fdr',\n                        custom_bg = DTU.bg)\n\nDetected custom background input, domain scope is set to 'custom'\n\ndf_path = as_tibble(path$result) %>% filter(term_size < 3000, path$result$term_size>5) \ndf_path <- df_path %>% filter(!term_id %in% unlist(df_path$parents))\n\ndf_path %>% group_by(source) %>% slice_min(p_value,n=5,with_ties = F) %>% ungroup() %>%\n  ggplot(aes(x=reorder(term_name, -p_value), y=-log10(p_value), fill=source)) + geom_bar(stat='identity', position=position_identity()) + coord_flip() + theme_bw() + labs(x=\"\")  + \n  facet_grid(source~., space = 'free', scales='free') + theme(legend.position = 'none')\n\n\n\n\n\n\nAlso: DTU not DGE pathway\n\nDTU <- tableS3.gene %>% filter(DTU==T, DGE_pval>.05) %>% arrange(DTU_qval_min) %>% dplyr::select(gene_id) %>% pull() %>% substr(0,15)\nDTU.bg = tableS3.gene%>% dplyr::select(gene_id)%>% pull() %>% substr(0,15)\npath = gprofiler2::gost(query=DTU,ordered_query = T,correction_method = 'fdr',\n                        custom_bg = DTU.bg)\n\nDetected custom background input, domain scope is set to 'custom'\n\ndf_path = as_tibble(path$result) %>% filter(term_size < 3000, path$result$term_size>5) \ndf_path <- df_path %>% filter(!term_id %in% unlist(df_path$parents))\n\ndf_path %>% group_by(source) %>% slice_min(p_value,n=30) %>% ungroup() %>%\n  ggplot(aes(x=reorder(term_name, -p_value), y=-log10(p_value), fill=source)) + geom_bar(stat='identity') + coord_flip() + theme_bw() + labs(x=\"\")  + \n  facet_grid(source~., space = 'free', scales='free') + theme(legend.position = 'none')"
  },
  {
    "objectID": "analysis/Figure3_DTU_enrichments.html#ewce",
    "href": "analysis/Figure3_DTU_enrichments.html#ewce",
    "title": "Figure 3 - DTU enrichments",
    "section": "EWCE",
    "text": "EWCE\nUsing fisher ORA instead\n\nif(FALSE) {\n  load(\"ref/EWCE/CellTypeData_DamonNeuralFetalOnly.rda\")\n  DTU.up <- tableS3.isoform %>%  filter(DTU_dIF > 0, DTU_qval < .05)  %>% arrange(DTU_qval) %>% \n    dplyr::select(gene_name)%>% unique() %>% pull() %>% substr(0,15) \n  DTU.down <- tableS3.isoform %>%  filter(DTU_dIF < 0, DTU_qval < .05)  %>% arrange(DTU_qval) %>% \n    dplyr::select(gene_name)%>% unique() %>% pull() %>% substr(0,15)\n  DTU = unique(c(DTU.up, DTU.down))\n  DTU.notDGE <- tableS3.gene %>% filter(DTU==T, DGE_pval>.05) %>% arrange(DTU_qval_min) %>% dplyr::select(gene_name) %>% pull() %>% substr(0,15)\n  DTU.bg = tableS3.isoform  %>% arrange(DTU_qval) %>% dplyr::select(gene_name)%>% unique() %>% pull() \n  \n  gene_sets = list(DTU,DTU.notDGE)\n  names(gene_sets) = c(\"DTU\", \"DTU.notDGE\")\n  df_ewce = data.frame()\n  \n  for(i in 1:length(gene_sets)) {\n    print(i)\n    these_genes = gene_sets[[i]]\n    \n    res=EWCE::bootstrap_enrichment_test(ctd, hits = these_genes, bg=DTU.bg,\n                                        genelistSpecies = 'human',sctSpecies = 'human',\n                                        annotLevel =2,verbose = F,no_cores = 10)\n    df_ewce = rbind(df_ewce,data.frame(list=names(gene_sets)[i], res$results))\n  }\n  \n  \n  df_ewce$label = signif(-log10(df_ewce$q+1e-5),2)\n  df_ewce$label[df_ewce$q>.05] = \"\"\n  ggplot(df_ewce, aes(x=factor(list),y=CellType, label=label, fill=(sd_from_mean))) + geom_tile() + scale_fill_gradient(low='white', high='red') + geom_text() + theme(axis.text.x = element_text(angle=-45,hjust=0)) + scale_fill_gradient2()\n\n}"
  },
  {
    "objectID": "analysis/Figure3_DTU_enrichments.html#cell-type-makers",
    "href": "analysis/Figure3_DTU_enrichments.html#cell-type-makers",
    "title": "Figure 3 - DTU enrichments",
    "section": "Cell-type makers",
    "text": "Cell-type makers\n\n# Load poliodakis et al markers (Table S4)\n# see: https://doi.org/10.1016/j.neuron.2019.06.011\ncelltypemarkers <- openxlsx::read.xlsx('https://www.cell.com/cms/10.1016/j.neuron.2019.06.011/attachment/508ae008-b926-487a-b871-844a12acc1f8/mmc5', sheet='Cluster enriched genes') %>% as_tibble()\ncelltypemarkers.tableS5 = openxlsx::read.xlsx('https://www.cell.com/cms/10.1016/j.neuron.2019.06.011/attachment/ec1863fa-0dfc-405c-928c-c5ca96115667/mmc6', sheet='Sub-cluster enriched genes') %>% as_tibble()\ncelltypemarkers.bg = read.csv(\"/Users/mgandal/GandalLab Dropbox/Michael Gandal/datasets/fetal_hub/data/polioudakis_neuron2020/single_cell_background_MJG221228.csv\")\ncelltypemarkers.bg = unique(celltypemarkers.bg$ensembl_gene_id)\n\nDTU <- tableS3.gene %>% filter(DTU==T) %>% arrange(DTU_qval_min) %>% dplyr::select(gene_id) %>% pull() %>% substr(0,15)\nDTE <- tableS3.gene %>% filter(DTE==T) %>% arrange(DTU_qval_min) %>% dplyr::select(gene_id) %>% pull() %>% substr(0,15)\nDTU_notDGE <- tableS3.gene %>% filter(DTU==T, DGE_pval>.05) %>% arrange(DTU_qval_min) %>% dplyr::select(gene_id) %>% pull() %>% substr(0,15)\nDGE <- tableS3.gene %>% filter(DGE==T) %>% arrange(DTU_qval_min) %>% dplyr::select(gene_id) %>% pull() %>% substr(0,15)\nDTU_up <- tableS3.isoform %>% filter(DTU==T,DTU_dIF>0) %>% arrange(DTU_qval) %>% dplyr::select(gene_id) %>% unique() %>% pull() %>% substr(0,15)\nDTU_down <- tableS3.isoform %>% filter(DTU==T,DTU_dIF<0) %>% arrange(DTU_qval) %>% dplyr::select(gene_id) %>% unique() %>% pull() %>% substr(0,15)\n\nDTU.bg = tableS3.gene%>% dplyr::select(gene_id)%>% pull() %>% substr(0,15)\n\n\n  df_fisher = data.frame()\n  \n  for(this_cell in unique(celltypemarkers$Cluster)) {\n    marker_genes = celltypemarkers %>% filter(Cluster == this_cell) %>% dplyr::select(Ensembl) %>% pull()\n    enrichment = ORA(DTU, marker_genes, DTU.bg, celltypemarkers.bg)\n    df_fisher = rbind(df_fisher, data.frame(set=\"DTU\", cell=this_cell, as.data.frame(t(enrichment))))\n    \n    enrichment2 = ORA(DTU_notDGE, marker_genes, DTU.bg, celltypemarkers.bg)\n    df_fisher = rbind(df_fisher, data.frame(set=\"DTU-not-DGE\", cell=this_cell, as.data.frame(t(enrichment2))))\n    \n     enrichment3 = ORA(DGE, marker_genes, DTU.bg, celltypemarkers.bg)\n     df_fisher = rbind(df_fisher, data.frame(set=\"DGE\", cell=this_cell, as.data.frame(t(enrichment3))))\n\n     enrichment4 = ORA(DTE, marker_genes, DTU.bg, celltypemarkers.bg)\n     df_fisher = rbind(df_fisher, data.frame(set=\"DTE\", cell=this_cell, as.data.frame(t(enrichment4))))\n    # \n    # enrichment5 = ORA(DTU_down, marker_genes, DTU.bg, celltypemarkers.bg)\n    # df_fisher = rbind(df_fisher, data.frame(set=\"DTU_down\", cell=this_cell, as.data.frame(t(enrichment5))))\n  }\n  \n  df_fisher$Fisher.p = p.adjust(as.numeric(df_fisher$Fisher.p),'fdr')\n  df_fisher$OR = as.numeric(df_fisher$OR)\n  \n  df_fisher$CellClass = \"Other\"\n  df_fisher$CellClass[grep(\"Ex\",df_fisher$cell)] = \"Excitatory Neurons\"\n  df_fisher$CellClass[grep(\"In\",df_fisher$cell)] = \"Interneurons\"\n  df_fisher$CellClass[df_fisher$cell %in% c(\"vRG\", \"oRG\", \"IP\", \"PgS\", \"PgG2M\")] = \"Progenitors\"\n  \n  Fig3f=ggplot(df_fisher,aes(x=reorder(cell, -Fisher.p), y= -log10(Fisher.p), size=OR, color=-log10(Fisher.p))) +\n    geom_point() + coord_flip() + facet_grid(CellClass~set, scales = 'free', space='free_y') + theme_bw() +\n    geom_hline(yintercept = 1,lty=2,color='red') + labs(y='Enrichment (-log10 q-value)',x='')\n  Fig3f\n\n\n\n  ggsave(Fig3f, file=\"output/figures/Fig3/Fig3f.pdf\",width=5,height=4)\n  \n\nFig3f.2 = ggplot(df_fisher,aes(x=reorder(cell, -Fisher.p), y= -log10(Fisher.p), size=OR, color= set)) +\n    geom_point() + coord_flip() + facet_grid(CellClass~., scales = 'free', space='free_y') + theme_bw() +\n    geom_hline(yintercept = 1,lty=2,color='red') + labs(y='Enrichment (-log10 q-value)',x='')\n\nggsave(Fig3f.2, file=\"output/figures/Fig3/Fig3f_2.pdf\",width=4,height=6)"
  },
  {
    "objectID": "analysis/Figure3_DTU_enrichments.html#rare-variant-logit",
    "href": "analysis/Figure3_DTU_enrichments.html#rare-variant-logit",
    "title": "Figure 3 - DTU enrichments",
    "section": "Rare variant logit",
    "text": "Rare variant logit\n\nIsoform-level\nusing gene level results to be most comparable to DGE\n\nif(FALSE) {\n\n  \n  fu=openxlsx::read.xlsx(('https://static-content.springer.com/esm/art%3A10.1038%2Fs41588-022-01104-0/MediaObjects/41588_2022_1104_MOESM3_ESM.xlsx'),'Supplementary Table 11')\n  fu$p_TADA_ASD[fu$p_TADA_ASD==0] = min(fu$p_TADA_ASD[fu$p_TADA_ASD >0],na.rm=T)\n  fu$p_TADA_NDD[fu$p_TADA_NDD==0] = min(fu$p_TADA_NDD[fu$p_TADA_NDD >0],na.rm=T)\n  \n  datAnno.logit = data.frame(ASD_fuTADA= -log10(fu$p_TADA_ASD)[match(datAnno$ensg, fu$gene_id)])\n  datAnno.logit$NDD_fuTADA = -log10(fu$p_TADA_NDD)[match(datAnno$ensg, fu$gene_id)]\n  \n  SCZ.schema = read_tsv('ref/risk_genes/SCHEMA_gene_results.tsv')\n  datAnno.logit$SCZ_schema = -log10(SCZ.schema$`P meta`[match(datAnno$ensg, SCZ.schema$gene_id)])\n  \n  BIP.bipex = read_tsv('ref/risk_genes/BipEx_gene_results.tsv') %>% filter(group==\"Bipolar Disorder\")\n  datAnno.logit$BIP.bipex = -log10(BIP.bipex$ptv_fisher_gnom_non_psych_pval[match(datAnno$ensg,BIP.bipex$gene_id)])\n  \n  EPI.epi25 = read_tsv('ref/risk_genes/Epi25_gene_results.tsv')  %>% group_by(gene_id) %>% summarise(pval = min(pval))\n  datAnno.logit$EPI.epi25 = -log10(EPI.epi25$pval[match(datAnno$ensg,EPI.epi25$gene_id)])\n  \n  \n  df_logit= data.frame()\n  binaryVec = list(\"DTU\" = as.numeric(datAnno$DTU_qval<.05), \"DTE\" = as.numeric(datAnno$DTE_qval<.05),\n                   \"DTU_up\" = as.numeric(datAnno$DTU_qval<.05 & datAnno$DTU_dIF>0),\n                   \"DTU_down\" = as.numeric(datAnno$DTU_qval<.05 & datAnno$DTU_dIF<0),\n                   \"DTE_up\" = as.numeric(datAnno$DTE_qval<.05 & datAnno$DTE_log2FC>0),\n                   \"DTE_down\" = as.numeric(datAnno$DTE_qval<.05 & datAnno$DTE_log2FC<0),\n                   \"DTU_notDGE\" = as.numeric(datAnno$DTU_qval<.05 & datAnno$DGE_pval>0.05))\n      \n  for(i in 1:length(binaryVec)) {\n    for(this_rare_var in colnames(datAnno.logit)) {\n      this_glm = summary(glm(binaryVec[[i]] ~ datAnno.logit[,this_rare_var] + length + log10(length), data=datAnno, family='binomial'))\n      df_logit = rbind(df_logit, data.frame(feature = names(binaryVec)[[i]], set = this_rare_var, t(this_glm$coefficients[2,])))\n  }}\n      \n  df_logit$OR = exp(df_logit$Estimate)\n  df_logit$P = df_logit$Pr...z..\n  df_logit$P[df_logit$OR < 1] = 1\n  df_logit$Q = p.adjust(df_logit$P,'fdr')\n  df_logit$class = \"DGE\"\n  df_logit$class[grepl(\"DTE\", df_logit$feature)] = \"DTE\"\n  df_logit$class[grepl(\"DTU\", df_logit$feature)] = \"DTU\"\n  \n  \n  ggplot(df_logit, aes(x=reorder(set,-Q), y=-log10(Q), fill=OR)) + geom_bar(stat='identity') + \n    coord_flip() + geom_hline(yintercept = 1, lty=2,col='red') + labs(y=\"-log10(qvalue)\",x=\"\") + theme_bw() + facet_wrap(feature~.,ncol = 3)\n  \n  \n  g1 = ggplot(df_logit %>% filter(feature %in% c(\"DTU\", \"DTE\", \"DTU_notDGE\")), aes(x=reorder(set,-Q), y=-log10(Q), fill=OR)) + geom_bar(stat='identity') + \n    coord_flip() + geom_hline(yintercept = 1, lty=2,col='red') + labs(y=\"-log10(qvalue)\",x=\"\") + theme_bw() + facet_grid(feature~.)\n}\n\n\n\nGene-level\n\ntableS3.isoform$ensg = substr(tableS3.isoform$gene_id,1,15)\n\ndatAnno = tableS3.gene %>% mutate(ensg = substr(gene_id,1,15))\ndatAnno <- datAnno %>% left_join(geneAnno %>% dplyr::select(ensg, length=width))\n\nJoining with `by = join_by(ensg)`\n\n\nWarning in left_join(., geneAnno %>% dplyr::select(ensg, length = width)): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 436 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\nfu=openxlsx::read.xlsx(('https://static-content.springer.com/esm/art%3A10.1038%2Fs41588-022-01104-0/MediaObjects/41588_2022_1104_MOESM3_ESM.xlsx'),'Supplementary Table 11')\nfu$p_TADA_ASD[fu$p_TADA_ASD==0] = min(fu$p_TADA_ASD[fu$p_TADA_ASD >0],na.rm=T)\nfu$p_TADA_NDD[fu$p_TADA_NDD==0] = min(fu$p_TADA_NDD[fu$p_TADA_NDD >0],na.rm=T)\n\ndatAnno.logit = data.frame(ASD_fuTADA= -log10(fu$p_TADA_ASD)[match(datAnno$ensg, fu$gene_id)])\ndatAnno.logit$NDD_fuTADA = -log10(fu$p_TADA_NDD)[match(datAnno$ensg, fu$gene_id)]\n\nSCZ.schema = read_tsv('ref/risk_genes/SCHEMA_gene_results.tsv')\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n\n\nRows: 18321 Columns: 26\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (8): gene_id, group, OR (PTV), OR (Class I), OR (Class II), OR (PTV) up...\ndbl (16): Case PTV, Ctrl PTV, Case mis3, Ctrl mis3, Case mis2, Ctrl mis2, P ...\nlgl  (2): De novo mis3, De novo mis2\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndatAnno.logit$SCZ_schema = -log10(SCZ.schema$`P meta`[match(datAnno$ensg, SCZ.schema$gene_id)])\n\nBIP.bipex = read_tsv('ref/risk_genes/BipEx_gene_results.tsv') %>% filter(group==\"Bipolar Disorder\")\n\nRows: 119958 Columns: 20\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (4): gene_id, group, damaging_missense_fisher_gnom_non_psych_OR, ptv_fi...\ndbl (16): n_cases, n_controls, damaging_missense_case_count, damaging_missen...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndatAnno.logit$BIP.bipex = -log10(BIP.bipex$ptv_fisher_gnom_non_psych_pval[match(datAnno$ensg,BIP.bipex$gene_id)])\n\nEPI.epi25 = read_tsv('ref/risk_genes/Epi25_gene_results.tsv')  %>% group_by(gene_id) %>% summarise(pval = min(pval))\n\nRows: 71456 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (2): gene_id, group\ndbl (9): xcase_lof, xctrl_lof, pval_lof, xcase_mpc, xctrl_mpc, pval_mpc, xca...\nlgl (1): pval_infrIndel\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndatAnno.logit$EPI.epi25 = -log10(EPI.epi25$pval[match(datAnno$ensg,EPI.epi25$gene_id)])\n\n\ndf_logit= data.frame()\nbinaryVec = list(\"DTU\" = as.numeric(datAnno$DTU), \"DTE\" = as.numeric(datAnno$DTE), \"DGE\"=as.numeric(datAnno$DGE),\n                 \"DTU-not-DGE\" = as.numeric(datAnno$DTU & !datAnno$DGE), \n                 \"DTU-not-DTE\" = as.numeric(datAnno$DTU & !datAnno$DTE),\n                 \"DTU.up\" = as.numeric(datAnno$ensg %in% (tableS3.isoform %>% filter(DTU, DTU_dIF>0) %>% dplyr::select(ensg) %>% pull())),\n                 \"DTU.down\" = as.numeric(datAnno$ensg %in% (tableS3.isoform %>% filter(DTU, DTU_dIF<0) %>% dplyr::select(ensg) %>% pull())),\n                 \"DTE.up\" = as.numeric(datAnno$ensg %in% (tableS3.isoform %>% filter(DTE, DTE_log2FC>0) %>% dplyr::select(ensg) %>% pull())),\n                 \"DTE.down\" = as.numeric(datAnno$ensg %in% (tableS3.isoform %>% filter(DTE, DTE_log2FC<0) %>% dplyr::select(ensg) %>% pull())),\n                 \"DGE.up\" = as.numeric(datAnno$ensg %in% (tableS3.isoform %>% filter(DGE, DGE_log2FC>0) %>% dplyr::select(ensg) %>% pull())),\n                 \"DGE.down\" = as.numeric(datAnno$ensg %in% (tableS3.isoform %>% filter(DGE, DGE_log2FC<0) %>% dplyr::select(ensg) %>% pull())))\n    \nfor(i in 1:length(binaryVec)) {\n  for(this_rare_var in colnames(datAnno.logit)) {\n    this_glm = summary(glm(datAnno.logit[,this_rare_var] ~ binaryVec[[i]] + length + log10(length), data=datAnno))\n    df_logit = rbind(df_logit, data.frame(feature = names(binaryVec)[[i]], set = this_rare_var, t(this_glm$coefficients[2,])))\n}}\n    \ndf_logit$OR = exp(df_logit$Estimate)\ndf_logit$P = df_logit$Pr...z..\ndf_logit$Q = p.adjust(df_logit$P,'fdr')\ndf_logit$class = \"DGE\"\ndf_logit$class[grepl(\"DTE\", df_logit$feature)] = \"DTE\"\ndf_logit$class[grepl(\"DTU\", df_logit$feature)] = \"DTU\"\n\nFig3H=ggplot(df_logit %>% filter(feature %in% c(\"DTE\", \"DGE\", \"DTU\", \"DTU-not-DGE\")), aes(x=reorder(set,-Q), y=-log10(Q), color=feature, alpha = OR > 1,size=OR)) +\n    geom_point() + coord_flip() + geom_hline(yintercept = -log10(.05), lty=2,col='red') +  \n  scale_alpha_manual(values = c(.5, 1))+\n    labs(y=\"-log10(qvalue)\",x=\"\") + theme_bw() + ggtitle('Gene level rare variant enrichment')\n\nFig3H\n\n\n\nggsave(Fig3H,file='output/figures/Fig3/Fig3H.pdf',width=5,height=2.5)\n\n\ndf_logit$class[grepl(\"-not-\", df_logit$feature)] = \"DTU-not-DGE/DTE\"\ndf_logit$feature = factor(df_logit$feature, levels=c(\"DGE\", \"DGE.down\", \"DGE.up\",\"DTE\", \"DTE.down\", \"DTE.up\",\"DTU\", \"DTU.down\", \"DTU.up\",\"DTU-not-DGE\", \"DTU-not-DTE\"))\n\nFigS4B=ggplot(df_logit, aes(x=reorder(set,-Q), y=-log10(Q), color=class, size=OR, alpha=OR>1)) + geom_point() + \n  coord_flip() + geom_hline(yintercept = -log10(.05), lty=2,col='red') + labs(y=\"-log10(qvalue)\",x=\"\") + theme_bw() + facet_wrap(feature~.,ncol = 3) + scale_alpha_manual(values = c(.5, 1))\nggsave(FigS4B,file='output/figures/supplement/FigS4B.pdf',width=7,height=5)\nFigS4B\n\n\n\n# ggplot(df_logit, aes(x=reorder(feature,-Q), y=-log10(Q), fill=OR)) + geom_bar(stat='identity') + \n#   coord_flip() + geom_hline(yintercept = -log10(.05), lty=2,col='red') + labs(y=\"-log10(qvalue)\",x=\"\") + theme_bw() +   facet_grid(set~.,scales = 'free')"
  },
  {
    "objectID": "analysis/Figure3_DTU_enrichments.html#rbp-enrichments",
    "href": "analysis/Figure3_DTU_enrichments.html#rbp-enrichments",
    "title": "Figure 3 - DTU enrichments",
    "section": "RBP Enrichments",
    "text": "RBP Enrichments\n\nCeline’s RBP Targets\n\nrbp_targets = read.csv(\"ref/RBPs/RBP_targets_v2.csv\")\nrbp_targets$regulation[is.na(rbp_targets$regulation)]=\"\"\n\n\nmart = useMart(\"ENSEMBL_MART_ENSEMBL\",\"mmusculus_gene_ensembl\")\nf = listFilters(mart); a = listAttributes(mart)\nfeaturesToGet = c(\"ensembl_gene_id\", \"external_gene_name\", \"hsapiens_homolog_ensembl_gene\", \"hsapiens_homolog_associated_gene_name\",\"hsapiens_homolog_orthology_type\")\nmouseHumanHomologs = getBM(attributes = featuresToGet,mart = mart)\n\nhuman_mouse_bg = mouseHumanHomologs %>% as_tibble() %>% filter(hsapiens_homolog_orthology_type == \"ortholog_one2one\") %>% dplyr::select(\"hsapiens_homolog_ensembl_gene\") %>% pull()\n\n\n\ngenesets = list(\"DTU\"= tableS3.gene %>% filter(DTU) %>% mutate(gene_id = substr(gene_id,1,15)) %>% dplyr::select(gene_id) %>% pull(),\n                  \"DTE\" = tableS3.gene %>% filter(DTE) %>% mutate(gene_id = substr(gene_id,1,15)) %>% dplyr::select(gene_id) %>% pull(),\n                  \"DGE\" = tableS3.gene %>% filter(DTE) %>% mutate(gene_id = substr(gene_id,1,15)) %>% dplyr::select(gene_id) %>% pull(),\n                  \"DTUnotDGE\" = tableS3.gene %>% filter(DTU,DGE_pval>.05) %>% mutate(gene_id = substr(gene_id,1,15)) %>% \n                    dplyr::select(gene_id) %>% pull())\nDTU.bg = tableS3.gene %>% mutate(gene_id = substr(gene_id,1,15)) %>% dplyr::select(gene_id) %>% pull() %>% unique()\n\ndf_fisher = data.frame()\nfor(i in 1:length(genesets)) {\n  for(this_dataset in unique(na.omit(rbp_targets$dataset))) {\n    this_rbp = rbp_targets %>% filter(dataset == this_dataset) %>% mutate(target = paste0(RBP, \"_\", data.type, \"_\", msORhs)) %>% dplyr::select(target) %>% unique()  %>% pull()\n    target_genes = rbp_targets %>% filter(dataset == this_dataset) %>% dplyr::select(ENSG) %>% pull()\n \n if(grepl(\"Human\",this_rbp)) {\n   this_or = ORA(genesets[[i]], target_genes, DTU.bg, DTU.bg)\n } else {\n  this_or = ORA(genesets[[i]], target_genes, DTU.bg, human_mouse_bg)\n }\n df_fisher = rbind(df_fisher, data.frame(set = names(genesets)[[i]], dataset = this_dataset, target = this_rbp, t(this_or)))\n  }\n}\n  df_fisher$OR = as.numeric(df_fisher$OR)\n  df_fisher$Fisher.p[df_fisher$OR<1] = 1\n  df_fisher$Fisher.p = p.adjust(as.numeric(df_fisher$Fisher.p),'fdr')\n  \n  df_fisher$target = factor(df_fisher$target, levels= df_fisher %>% filter(set==\"DTU\") %>%  group_by(target) %>% summarise(pmin = min(Fisher.p)) %>% arrange(pmin) %>% dplyr::select(target) %>% pull())\n  df_fisher$org = \"Mouse\"; df_fisher$org[grep(\"Human\",df_fisher$target)] = \"Human\"\n  df_fisher$data.type = rbp_targets$data.type[match(df_fisher$dataset, rbp_targets$dataset)]\n  df_fisher$cell.type = rbp_targets$cell.type[match(df_fisher$dataset, rbp_targets$dataset)]\n  df_fisher$label = signif(df_fisher$OR,1)\n  df_fisher$label[df_fisher$Fisher.p>.05] = ''\n  Fig3H.1=ggplot(df_fisher %>% filter(set==\"DTU\"),aes(x=target, y= -log10(Fisher.p), fill=OR)) +\n    geom_bar(stat='identity',position = position_dodge2()) + theme_bw() +\n    geom_hline(yintercept = 1,lty=2,color='red') + labs(y='Enrichment\\n(-log10 q-value)',x='') + theme(axis.text.x = element_text(angle=90,vjust = .5, hjust=1))\n  \n  ggplot(df_fisher,aes(x=target, y= set, fill=-log10(Fisher.p),label=label)) + geom_tile(color='grey60') + geom_text(size=2) + theme_bw() +\n     labs(y='',x='') + theme(axis.text.x = element_text(angle=90,vjust = .5, hjust=1)) + \n    scale_fill_gradient(low='white', high='red')\n\n\n\n    Fig3H.2=ggplot(df_fisher %>% filter(set==\"DTU\"),aes(x=target, label=cell.type)) + geom_tile(aes(y=factor(1),fill=data.type)) + geom_point(aes(y=factor(1), shape=cell.type),position=position_dodge2()) + scale_shape_manual(values = c(1:9)) + theme_bw() + theme(axis.text.x = element_blank()) + labs(x=\"\", y=\"\")\n  \n    pdf(file=\"output/figures/Fig3/Fig3H.pdf\",width = 8,height=5)\n    gridExtra::grid.arrange(grobs=list(Fig3H.1,Fig3H.2),layout_matrix=cbind(c(1,1,1,1,1,1,1,2)))\n\nWarning: Width not defined. Set with `position_dodge2(width = ...)`\n\n  dev.off()\n\nquartz_off_screen \n                2 \n\n  Fig3H_supplement=ggplot(df_fisher,aes(x=reorder(target, -Fisher.p), y= -log10(Fisher.p), fill=OR)) +\n    geom_bar(stat='identity',position = position_dodge2()) + coord_flip() + theme_bw() + facet_grid(~set) +\n    geom_hline(yintercept = 1,lty=2,color='red') + labs(y='Enrichment (-log10 q-value)',x='')\nFig3H_supplement\n\n\n\nggsave(Fig3H_supplement, file=\"output/figures/supplement/Fig3H_supp.pdf\",width = 8,height=5)\n\n\n\nRBP motif:\n\n# library(transite)\n# \n# library(biomaRt)\n# mart = useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl',host = 'https://grch37.ensembl.org')\n# a=listAttributes(mart)\n# ensembl = getBM(attributes=c(\"ensembl_gene_id\", \"hgnc_symbol\",'refseq_mrna'),mart=mart)\n# \n# \n# out = run_kmer_tsma(foreground_sets = tableS3.gene$gene_name[tableS3.gene$DTU], background_set = tableS3.gene$gene_name)"
  },
  {
    "objectID": "analysis/Figure3_APA.html",
    "href": "analysis/Figure3_APA.html",
    "title": "Figure 3 - APA",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(gprofiler2)\n\n#Load df with averaged PDUIs across technical replicates and samples (PDUIS.averaged.stats)\nload(\"data/dapars2/PDUIS.avg.with.stats.RData\")\ngene_names <-PDUIS.averaged.stats$Gene\n\nget_geneName <- function(tx_vec){\n  strsplit(tx_vec, split = \"|\", fixed = TRUE)[[1]][2]\n}\n\nPDUIS.averaged.stats$geneNames <- sapply(PDUIS.averaged.stats$Gene, get_geneName)\n\nPaired two-sample T-tests comparing CP vs VZ transcript PDUIs, with associated ggplots.\n\n#T-test for overall averaged statistics. \nt.test(PDUIS.averaged.stats$CP.PDUI, PDUIS.averaged.stats$VZ.PDUI, paired = TRUE)\n\n\n    Paired t-test\n\ndata:  PDUIS.averaged.stats$CP.PDUI and PDUIS.averaged.stats$VZ.PDUI\nt = 23.028, df = 9895, p-value < 2.2e-16\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n 0.01068873 0.01267778\nsample estimates:\nmean difference \n     0.01168326 \n\n#Density plot of PDUI distribution in CP vs VZ\nggplot(data = PDUIS.averaged.stats) +\n  geom_density(mapping = aes(x = CP.PDUI, color = \"red\")) +\n  geom_density(mapping = aes(x = VZ.PDUI, color = \"blue\")) +\n  scale_color_manual(name = \"Region\", values = c('red' = 'red', 'blue' = 'blue'), labels = c('GZ', 'CP')) +\n  labs(title = \"Density plot of PDUI distribution in CP vs VZ\", x = \"PDUI\") \n\n\n\n#Histogram of distributions of VZ - CP difference\nggplot(data = PDUIS.averaged.stats) +\n  geom_histogram(mapping = aes(x = vz.cp.diff, y = after_stat(density)), binwidth = 0.05) +\n  labs(title = \"GZ - CP PDUI difference\", x = \"GZ.PDUI - CP.PDUI\")\n\n\n\n\nPlot CP vs VZ PDUI, denote transcripts with significant difference (FDR < 0.05 as per repeat measures ANOVA)\n\n#Get transcripts with significantly different PDUIs based on FDR cutoff of 0.05, separate to increased or decreased PDUI in CP compared to VZ. \nvz.cp.neg.sig =  PDUIS.averaged.stats %>% filter(FDR < 0.05, vz.cp.diff < 0)\nvz.cp.pos.sig = PDUIS.averaged.stats %>% filter(FDR < 0.05, vz.cp.diff > 0)\nvz.cp.neg.sig <- arrange(vz.cp.neg.sig, by = FDR)\nvz.cp.pos.sig = arrange(vz.cp.pos.sig, by = FDR)\n\n#Get top 10 genes from vz.cp.neg.sig and vz.cp.pos.sig\nvz.cp.pos.sig <- vz.cp.pos.sig %>% arrange(-vz.cp.diff)\nvz.cp.neg.sig <- vz.cp.neg.sig %>% arrange(vz.cp.diff)\n\nneg.sig.top10 <- vz.cp.neg.sig[1:15,]\npos.sig.top10 <- vz.cp.pos.sig[1:15,]\n\n\nFig3D=ggplot(data = PDUIS.averaged.stats) +\n  geom_point(mapping = aes(x = CP.PDUI, y = VZ.PDUI, color = cut(FDR, c(0, 0.05, Inf))), size = 0.5) +\n  scale_color_manual(values=c(\"red\", \"gray\"), labels = c(\"<0.05\", \">0.05\")) +\n  labs(title = \"PDUIs for CP vs VZ\", x = \"CP PDUI\", y = \"VZ PDUI\", color = \"FDR\") +\n  geom_text_repel(data = neg.sig.top10, mapping = aes(x = CP.PDUI, y = VZ.PDUI, label = geneNames), color = \"blue\", min.segment.length = 0, box.padding = 1, max.overlaps = Inf, size=3,force = 20, nudge_y = -.2) +\n  geom_text_repel(data = pos.sig.top10, mapping = aes(x = CP.PDUI, y = VZ.PDUI, label = geneNames), color = \"purple\", min.segment.length = 0, box.padding = 0, max.overlaps = Inf, size=3,force = 20, nudge_y = .2) + theme_bw()\n\nFig3D\n\n\n\nggsave(file='output/figures/Fig3/Fig3D_APA.pdf', width=5,height=4)\n\nPathway enrichment of top transcript PDUI changes using gprofiler2.\n\nlibrary(gprofiler2)\n\n#Order significant genes by descending vz.cp.diff\nvz.cp.neg.sig <- vz.cp.neg.sig %>% arrange(vz.cp.diff) ## Ordered by effect size\nvz.cp.pos.sig <- vz.cp.pos.sig %>% arrange(-vz.cp.diff) ## Ordered by effect size\nall.sig <- rbind(vz.cp.neg.sig, vz.cp.pos.sig)\nall.sig <- all.sig %>% arrange(-abs(vz.cp.diff))\n\ngostres.neg <- gost(query = vz.cp.neg.sig$geneNames, organism = \"hsapiens\", ordered_query = FALSE, significant = TRUE, custom_bg = PDUIS.averaged.stats$geneNames, correction_method = \"fdr\",sources = c(\"GO\", \"KEGG\", \"REAC\"))\n\nDetected custom background input, domain scope is set to 'custom'\n\nas_tibble(gostres.neg$result)\n\n# A tibble: 64 × 14\n   query   signi…¹ p_value term_…² query…³ inter…⁴ preci…⁵ recall term_id source\n   <chr>   <lgl>     <dbl>   <int>   <int>   <int>   <dbl>  <dbl> <chr>   <chr> \n 1 query_1 TRUE    3.00e-5    5445     653     510  0.781  0.0937 GO:000… GO:CC \n 2 query_1 TRUE    1.59e-4    2462     653     259  0.397  0.105  GO:004… GO:CC \n 3 query_1 TRUE    1.59e-4    2462     653     259  0.397  0.105  GO:004… GO:CC \n 4 query_1 TRUE    1.59e-4    2775     653     287  0.440  0.103  GO:003… GO:CC \n 5 query_1 TRUE    1.59e-4      59     653      18  0.0276 0.305  GO:001… GO:CC \n 6 query_1 TRUE    5.03e-4    2522     653     261  0.400  0.103  GO:003… GO:CC \n 7 query_1 TRUE    4.07e-3    2998     653     294  0.450  0.0981 GO:007… GO:CC \n 8 query_1 TRUE    4.07e-3     163     653      29  0.0444 0.178  GO:003… GO:CC \n 9 query_1 TRUE    4.07e-3    2998     653     294  0.450  0.0981 GO:003… GO:CC \n10 query_1 TRUE    4.07e-3    2998     653     294  0.450  0.0981 GO:004… GO:CC \n# … with 54 more rows, 4 more variables: term_name <chr>,\n#   effective_domain_size <int>, source_order <int>, parents <list>, and\n#   abbreviated variable names ¹​significant, ²​term_size, ³​query_size,\n#   ⁴​intersection_size, ⁵​precision\n\ngostres.pos <- gost(query = vz.cp.pos.sig$geneNames, organism = \"hsapiens\", ordered_query = FALSE, significant = TRUE, custom_bg = PDUIS.averaged.stats$geneNames, correction_method = \"fdr\", \n                    sources = c(\"GO\", \"KEGG\", \"REAC\"))\n\nDetected custom background input, domain scope is set to 'custom'\n\n\nNo results to show\nPlease make sure that the organism is correct or set significant = FALSE\n\n# No significant pathway enrichments from genes with significantly longer PDUI in VZ vs CP\n\ngostres_all <- gost(query = all.sig$geneNames, organism = \"hsapiens\", ordered_query = FALSE, significant = TRUE, custom_bg = PDUIS.averaged.stats$geneNames, correction_method = \"fdr\", sources = c(\"GO\", \"KEGG\", \"REAC\"))\n\nDetected custom background input, domain scope is set to 'custom'\n\n# No significant pathway enrichments when genes are ranked in order of decreasing magnitude of PDUI change between brain regions\n\n#Working with all significant genes:\ngostplot(gostres_all, capped = FALSE, interactive = T)\n\n\n\n\ngostres_out <- subset(gostres_all$result, select = c(\"significant\", \"p_value\", \"term_size\", \"query_size\", \"intersection_size\", \"precision\", \"recall\", \"term_id\", \"source\", \"term_name\", \"effective_domain_size\", \"source_order\"))\nwrite.table(gostres_out, \"output/tables/TableS3_APA_GO_results.txt\")\n\n#GO plot with RNA binding terms highlighted\nrna_terms <- c(\"RNA binding\", \"mRNA binding\", \"cytoplasmic stress granule\")\nrna_gostres_all <- subset(gostres_all$result, term_name %in% rna_terms)\npublish_gostplot(gostplot(gostres_all, capped = FALSE, interactive = FALSE), highlight_terms = rna_gostres_all$term_id)\n\n\n\n\n\n\n\nOverrepresentation analysis: are transcripts w/significantly different PDUIs enriched for RBPs & TFs compared to background genes? Use RBP list from Gebauer et al. 2021\n\n#Load RBP gene list from Gebauer et al. 2021\nRBPs <- scan(\"ref/RBPs/rbps_gebauer_nrg_2021.txt\", what = \"\", sep = \"\\n\")\n\n#Get background genes (transcripts with no significant change in PDUI)\nPDUIS.averaged.bckgrd <- PDUIS.averaged.stats %>% filter(FDR >= 0.05)\n\nbckgrd.rbp <- nrow(subset(PDUIS.averaged.bckgrd, geneNames %in% RBPs))\nbckgrd.nonrbp <- nrow(subset(PDUIS.averaged.bckgrd, !geneNames %in% RBPs))\n\nsig.rbp <- nrow(subset(PDUIS.averaged.stats %>% filter(FDR < 0.05), geneNames %in% RBPs))\nsig.nonrbp <- nrow(subset(PDUIS.averaged.stats %>% filter(FDR < 0.05), !geneNames %in% RBPs))\n\n#Run one-sided Fisher's exact test\nd <- data.frame(bckgrd = c(bckgrd.rbp, bckgrd.nonrbp), sig = c(sig.rbp, sig.nonrbp))\nrow.names(d) <- c(\"RBP\", \"non-RBP\")\n\nd\n\n        bckgrd sig\nRBP       3074 453\nnon-RBP   5809 560\n\nfisher.test(d, alternative = \"less\")\n\n\n    Fisher's Exact Test for Count Data\n\ndata:  d\np-value = 2.06e-10\nalternative hypothesis: true odds ratio is less than 1\n95 percent confidence interval:\n 0.0000000 0.7321337\nsample estimates:\nodds ratio \n 0.6541755"
  }
]