[
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Index",
    "section": "",
    "text": "Please navigate using the sidebar at left."
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "",
    "text": "suppressPackageStartupMessages({\n  library(IsoformSwitchAnalyzeR)\n  library(rtracklayer)\n  library(ggrepel)\n  library(scales)\n  library(GenomicFeatures)\n  library(DescTools)\n  library(tidyverse)\n  library(magrittr)\n})\n\ncolorVector = c(\n  \"Known\" = \"#009E73\",\n  \"ISM\"   = \"#0072B2\",\n  \"ISM_Prefix\" = \"#005996\",\n  \"ISM_Suffix\" = \"#378bcc\",\n  \"NIC\"   = \"#D55E00\",\n  \"NNC\"   = \"#E69F00\",\n  \"Other\" = \"#000000\"\n)\ncolorVector_ismSplit = colorVector[-2]"
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html#load-data",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html#load-data",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "Load Data",
    "text": "Load Data\n\nif(!file.exists(\"data/working/bulkTxome.Rdata\")) {\n  talon_gtf = rtracklayer::import(\"data/cp_vz_0.75_min_7_recovery_talon.gtf.gz\")\n  tx.isoseq =  talon_gtf %>% as_tibble() %>% filter(type == \"transcript\") \n  \n  sqanti_gtf = rtracklayer::import(\"data/sqanti/cp_vz_0.75_min_7_recovery_talon_corrected.gtf.cds.gtf.gz\")\n  tx.sqanti = sqanti_gtf %>% as_tibble() %>% filter(type == \"transcript\")\n  \n  gencode_gtf = rtracklayer::import(\"ref/gencode.v33lift37.annotation.gtf.gz\") \n  tx.gencode =  gencode_gtf %>% as_tibble() %>% filter(type == \"transcript\")\n  \n  txdb.gencode = makeTxDbFromGRanges(gencode_gtf)\n  gencodelengths= transcriptLengths(txdb.gencode)\n  \n  txdb.isoseq = makeTxDbFromGRanges(talon_gtf)\n  isoSeqLengths = transcriptLengths(txdb.isoseq)\n  samps = tribble( \n    ~sample_id, ~condition,\n    \"VZ_209\", \"VZ\",\n    \"VZ_334\", \"VZ\",\n    \"VZ_336\", \"VZ\",\n    \"CP_209\", \"CP\",\n    \"CP_334\", \"CP\",\n    \"CP_336\", \"CP\"\n  ) %>%\n    dplyr::mutate(\n      dplyr::across(condition, as_factor)\n    )\n  \n  cts = read_table(\"data/cp_vz_0.75_min_7_recovery_talon_abundance_filtered.tsv.gz\")\n  cts.collapse = cts %>%\n    mutate(\n      VZ_209 = rowSums(across(matches(\"209_.*_VZ\"))),\n      VZ_334 = rowSums(across(matches(\"334_.*_VZ\"))),\n      VZ_336 = rowSums(across(matches(\"336_.*_VZ\"))),\n      CP_209 = rowSums(across(matches(\"209_.*_CP\"))),\n      CP_334 = rowSums(across(matches(\"334_.*_CP\"))),\n      CP_336 = rowSums(across(matches(\"336_.*_CP\"))),\n      .keep = \"unused\"\n    ) %>%\n    dplyr::select(!c(\"gene_ID\", \"transcript_ID\", \"annot_transcript_name\")) %>%\n    dplyr::rename(\n      gene_id = \"annot_gene_id\",\n      transcript_id = \"annot_transcript_id\",\n      gene_name = \"annot_gene_name\"\n    ) %>%\n    mutate(\n      gene_novelty = as.factor(gene_novelty),\n      transcript_novelty = as.factor(transcript_novelty),\n      ISM_subtype = ISM_subtype %>% na_if(\"None\") %>% as.factor()\n    )\n  cts$counts = rowSums(as.matrix(cts.collapse[,9:14]))\n  \n  cts$novelty2 = as.character(cts$transcript_novelty)\n  cts$novelty2[which(cts$novelty2==\"ISM\" & cts$ISM_subtype==\"Prefix\")] = \"ISM_Prefix\"\n  cts$novelty2[which(cts$novelty2==\"ISM\" & cts$ISM_subtype==\"Suffix\")] = \"ISM_Suffix\"\n  cts$novelty2[cts$novelty2 %in% c(\"Antisense\", \"Genomic\", \"Intergenic\", \"ISM\")] = \"Other\"\n  cts$novelty2 = factor(cts$novelty2,levels=c(\"Known\", \"ISM_Prefix\", \"ISM_Suffix\", \"NIC\", \"NNC\", \"Other\"))\n  \n  \n  TableS1 = tx.isoseq %>% dplyr::select(gene_id, transcript_id, gene_name, transcript_name, seqnames, start, end, strand, transcript_length=width, source, gene_status, gene_type, transcript_status,transcript_type,  havana_transcript, ccdsid, protein_id)\n  TableS1 = TableS1 %>% left_join(cts %>% dplyr::select(transcript_id=annot_transcript_id, transcript_novelty, ISM_subtype, transcript_novelty2 = novelty2, n_exons, cds_length = length, expression_counts = counts))\n  TableS1$expression_TPM = TableS1$expression_counts / (sum(TableS1$expression_counts / 1000000))\n  write_tsv(TableS1, file=\"output/tables/TableS1_transcript_annotation.tsv\")\n  save.image(\"data/working/bulkTxome.Rdata\")\n} else {\n  load(\"data/working/bulkTxome.Rdata\")\n}\n\nWarning in .get_cds_IDX(mcols0$type, mcols0$phase): The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\n\n\nWarning in .reject_transcripts(bad_tx, because): The following transcripts were dropped because they have incompatible\n  CDS and stop codons: ENST00000422803.2_2, ENST00000618549.1_2,\n  ENST00000619291.4_2, ENST00000621077.1_2, ENST00000621229.1_2,\n  ENST00000631326.2_2\n\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  .default = col_double(),\n  annot_gene_id = col_character(),\n  annot_transcript_id = col_character(),\n  annot_gene_name = col_character(),\n  annot_transcript_name = col_character(),\n  gene_novelty = col_character(),\n  transcript_novelty = col_character(),\n  ISM_subtype = col_character()\n)\nℹ Use `spec()` for the full column specifications.\n\n\nJoining with `by = join_by(transcript_id)`"
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html#technical-and-biological-replicates",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html#technical-and-biological-replicates",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "Technical and Biological Replicates",
    "text": "Technical and Biological Replicates\n\nFig1B: Isoform level MDS\n\n##\nlength(unique(cts$annot_transcript_id)) #214516 total isoforms\n\n[1] 214516\n\nlength(unique(cts$annot_gene_id)) #24554 genes\n\n[1] 24554\n\n## Collapsing across technical replicates\ncountMat = as.matrix(cts.collapse[,9:14])\ncs = colSums(countMat) / 1000000 ## TPM normalize\ncountMat.tpm = t(apply(countMat, 1, function(x) { x / cs}))\n\ntable(rowSums(countMat.tpm > 0.1) >3)  ## 175730 isoforms @ TPM > 0.1 in half of samples\n\n\n FALSE   TRUE \n 38786 175730 \n\ntable(rowSums(countMat.tpm > 1) >3)  ## 58102 @ TPM > 1 in half of samples\n\n\n FALSE   TRUE \n156414  58102 \n\nexpressedIsoforms = rowSums(countMat.tpm > .1) >3  ## TPM > .1 in half of samples\nlength(unique(cts$annot_gene_id[expressedIsoforms])) ## 17,299 genes with expressed isoforms (TPM > .1)\n\n[1] 17299\n\n# Analyze technical replicates separately\ncts.all = cts[,12:35]\ncs = colSums(cts.all) / 1000000\ncts.all.tpm = t(apply(cts.all, 1, function(x) { x / cs}))\n\nmds = cmdscale(dist(t(log2(.1+cts.all.tpm))),k = 4)\ndf = data.frame(sample=rownames(mds), PC1 = mds[,1], PC2=mds[,2], PC3=mds[,3], PC4=mds[,4])\ndf$Region = substr(df$sample, 7,9)\ndf$Subject = substr(df$sample, 1,3)\ndf$batch = substr(df$sample, 5,5)\nFig1B=ggplot(df, aes(x=PC1,y=PC2, color=Region, shape=Subject,label=batch)) + geom_point(size=4) +  geom_text(color='black', size=2) +  theme_bw() + ggtitle(\"Isoform level clustering\")\nFig1B\n\n\n\nggsave(Fig1B,filename = \"output/figures/Fig1/Fig1B.pdf\", width = 3.5,height=2)\n\n\n\nFig1C: smoothscatter\n\ngeneCountMap.tpm = tibble(gene = cts$annot_gene_name, as_tibble(cts.all.tpm)) %>% group_by(gene) %>%  summarise(across(everything(), sum))\nmds = cmdscale(dist(t(log2(.1+geneCountMap.tpm %>% dplyr::select(-gene)))),k = 4)\ndf = data.frame(sample=rownames(mds), PC1 = mds[,1], PC2=mds[,2], PC3=mds[,3], PC4=mds[,4])\ndf$Region = substr(df$sample, 7,9)\ndf$Subject = substr(df$sample, 1,3)\ndf$TechnicalReplicate = substr(df$sample, 5,5)\n#ggplot(df, aes(x=PC1,y=PC2, color=Region, shape=Subject)) + geom_point(size=3) + theme_bw() + ggtitle(\"Gene level clustering\")\n\nFig1C=ggplot(as.data.frame(countMat.tpm), aes(x=log2(1+VZ_334), y=log2(1+VZ_336))) + geom_point(color='blue',size=.4,alpha=.5) + theme_bw() + geom_abline(slope=1,lty=2) + geom_smooth(method='lm',color='black') + ggtitle(\"R=0.93, p<2e-16\")\nFig1C\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nggsave(Fig1C ,filename = \"output/figures/Fig1/Fig1C.pdf\", width = 3,height=3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\npdf(file= \"output/figures/Fig1/Fig1Cb.pdf\", width = 4, height=4)\nsmoothScatter(log2(1+countMat.tpm[,\"VZ_334\"]), log2(1+countMat.tpm[,\"VZ_336\"]))\ndev.off()\n\nquartz_off_screen \n                2 \n\nsmoothScatter(log2(1+countMat.tpm[,\"VZ_334\"]), log2(1+countMat.tpm[,\"VZ_336\"]))\n\n\n\npanel.cor <- function(x, y, digits = 2, prefix = \"R=\", cex.cor, ...)\n{\n    usr <- par(\"usr\"); on.exit(par(usr))\n    par(usr = c(0, 1, 0, 1))\n    r <- abs(cor(x, y))\n    txt <- format(c(r, 0.123456789), digits = digits)[1]\n    txt <- paste0(prefix, txt)\n    if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\n    text(0.5, 0.5, txt, cex =1)\n}\n\npdf(file=\"output/figures/supplement/FigS2_bio_replicates.pdf\", width=8,height=6)  \npairs(log2(1+countMat.tpm), panel=function(x,y){smoothScatter(x,y,add=T)},upper.panel = panel.cor)\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\ndev.off()\n\nquartz_off_screen \n                2 \n\n\n\n\nFig1E: tx novelty\n\nFig1E = ggplot(cts %>% filter(counts>10,), aes(x=counts, fill=novelty2)) + geom_histogram(position=position_fill(),alpha=.75, binwidth = .3)+ theme_bw()  +  scale_x_log10()+\n  annotation_logticks(scaled = T,sides='b')+ theme(panel.grid.minor = element_blank()) + labs(x=\"Min observed counts\", y=\"Proportion of transcripts\") + ggtitle(\"Transcript novelty & type\") + theme(plot.title = element_text(hjust=.5))  + scale_fill_manual(values=colorVector_ismSplit)\nFig1E\n\n\n\nggsave(file=\"output/figures/Fig1/Fig1E.pdf\",width=5,height=3)\n\n## Removing MAP1B\nggplot(cts %>% filter(counts>10,annot_gene_name!=\"MAP1B\"), aes(x=counts, fill=novelty2)) + geom_histogram(position=position_fill(),alpha=.5, binwidth = .3)+ theme_bw()  +  scale_x_log10()+\n  annotation_logticks(scaled = T,sides='b')+ theme(panel.grid.minor = element_blank()) + labs(x=\"Min observed counts\", y=\"Proportion of transcripts\") + ggtitle(\"Transcript novelty & type\",subtitle = '(MAP1B removed)') + theme(plot.title = element_text(hjust=.5))  + scale_fill_manual(values=colorVector_ismSplit)"
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html#analyses-of-transcript-length",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html#analyses-of-transcript-length",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "Analyses of Transcript Length",
    "text": "Analyses of Transcript Length\n\nFig1F: Tx Length Histogra\n\ndf<- cts%>% dplyr::select(\"annot_transcript_id\", \"transcript_novelty\", \"ISM_subtype\", \"annot_gene_name\", \"counts\") %>% right_join(isoSeqLengths, by=c(\"annot_transcript_id\" = \"tx_name\")) \n\ndf$novelty2 = as.character(df$transcript_novelty)\ndf$novelty2[which(df$novelty2==\"ISM\" & df$ISM_subtype==\"Prefix\")] = \"ISM_Prefix\"\ndf$novelty2[which(df$novelty2==\"ISM\" & df$ISM_subtype==\"Suffix\")] = \"ISM_Suffix\"\ndf$novelty2[df$novelty2 %in% c(\"Antisense\", \"Genomic\", \"Intergenic\", \"ISM\")] = \"Other\"\ndf$novelty2 = factor(df$novelty2,levels=c(\"Known\", \"ISM_Prefix\", \"ISM_Suffix\", \"NIC\", \"NNC\", \"Other\"))\n\ndf %>% filter(tx_len > 900, tx_len < 6000) %>% group_by(novelty2) %>% summarise(peak=10^mean(log10(tx_len)), median(tx_len), mean(tx_len))\n\n# A tibble: 6 × 4\n  novelty2    peak `median(tx_len)` `mean(tx_len)`\n  <fct>      <dbl>            <dbl>          <dbl>\n1 Known      2305.             2317          2588.\n2 ISM_Prefix 2604.             2701          2809.\n3 ISM_Suffix 2833.             2914          3019.\n4 NIC        3023.             3100          3193.\n5 NNC        2867.             2953          3033.\n6 Other      2616.             2716          2807.\n\nFig1F = ggplot(df, aes(x=tx_len, fill=novelty2)) + geom_histogram(alpha=.75,binwidth = .03)+ \n  theme_bw() + scale_fill_manual(values=colorVector_ismSplit) +\n  scale_x_continuous(trans = log10_trans(),breaks = trans_breaks(\"log10\", function(x) 10^x),\n    labels = trans_format(\"log10\", math_format(10^.x)),limits = c(50,10^5)) + annotation_logticks() +\n  labs(x=\"Transcript Length (bp)\") + ggtitle(\"Transcript length distribution\")\nFig1F\n\nWarning: Removed 6 rows containing non-finite values (`stat_bin()`).\n\n\nWarning: Removed 12 rows containing missing values (`geom_bar()`).\n\n\n\n\nggsave(Fig1F,file='output/figures/Fig1/Fig1F.pdf', width=5,height=2.5)\n\nWarning: Removed 6 rows containing non-finite values (`stat_bin()`).\nRemoved 12 rows containing missing values (`geom_bar()`).\n\n## Zoomed in\nggplot(df, aes(x=tx_len, fill=novelty2)) + geom_histogram(alpha=.5,binwidth = 100)+ \n  theme_bw() + scale_fill_manual(values=colorVector_ismSplit) + xlim(800,5500) + \n  labs(x=\"Transcript Length (bp)\") + ggtitle(\"Transcript length distribution\") + \n  geom_vline(xintercept = 2588, lty=2,color=\"#009E73\")\n\nWarning: Removed 27594 rows containing non-finite values (`stat_bin()`).\nRemoved 12 rows containing missing values (`geom_bar()`).\n\n\n\n\nmean(df$tx_len[df$novelty2==\"Known\"])\n\n[1] 2276.283\n\nsd(df$tx_len[df$novelty2==\"Known\"])\n\n[1] 2224.66\n\nmean(df$tx_len[df$novelty2!=\"Known\"])\n\n[1] 3072.309\n\nsd(df$tx_len[df$novelty2!=\"Known\"])\n\n[1] 1168.997\n\n## Linear model: Known is the intercept\nsummary(lm(log2(tx_len) ~ novelty2,data=df[df$tx_len > 1000,]))\n\n\nCall:\nlm(formula = log2(tx_len) ~ novelty2, data = df[df$tx_len > 1000, \n    ])\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.6246 -0.3952  0.0137  0.3949  6.2778 \n\nCoefficients:\n                    Estimate Std. Error  t value Pr(>|t|)    \n(Intercept)        11.367558   0.002874 3955.796  < 2e-16 ***\nnovelty2ISM_Prefix  0.016804   0.005031    3.341 0.000836 ***\nnovelty2ISM_Suffix  0.126745   0.003850   32.923  < 2e-16 ***\nnovelty2NIC         0.224224   0.003922   57.172  < 2e-16 ***\nnovelty2NNC         0.137284   0.005755   23.855  < 2e-16 ***\nnovelty2Other       0.012843   0.008076    1.590 0.111768    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.5991 on 190337 degrees of freedom\nMultiple R-squared:  0.0208,    Adjusted R-squared:  0.02078 \nF-statistic: 808.7 on 5 and 190337 DF,  p-value: < 2.2e-16\n\nsummary(lm(log2(tx_len) ~ novelty2==\"Known\",data=df))\n\n\nCall:\nlm(formula = log2(tx_len) ~ novelty2 == \"Known\", data = df)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.5655 -0.4458  0.0731  0.5117  7.0423 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(>|t|)    \n(Intercept)             11.472348   0.002319  4948.1   <2e-16 ***\nnovelty2 == \"Known\"TRUE -0.869348   0.004212  -206.4   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8965 on 214514 degrees of freedom\nMultiple R-squared:  0.1657,    Adjusted R-squared:  0.1657 \nF-statistic: 4.26e+04 on 1 and 214514 DF,  p-value: < 2.2e-16\n\n## Non-parametric test\nkruskal.test((tx_len) ~ novelty2==\"Known\",data=df)\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  (tx_len) by novelty2 == \"Known\"\nKruskal-Wallis chi-squared = 23404, df = 1, p-value < 2.2e-16\n\nkruskal.test(log2(tx_len) ~ novelty2,data=df[df$tx_len > 1000,])\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  log2(tx_len) by novelty2\nKruskal-Wallis chi-squared = 4511.4, df = 5, p-value < 2.2e-16\n\nDescTools::DunnTest(log2(tx_len) ~ novelty2, data=df[df$tx_len > 1000,], method='bonferroni')\n\n\n Dunn's test of multiple comparisons using rank sums : bonferroni  \n\n                      mean.rank.diff    pval    \nISM_Prefix-Known           3089.5845 3.2e-10 ***\nISM_Suffix-Known          13024.1853 < 2e-16 ***\nNIC-Known                 22131.1682 < 2e-16 ***\nNNC-Known                 13892.0679 < 2e-16 ***\nOther-Known                2480.9445  0.0121 *  \nISM_Suffix-ISM_Prefix      9934.6008 < 2e-16 ***\nNIC-ISM_Prefix            19041.5837 < 2e-16 ***\nNNC-ISM_Prefix            10802.4834 < 2e-16 ***\nOther-ISM_Prefix           -608.6399  1.0000    \nNIC-ISM_Suffix             9106.9829 < 2e-16 ***\nNNC-ISM_Suffix              867.8826  1.0000    \nOther-ISM_Suffix         -10543.2407 < 2e-16 ***\nNNC-NIC                   -8239.1003 < 2e-16 ***\nOther-NIC                -19650.2236 < 2e-16 ***\nOther-NNC                -11411.1233 < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n## Boxplot\n# ggplot(df, aes(x=novelty2, y=tx_len, fill=novelty2)) + geom_boxplot()+ \n#   theme_bw()  + scale_fill_manual(values=colorVector_ismSplit) + \n#   scale_y_continuous(trans = log10_trans(),breaks = trans_breaks(\"log10\", function(x) 10^x),\n#     labels = trans_format(\"log10\", math_format(10^.x)))\n\n\n\nFig1G: # Exons / gene\n\nFig1G = ggplot(df, aes(x=nexon, fill=novelty2)) + geom_histogram(alpha=.75, binwidth = 1) + theme_bw() + \n  xlim(1,40) + scale_fill_manual(values=colorVector_ismSplit) + labs(x=\"# Exons\", y=\"# Transcripts\") + ggtitle('Exons per  Transcript') + theme(legend.position = \"none\")\nFig1G\n\nWarning: Removed 597 rows containing non-finite values (`stat_bin()`).\n\n\nWarning: Removed 12 rows containing missing values (`geom_bar()`).\n\n\n\n\nggsave(Fig1G,file='output/figures/Fig1/Fig1G.pdf', width=3,height=2.5)\n\nWarning: Removed 597 rows containing non-finite values (`stat_bin()`).\nRemoved 12 rows containing missing values (`geom_bar()`).\n\ndf %>% group_by(novelty2) %>% dplyr::select(nexon) %>% summarise(median(nexon), mean(nexon), sd(nexon), quantile(nexon, .05), quantile(nexon,.95))\n\nAdding missing grouping variables: `novelty2`\n\n\n# A tibble: 6 × 6\n  novelty2   `median(nexon)` `mean(nexon)` `sd(nexon)` quantile(nexon,…¹ quant…²\n  <fct>                <dbl>         <dbl>       <dbl>             <dbl>   <dbl>\n1 Known                    5          7.16        6.88                 1      21\n2 ISM_Prefix               8         10.1         6.99                 2      23\n3 ISM_Suffix               8         10.1         7.01                 2      24\n4 NIC                     12         13.2         7.31                 4      27\n5 NNC                      9         10.3         6.80                 2      23\n6 Other                    5          7.30        6.24                 2      20\n# … with abbreviated variable names ¹​`quantile(nexon, 0.05)`,\n#   ²​`quantile(nexon, 0.95)`\n\ndf %>% group_by(novelty2==\"Known\") %>% dplyr::select(nexon) %>% summarise(median(nexon), mean(nexon), sd(nexon), quantile(nexon, .05), quantile(nexon,.95))\n\nAdding missing grouping variables: `novelty2 == \"Known\"`\n\n\n# A tibble: 2 × 6\n  `novelty2 == \"Known\"` `median(nexon)` `mean(nexon)` sd(nexon…¹ quant…² quant…³\n  <lgl>                           <dbl>         <dbl>      <dbl>   <dbl>   <dbl>\n1 FALSE                              10         11.0        7.25       2      25\n2 TRUE                                5          7.16       6.88       1      21\n# … with abbreviated variable names ¹​`sd(nexon)`, ²​`quantile(nexon, 0.05)`,\n#   ³​`quantile(nexon, 0.95)`\n\n# Linear model (known is intercept)\nsummary(lm(log2(df$nexon) ~ df$novelty2))\n\n\nCall:\nlm(formula = log2(df$nexon) ~ df$novelty2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.4927 -0.6853  0.0657  0.8222  4.0657 \n\nCoefficients:\n                      Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           2.256270   0.004331 520.977   <2e-16 ***\ndf$novelty2ISM_Prefix 0.720984   0.008605  83.788   <2e-16 ***\ndf$novelty2ISM_Suffix 0.728883   0.006378 114.275   <2e-16 ***\ndf$novelty2NIC        1.236409   0.006545 188.897   <2e-16 ***\ndf$novelty2NNC        0.776082   0.010123  76.663   <2e-16 ***\ndf$novelty2Other      0.127124   0.014200   8.952   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.104 on 214510 degrees of freedom\nMultiple R-squared:  0.1525,    Adjusted R-squared:  0.1525 \nF-statistic:  7720 on 5 and 214510 DF,  p-value: < 2.2e-16\n\n## Non-parametric test\nkruskal.test(log2(df$nexon) ~ as.factor(df$novelty2))\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  log2(df$nexon) by as.factor(df$novelty2)\nKruskal-Wallis chi-squared = 29541, df = 5, p-value < 2.2e-16\n\nkruskal.test(log2(df$nexon) ~ as.factor(df$novelty2==\"Known\"))\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  log2(df$nexon) by as.factor(df$novelty2 == \"Known\")\nKruskal-Wallis chi-squared = 20319, df = 1, p-value < 2.2e-16\n\nkruskal.test((df$nexon) ~ as.factor(df$novelty2==\"Known\"))\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  (df$nexon) by as.factor(df$novelty2 == \"Known\")\nKruskal-Wallis chi-squared = 20319, df = 1, p-value < 2.2e-16\n\nDescTools::DunnTest(log2(df$nexon) ~ as.factor(df$novelty2),method='bonferroni')\n\n\n Dunn's test of multiple comparisons using rank sums : bonferroni  \n\n                      mean.rank.diff    pval    \nISM_Prefix-Known          32693.6946 < 2e-16 ***\nISM_Suffix-Known          33127.7388 < 2e-16 ***\nNIC-Known                 61043.3188 < 2e-16 ***\nNNC-Known                 35434.2011 < 2e-16 ***\nOther-Known                3206.1675 0.00083 ***\nISM_Suffix-ISM_Prefix       434.0442 1.00000    \nNIC-ISM_Prefix            28349.6241 < 2e-16 ***\nNNC-ISM_Prefix             2740.5065 0.00050 ***\nOther-ISM_Prefix         -29487.5271 < 2e-16 ***\nNIC-ISM_Suffix            27915.5799 < 2e-16 ***\nNNC-ISM_Suffix             2306.4623 0.00092 ***\nOther-ISM_Suffix         -29921.5713 < 2e-16 ***\nNNC-NIC                  -25609.1177 < 2e-16 ***\nOther-NIC                -57837.1512 < 2e-16 ***\nOther-NNC                -32228.0336 < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html#analyses-of-transcripts-per-gene-disease",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html#analyses-of-transcripts-per-gene-disease",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "Analyses of transcripts per gene & disease",
    "text": "Analyses of transcripts per gene & disease\n\nNDD risk genes ~ unique transcipts per gene\n\nrisk_genes =read.csv(\"ref/ASD+SCZ+DDD_2022.csv\")\npLI_scores = read.table('ref/pLI_scores.ensid.txt',header = T)\nasd_genes = risk_genes$Gene[risk_genes$Set==\"ASD (SFARI score 1)\"]\nddd_genes = risk_genes$Gene[risk_genes$Set==\"DDD (Kaplanis et al. 2019)\"]\n\ngeneCounts = cts %>% group_by(gene_id=substr(annot_gene_id,1,15)) %>% summarise(gene_counts = sum(counts))\ngeneCounts$gene_counts = geneCounts$gene_counts / (sum(geneCounts$gene_counts) / 1000000)\n\ndf <- talon_gtf %>% as_tibble()  %>% \n  mutate(gene_id = str_sub(gene_id, 1, 15)) %>%\n  group_by(gene_id) %>%\n  summarize(n_transcripts = n_distinct(na.omit(transcript_id)), n_exons = n_distinct(na.omit(exon_id))) %>%\n  ungroup() \n\ndf <-as_tibble(gencode_gtf) %>% dplyr::filter(type==\"gene\") %>% mutate(gene_id=substr(gene_id,0,15)) %>% right_join(df, by=\"gene_id\")\ndf <- df %>% left_join(geneCounts) \n\nJoining with `by = join_by(gene_id)`\n\ndf <- pLI_scores %>% as_tibble() %>% dplyr::select(gene_id=gene, pLI) %>% right_join(df)\n\nJoining with `by = join_by(gene_id)`\n\n\nWarning in right_join(., df): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 476 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\ndf$gene_rank = rank(-df$n_transcripts, ties.method = 'first')\ndf$DDD = FALSE\ndf$DDD[df$gene_name %in% c(asd_genes, ddd_genes)] = TRUE\ns=summary(glm(DDD ~ log10(n_transcripts)  + log10(width)  + log10(gene_counts), data=df %>% filter(gene_type == \"protein_coding\"), family='binomial'))\nprint(s)\n\n\nCall:\nglm(formula = DDD ~ log10(n_transcripts) + log10(width) + log10(gene_counts), \n    family = \"binomial\", data = df %>% filter(gene_type == \"protein_coding\"))\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-0.8652  -0.2530  -0.1708  -0.1059   3.5222  \n\nCoefficients:\n                     Estimate Std. Error z value Pr(>|z|)    \n(Intercept)          -10.2296     0.5162 -19.819  < 2e-16 ***\nlog10(n_transcripts)   1.1084     0.2013   5.507 3.64e-08 ***\nlog10(width)           1.0441     0.1057   9.882  < 2e-16 ***\nlog10(gene_counts)     0.3320     0.1161   2.859  0.00425 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 3522.0  on 15146  degrees of freedom\nResidual deviance: 3145.4  on 15143  degrees of freedom\nAIC: 3153.4\n\nNumber of Fisher Scoring iterations: 7\n\nexp(s$coefficients[,1])\n\n         (Intercept) log10(n_transcripts)         log10(width) \n        3.608466e-05         3.029439e+00         2.840918e+00 \n  log10(gene_counts) \n        1.393712e+00 \n\nFig1H=ggplot(df, aes(x = gene_rank, y = n_transcripts,color=DDD)) +\n  geom_point() + geom_line(color='blue') + \n  geom_label_repel(data = df %>% filter(n_transcripts > 150 | (n_transcripts > 75 & DDD==TRUE)),aes(label = gene_name),force = 30, direction='both',nudge_y=-.1,nudge_x = .3, max.iter = 10000,max.overlaps = 50, size=2.5) + scale_color_manual(values=c(\"TRUE\" = \"red\", \"FALSE\" = \"black\")) + scale_y_log10() + scale_x_log10() + theme_bw() + annotation_logticks() + theme(legend.position = 'none') + labs(x=\"Gene rank\", y=\"# Transcripts\") + ggtitle(\"NDD risk genes ~ unique  transcipts per gene\",subtitle=paste0(\"OR \",signif(exp(s$coefficients[2,1]),3),\", P=\", signif(s$coefficients[2,4],2)))\nFig1H\n\n\n\nggsave(file=\"output/figures/Fig1/Fig1H.pdf\",Fig1H, width = 8, height=3)\n\n\n\nFigS3: NDD risk genes ~ unique NOVEL transcipts per gene\n\ndf.novel <- talon_gtf %>% as_tibble()  %>% filter(type==\"transcript\", transcript_id %in% cts$annot_transcript_id[cts$novelty2!=\"Known\"]) %>% \n  mutate(gene_id = str_sub(gene_id, 1, 15)) %>%\n  group_by(gene_id) %>%\n  summarize(n_transcripts = n_distinct(na.omit(transcript_id)), n_exons = n_distinct(na.omit(exon_id))) %>%\n  ungroup() \n\ndf.novel <- as_tibble(gencode_gtf) %>% dplyr::filter(type==\"gene\") %>% mutate(gene_id=substr(gene_id,0,15)) %>% right_join(df.novel, by=\"gene_id\")\ndf.novel <- df.novel %>% left_join(geneCounts) \n\nJoining with `by = join_by(gene_id)`\n\ndf.novel$gene_rank = rank(-df.novel$n_transcripts, ties.method = 'first')\ndf.novel$DDD = FALSE\ndf.novel$DDD[df.novel$gene_name %in% c(asd_genes, ddd_genes)] = TRUE\n\ns=summary(glm(DDD ~ log10(n_transcripts)  + log10(width)  + log10(gene_counts), data=df.novel %>% filter(gene_type == \"protein_coding\"), family='binomial'))\nprint(s)\n\n\nCall:\nglm(formula = DDD ~ log10(n_transcripts) + log10(width) + log10(gene_counts), \n    family = \"binomial\", data = df.novel %>% filter(gene_type == \n        \"protein_coding\"))\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-0.7978  -0.2842  -0.2103  -0.1501   3.4149  \n\nCoefficients:\n                     Estimate Std. Error z value Pr(>|z|)    \n(Intercept)           -9.9549     0.5723 -17.394  < 2e-16 ***\nlog10(n_transcripts)   0.5682     0.1645   3.453 0.000554 ***\nlog10(width)           1.0640     0.1115   9.546  < 2e-16 ***\nlog10(gene_counts)     0.5614     0.1217   4.612 3.98e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 3142.7  on 11204  degrees of freedom\nResidual deviance: 2904.9  on 11201  degrees of freedom\nAIC: 2912.9\n\nNumber of Fisher Scoring iterations: 7\n\nsort(exp(s$coefficients[,1]))\n\n         (Intercept)   log10(gene_counts) log10(n_transcripts) \n        0.0000474938         1.7531245449         1.7651452731 \n        log10(width) \n        2.8979142259 \n\nFigS3=ggplot(df.novel, aes(x = gene_rank, y = n_transcripts,color=DDD)) +\n  geom_point() + geom_line(color='blue') + \n  geom_label_repel(data = df.novel %>% filter(n_transcripts > 150 | (n_transcripts > 75 & DDD==TRUE)),aes(label = gene_name),force = 30, direction='both',nudge_y=-.1,nudge_x = .3, max.iter = 10000,max.overlaps = 50, size=2.5) + scale_color_manual(values=c(\"TRUE\" = \"red\", \"FALSE\" = \"black\")) + scale_y_log10() + scale_x_log10() + theme_bw() + annotation_logticks() + theme(legend.position = 'none') + labs(x=\"Gene rank\", y=\"# Transcripts\") + ggtitle(\"NDD risk genes ~ unique novel transcipts per gene\",subtitle=paste0(\"OR \",signif(exp(s$coefficients[2,1]),2),\", P=\", signif(s$coefficients[2,4],2)))\nFigS3\n\n\n\nggsave(file=\"output/figures/supplement/FigS3G.pdf\",FigS3, width = 8, height=3)"
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html#pathway-analysis",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html#pathway-analysis",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "Pathway Analysis",
    "text": "Pathway Analysis\n\nsumstats <- tx.isoseq %>% group_by(gene_name, gene_type) %>% summarise(total = n_distinct(transcript_id), known = sum(transcript_status==\"KNOWN\"), ISM.pre = sum(ISM.prefix_transcript==\"TRUE\", na.rm=T), ISM.suffix = sum(ISM.suffix_transcript==\"TRUE\", na.rm=T), NIC = sum(NIC_transcript==TRUE, na.rm = T), NNC = sum(NNC_transcript==TRUE, na.rm = T))\n\n`summarise()` has grouped output by 'gene_name'. You can override using the\n`.groups` argument.\n\nwrite.csv(file=\"output/isoformNovetyCounts_at_geneLevel.csv\",sumstats)\n\n\nquery = sort(unique(tx.isoseq$gene_name[tx.isoseq$transcript_status==\"NOVEL\" & (tx.isoseq$NNC_transcript==TRUE | tx.isoseq$NIC_transcript == TRUE)]))\nbg = sort(unique(tx.isoseq$gene_name[tx.isoseq$transcript_status==\"NOVEL\" | tx.isoseq$transcript_status==\"KNOWN\"]))\n\ngo = gprofiler2::gost(query = query,custom_bg = bg,sources = c(\"GO\", \"KEGG\", \"REACTOME\"),as_short_link = T)\n\nDetected custom background input, domain scope is set to 'custom'"
  },
  {
    "objectID": "analysis/Figure1_BulkTxomeAnalysis.html#gene-body-coverage",
    "href": "analysis/Figure1_BulkTxomeAnalysis.html#gene-body-coverage",
    "title": "Figure 1 - BulkTxomeAnalysis",
    "section": "Gene Body Coverage",
    "text": "Gene Body Coverage\n\nfiles = dir(path = \"data/QC/RNA_Metrics/\", pattern=\"RNA_Metrics\")\ndf_coverage_isoseq = data.frame(Position=seq(0,100))\n\nfor(i in 1:length(files)) {\n  this_file = data.table::fread(paste0(\"data/QC/RNA_Metrics/\", files[i]),skip=10)\n  names(this_file)[2] = gsub(\".RNA_Metrics\", \"\", files[i])\n  df_coverage_isoseq = cbind(df_coverage_isoseq, this_file[,2])\n}\n\nfiles = dir(path = \"data/QC/RNA_Metrics_short_read//\", pattern=\"RNA_Metrics\")\ndf_coverage_shortread = data.frame(Position=seq(0,100))\n\nfor(i in 1:length(files)) {\n  this_file = data.table::fread(paste0(\"data/QC/RNA_Metrics_short_read/\", files[i]),skip=10)\n  names(this_file)[2] = gsub(\".RNA_Metrics\", \"\", files[i])\n  df_coverage_shortread = cbind(df_coverage_shortread, this_file[,2])\n}\n\n\n\ndf_coverage_isoseq <- df_coverage_isoseq %>% pivot_longer(cols = -Position, names_to = \"Sample\", values_to = \"Normalized_coverage\")\ndf_coverage_isoseq$modality = \"IsoSeq\"\n\ndf_coverage_shortread <- df_coverage_shortread %>% pivot_longer(cols = -Position, names_to = \"Sample\", values_to = \"Normalized_coverage\")\ndf_coverage_shortread$modality = \"short-read\\nRNAseq\\n(ribozero)\" \n\nFigS2A= ggplot(rbind(df_coverage_isoseq, df_coverage_shortread), aes(x=Position,y=Normalized_coverage,group=Sample, color=modality)) + geom_path() + theme_bw() + labs(x=\"Gene body position (5' -> 3')\", y=\"Normalized coverage\")\nggsave(FigS2A,file=\"output/figures/supplement/FigS2A_coverage.pdf\",width=5,height=3)"
  },
  {
    "objectID": "analysis/Figure1_TableS1.html",
    "href": "analysis/Figure1_TableS1.html",
    "title": "Figure 1 - generate Table S1",
    "section": "",
    "text": "theme_set(theme_bw())\ntheme_update(\n  plot.title = element_text(size = rel(1.4), hjust = 0.5),\n  axis.title = element_text(size = rel(1.2)),\n  axis.text = element_text(color=\"black\", size = rel(1)),\n  legend.title = element_text(size = rel(1.2)),\n  legend.text = element_text(color=\"black\", size = rel(1)),\n  strip.text = element_text(color=\"black\", size = rel(1))\n)\n\n\ncts = read_table(\"data/cp_vz_0.75_min_7_recovery_talon_abundance_filtered.tsv.gz\")\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  .default = col_double(),\n  annot_gene_id = col_character(),\n  annot_transcript_id = col_character(),\n  annot_gene_name = col_character(),\n  annot_transcript_name = col_character(),\n  gene_novelty = col_character(),\n  transcript_novelty = col_character(),\n  ISM_subtype = col_character()\n)\nℹ Use `spec()` for the full column specifications.\n\ncts = cts %>%\n  mutate(\n    VZ_209 = rowSums(across(matches(\"209_.*_VZ\"))),\n    VZ_334 = rowSums(across(matches(\"334_.*_VZ\"))),\n    VZ_336 = rowSums(across(matches(\"336_.*_VZ\"))),\n    CP_209 = rowSums(across(matches(\"209_.*_CP\"))),\n    CP_334 = rowSums(across(matches(\"334_.*_CP\"))),\n    CP_336 = rowSums(across(matches(\"336_.*_CP\"))),\n    .keep = \"unused\"\n  ) %>%\n  select(!c(\"gene_ID\", \"transcript_ID\", \"annot_transcript_name\")) %>%\n  dplyr::rename(\n    gene_id = \"annot_gene_id\",\n    transcript_id = \"annot_transcript_id\",\n    gene_name = \"annot_gene_name\"\n  ) %>%\n  mutate(\n    gene_novelty = as.factor(gene_novelty) %>% fct_infreq() %>% fct_relevel(\"Known\"),\n    transcript_novelty = as.factor(transcript_novelty)  %>% fct_infreq(),\n    ISM_subtype = ISM_subtype %>% na_if(\"None\") %>% factor(levels = c(\"Prefix\", \"Suffix\", \"Both\"))\n  )\ncts\n\n# A tibble: 214,516 × 14\n   gene_id  trans…¹ gene_…² n_exons length gene_…³ trans…⁴ ISM_s…⁵ VZ_209 VZ_334\n   <chr>    <chr>   <chr>     <dbl>  <dbl> <fct>   <fct>   <fct>    <dbl>  <dbl>\n 1 ENSG000… ENST00… AL6273…       1    755 Known   Known   <NA>         0      0\n 2 ENSG000… ENST00… AP0062…       4   2257 Known   Known   <NA>         0      0\n 3 ENSG000… ENST00… RP4-66…       1    180 Known   Known   <NA>         1      1\n 4 ENSG000… ENST00… MTND2P…       1   1044 Known   Known   <NA>         0      1\n 5 ENSG000… ENST00… MTCO1P…       1   1543 Known   Known   <NA>         0      0\n 6 ENSG000… ENST00… LINC01…       3   1869 Known   Known   <NA>         0      2\n 7 ENSG000… ENST00… LINC01…       2    566 Known   Known   <NA>         0      2\n 8 ENSG000… ENST00… LINC01…       1   1873 Known   Known   <NA>         1      0\n 9 ENSG000… ENST00… AL6698…       1    114 Known   Known   <NA>         3      0\n10 ENSG000… ENST00… LINC01…       5   6616 Known   Known   <NA>         1      0\n# … with 214,506 more rows, 4 more variables: VZ_336 <dbl>, CP_209 <dbl>,\n#   CP_334 <dbl>, CP_336 <dbl>, and abbreviated variable names ¹​transcript_id,\n#   ²​gene_name, ³​gene_novelty, ⁴​transcript_novelty, ⁵​ISM_subtype\n\n\n\ntalon_gtf = rtracklayer::import(\"data/cp_vz_0.75_min_7_recovery_talon.gtf.gz\")\n\n\ntalon_gtf = talon_gtf %>% as_tibble() %>% filter(type == \"transcript\")\n\n\nsqanti = read_tsv(\"data/sqanti/cp_vz_0.75_min_7_recovery_talon_classification.txt.gz\")\n\nRows: 214516 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (14): isoform, chrom, strand, structural_category, associated_gene, asso...\ndbl (21): length, exons, ref_length, ref_exons, diff_to_TSS, diff_to_TTS, di...\nlgl (13): RTS_stage, FL, n_indels, n_indels_junc, bite, iso_exp, gene_exp, r...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nExternal support used for TALON whitelist creation (some is from our initial unfiltered run of SQANTI and some is from TALON scripts)\n(there might be something wrong with this file - contains NAs)\n\nwhitelist_support = read_tsv(\"data/cp_vz_unfiltered_external_support.tsv.gz\")\n\nRows: 214516 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (7): annot_transcript_id, annot_gene_id, annot_gene_name, gene_novelty,...\ndbl  (5): n_reads, n_donors, dist_to_CAGE_peak, dist_to_polyA_site, dist_to_...\nlgl (10): within_CAGE_peak, within_polyA_site, polyA_motif_found, CAGE_suppo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nwhitelist_support\n\n# A tibble: 214,516 × 22\n   annot_trans…¹ annot…² annot…³ gene_…⁴ trans…⁵ ISM_s…⁶ n_reads n_don…⁷ dist_…⁸\n   <chr>         <chr>   <chr>   <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>\n 1 ENST00000000… ENSG00… ARF5    Known   Known   <NA>        825       3       6\n 2 ENST00000000… ENSG00… M6PR    Known   Known   <NA>       1955       3      19\n 3 ENST00000000… ENSG00… ESRRA   Known   Known   <NA>         11       3       2\n 4 ENST00000001… ENSG00… FKBP4   Known   Known   <NA>       2319       3     -30\n 5 ENST00000001… ENSG00… CYP26B1 Known   Known   <NA>         63       3    6497\n 6 ENST00000002… ENSG00… NDUFAF7 Known   Known   <NA>        158       3     -19\n 7 ENST00000002… ENSG00… FUCA2   Known   Known   <NA>        663       3     -10\n 8 ENST00000002… ENSG00… DBNDD1  Known   Known   <NA>        421       3       0\n 9 ENST00000002… ENSG00… HS3ST1  Known   Known   <NA>       1351       3      -8\n10 ENST00000003… ENSG00… CYP51A1 Known   Known   <NA>       6691       3     -22\n# … with 214,506 more rows, 13 more variables: within_CAGE_peak <lgl>,\n#   dist_to_polyA_site <dbl>, within_polyA_site <lgl>, polyA_motif <chr>,\n#   dist_to_polyA_motif <dbl>, polyA_motif_found <lgl>, CAGE_support_100 <lgl>,\n#   CAGE_support_250 <lgl>, CAGE_support_500 <lgl>, PAS_motif_support_35 <lgl>,\n#   PAS_motif_support_50 <lgl>, PAS_motif_support_100 <lgl>,\n#   long_read_db <lgl>, and abbreviated variable names ¹​annot_transcript_id,\n#   ²​annot_gene_id, ³​annot_gene_name, ⁴​gene_novelty, ⁵​transcript_novelty, …\n\n\n\nsanity_check = whitelist_support %>% left_join(sqanti, by = c(\"annot_transcript_id\" = \"isoform\"))\nsanity_check %>% filter(within_CAGE_peak.x != within_CAGE_peak.y)\n\n# A tibble: 0 × 69\n# … with 69 variables: annot_transcript_id <chr>, annot_gene_id <chr>,\n#   annot_gene_name <chr>, gene_novelty <chr>, transcript_novelty <chr>,\n#   ISM_subtype <chr>, n_reads <dbl>, n_donors <dbl>,\n#   dist_to_CAGE_peak.x <dbl>, within_CAGE_peak.x <lgl>,\n#   dist_to_polyA_site.x <dbl>, within_polyA_site.x <lgl>, polyA_motif.x <chr>,\n#   dist_to_polyA_motif <dbl>, polyA_motif_found.x <lgl>,\n#   CAGE_support_100 <lgl>, CAGE_support_250 <lgl>, CAGE_support_500 <lgl>, …\n\nsanity_check %>% filter(is.na(within_CAGE_peak.x) & !within_CAGE_peak.y)\n\n# A tibble: 3,163 × 69\n   annot_trans…¹ annot…² annot…³ gene_…⁴ trans…⁵ ISM_s…⁶ n_reads n_don…⁷ dist_…⁸\n   <chr>         <chr>   <chr>   <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>\n 1 ENST00000070… ENSG00… PKP2    Known   Known   <NA>         NA      NA      NA\n 2 ENST00000218… ENSG00… STAG2   Known   Known   <NA>         NA      NA      NA\n 3 ENST00000238… ENSG00… ZC2HC1C Known   Known   <NA>         NA      NA      NA\n 4 ENST00000245… ENSG00… RPL23   Known   Known   <NA>         NA      NA      NA\n 5 ENST00000252… ENSG00… FUT5    Known   Known   <NA>         NA      NA      NA\n 6 ENST00000254… ENSG00… UBE2L2  Known   Known   <NA>         NA      NA      NA\n 7 ENST00000254… ENSG00… ZSWIM4  Known   Known   <NA>         NA      NA      NA\n 8 ENST00000254… ENSG00… AL3919… Known   Known   <NA>         NA      NA      NA\n 9 ENST00000261… ENSG00… FOXN3   Known   Known   <NA>         NA      NA      NA\n10 ENST00000262… ENSG00… IKZF4   Known   Known   <NA>         NA      NA      NA\n# … with 3,153 more rows, 60 more variables: within_CAGE_peak.x <lgl>,\n#   dist_to_polyA_site.x <dbl>, within_polyA_site.x <lgl>, polyA_motif.x <chr>,\n#   dist_to_polyA_motif <dbl>, polyA_motif_found.x <lgl>,\n#   CAGE_support_100 <lgl>, CAGE_support_250 <lgl>, CAGE_support_500 <lgl>,\n#   PAS_motif_support_35 <lgl>, PAS_motif_support_50 <lgl>,\n#   PAS_motif_support_100 <lgl>, long_read_db <lgl>, chrom <chr>, strand <chr>,\n#   length <dbl>, exons <dbl>, structural_category <chr>, …\n\n\n\nsupport_for_plot = cts %>% select(transcript_id, transcript_novelty) %>%\n  left_join(\n    read_csv(\"data/within_CAGE/cpvz_refTSS_200_CAGE_results.csv\") %>%\n      mutate(CAGE_support = CAGE_support == \"yes\") %>%\n      dplyr::rename(within_CAGE_refTSS = \"CAGE_support\"),\n    by = c(\"transcript_id\" = \"transcript_ID\")\n  ) %>%\n  left_join(\n    read_csv(\"data/within_CAGE/cpvz_fetal_200_CAGE_results.csv\") %>%\n      mutate(CAGE_support = CAGE_support == \"yes\") %>%\n      dplyr::rename(within_CAGE_fetal = \"CAGE_support\"),\n    by = c(\"transcript_id\" = \"transcript_ID\")\n  ) %>%\n  left_join(\n    read_csv(\"data/within_ATAC/cpvz_Greenleaf_500_ATAC_results.csv\") %>%\n      mutate(CAGE_support = CAGE_support == \"yes\") %>%\n      dplyr::rename(within_ATAC_Greenleaf = \"CAGE_support\"),\n    by = c(\"transcript_id\" = \"transcript_ID\")\n  ) %>%\n  left_join(\n    read_csv(\"data/within_ATAC/cpvz_Nowakowski_500_ATAC_results.csv\") %>%\n      mutate(CAGE_support = CAGE_support == \"yes\") %>%\n      dplyr::rename(within_ATAC_Nowakowski = \"CAGE_support\"),\n    by = c(\"transcript_id\" = \"transcript_ID\")\n  ) %>%\n  left_join(\n    read_csv(\"data/within_ATAC/cpvz_LuisCP_500_ATAC_results.csv\") %>%\n      mutate(CAGE_support = CAGE_support == \"yes\") %>%\n      dplyr::rename(within_ATAC_LuisCP = \"CAGE_support\"),\n    by = c(\"transcript_id\" = \"transcript_ID\")\n  ) %>%\n  left_join(\n    read_csv(\"data/within_ATAC/cpvz_LuisVZ_500_ATAC_results.csv\") %>%\n      mutate(CAGE_support = CAGE_support == \"yes\") %>%\n      dplyr::rename(within_ATAC_LuisGZ = \"CAGE_support\"),\n    by = c(\"transcript_id\" = \"transcript_ID\")\n  ) %>%\n  left_join(\n    sqanti %>% select(isoform, within_polyA_site, polyA_motif_found),\n    by = c(\"transcript_id\" = \"isoform\")\n  ) %>%\n  mutate(across(!c(\"transcript_id\", \"transcript_novelty\"), ~replace_na(., F)))\n\nRows: 214516 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): transcript_ID, CAGE_support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 214516 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): transcript_ID, CAGE_support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 214516 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): transcript_ID, CAGE_support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 214516 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): transcript_ID, CAGE_support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 214516 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): transcript_ID, CAGE_support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 214516 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): transcript_ID, CAGE_support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nsupport_for_plot\n\n# A tibble: 214,516 × 10\n   transcript_id trans…¹ withi…² withi…³ withi…⁴ withi…⁵ withi…⁶ withi…⁷ withi…⁸\n   <chr>         <fct>   <lgl>   <lgl>   <lgl>   <lgl>   <lgl>   <lgl>   <lgl>  \n 1 ENST00000494… Known   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE  \n 2 ENST00000424… Known   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE  \n 3 ENST00000445… Known   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE  \n 4 ENST00000457… Known   TRUE    TRUE    TRUE    TRUE    FALSE   FALSE   TRUE   \n 5 ENST00000414… Known   TRUE    FALSE   FALSE   FALSE   FALSE   FALSE   TRUE   \n 6 ENST00000655… Known   FALSE   TRUE    TRUE    TRUE    FALSE   FALSE   FALSE  \n 7 ENST00000457… Known   FALSE   TRUE    TRUE    TRUE    FALSE   FALSE   FALSE  \n 8 ENST00000591… Known   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   TRUE   \n 9 ENST00000644… Known   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE  \n10 ENST00000445… Known   TRUE    TRUE    TRUE    TRUE    FALSE   FALSE   TRUE   \n# … with 214,506 more rows, 1 more variable: polyA_motif_found <lgl>, and\n#   abbreviated variable names ¹​transcript_novelty, ²​within_CAGE_refTSS,\n#   ³​within_CAGE_fetal, ⁴​within_ATAC_Greenleaf, ⁵​within_ATAC_Nowakowski,\n#   ⁶​within_ATAC_LuisCP, ⁷​within_ATAC_LuisGZ, ⁸​within_polyA_site\n\n\n\nsupport_for_plot2 = support_for_plot %>%\n  group_by(transcript_novelty) %>%\n  summarize(\n#    any_5p = sum(within_CAGE_refTSS | within_CAGE_fetal | within_ATAC_Greenleaf | within_ATAC_Nowakowski, na.rm = T),\n    within_CAGE_peak = sum(within_CAGE_refTSS | within_CAGE_fetal, na.rm = T),\n    within_ATAC_peak = sum(within_ATAC_Greenleaf | within_ATAC_Nowakowski | within_ATAC_LuisCP | within_ATAC_LuisGZ, na.rm = T),\n#    any_3p = sum(within_polyA_site | polyA_motif_found, na.rm = T),\n    within_polyA_site = sum(within_polyA_site, na.rm = T),\n    polyA_motif_found = sum(polyA_motif_found, na.rm = T),\n    n = n()\n  ) %>%\n  pivot_longer(!c(\"transcript_novelty\", \"n\")) %>%\n  mutate(prop = value / n) %>%\n  mutate(end = if_else(name %in% c(\"within_polyA_site\", \"polyA_motif_found\", \"any_3p\"), \"3′-end support\", \"5′-end support\")) %>%\n  mutate(end = end %>% factor(levels = c(\"5′-end support\", \"3′-end support\"))) %>%\n  mutate(name = name %>% as_factor()) %>%\n  mutate(transcript_novelty = transcript_novelty %>% fct_relevel(\"Known\") %>% fct_other(drop = c(\"Antisense\", \"Intergenic\", \"Genomic\")))\nsupport_for_plot2\n\n# A tibble: 28 × 6\n   transcript_novelty     n name              value  prop end           \n   <fct>              <int> <fct>             <int> <dbl> <fct>         \n 1 ISM                83089 within_CAGE_peak  41387 0.498 5′-end support\n 2 ISM                83089 within_ATAC_peak  45668 0.550 5′-end support\n 3 ISM                83089 within_polyA_site 63833 0.768 3′-end support\n 4 ISM                83089 polyA_motif_found 65760 0.791 3′-end support\n 5 Known              65006 within_CAGE_peak  49495 0.761 5′-end support\n 6 Known              65006 within_ATAC_peak  54138 0.833 5′-end support\n 7 Known              65006 within_polyA_site 42187 0.649 3′-end support\n 8 Known              65006 polyA_motif_found 41856 0.644 3′-end support\n 9 NIC                50621 within_CAGE_peak  49442 0.977 5′-end support\n10 NIC                50621 within_ATAC_peak  49674 0.981 5′-end support\n# … with 18 more rows\n\n\n\nggplot(support_for_plot2, aes(x = prop, y = transcript_novelty, fill = fct_rev(name))) +\n  geom_col(position = \"dodge\") +\n  scale_y_discrete(limits = rev) +\n  scale_fill_manual(\n    limits = c(\"within_CAGE_peak\", \"within_ATAC_peak\", \"within_polyA_site\", \"polyA_motif_found\"),\n    labels = c(\"CAGE\", \"ATAC-seq\", \"polyA site\", \"polyA motif\"),\n    values = c(\"#00bfc4\", \"#00a9ff\", \"#c77cff\", \"#ff61cc\")\n  ) +\n  labs(\n    x = \"Proportion of transcripts\",\n    y = NULL,\n    fill = NULL\n  ) +\n  guides(\n    fill = guide_legend(ncol = 2)\n  ) +\n  theme(\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    legend.position = \"bottom\",\n    panel.spacing = unit(2, \"lines\"),\n    plot.margin = margin(11, 11, 11, 11, \"points\")\n  ) +\n  facet_wrap(vars(end))\n\n\n\n\n\n#ggsave(\"output/figures/Fig1_external_support_v8.png\", width = 11, height = 8.5, units = \"in\", dpi = 300)\nggsave(\"output/figures/Fig2/Fig2B_external_support_v2.pdf\", width = 8, height = 6, units = \"in\", dpi = 300, device=cairo_pdf)\n\n\ntableS1 = talon_gtf %>%\n  select(seqnames, start, end, strand, gene_id, gene_name, gene_status, gene_type, transcript_id, transcript_status, transcript_type) %>%\n  left_join(\n    cts %>% select(transcript_id, gene_novelty, transcript_novelty, ISM_subtype, n_exons, length),\n    by = \"transcript_id\"\n  ) %>%\n  left_join(\n    support_for_plot,\n    by = c(\"transcript_id\", \"transcript_novelty\")\n  ) %>%\n#  dplyr::rename(gencode_gene_type = \"gene_type\", gencode_transcript_type = \"transcript_type\") %>%\n  relocate(gene_novelty, .after = gene_type) %>%\n  mutate(\n    within_CAGE_peak = within_CAGE_refTSS | within_CAGE_fetal,\n    within_ATAC_peak = within_ATAC_Greenleaf | within_ATAC_Nowakowski | within_ATAC_LuisCP | within_ATAC_LuisGZ,\n    .keep = \"unused\",\n    .before = within_polyA_site\n  )\ntableS1\n\n# A tibble: 214,516 × 20\n   seqnames start   end strand gene_id   gene_…¹ gene_…² gene_…³ gene_…⁴ trans…⁵\n   <fct>    <int> <int> <fct>  <chr>     <chr>   <chr>   <chr>   <fct>   <chr>  \n 1 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 2 chr1     14404 21859 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 3 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 4 chr1     14404 21119 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 5 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 6 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 7 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 8 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n 9 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n10 chr1     14404 29570 -      ENSG0000… WASH7P  KNOWN   unproc… Known   TALONT…\n# … with 214,506 more rows, 10 more variables: transcript_status <chr>,\n#   transcript_type <chr>, transcript_novelty <fct>, ISM_subtype <fct>,\n#   n_exons <dbl>, length <dbl>, within_CAGE_peak <lgl>,\n#   within_ATAC_peak <lgl>, within_polyA_site <lgl>, polyA_motif_found <lgl>,\n#   and abbreviated variable names ¹​gene_name, ²​gene_status, ³​gene_type,\n#   ⁴​gene_novelty, ⁵​transcript_id\n\n\n\ntableS1 %>%\n  write_tsv(\"output/tables/TableS1_v5.tsv.gz\")\n\nNumbers for manuscript text:\n\ntableS1 %>% count(transcript_status)\n\n# A tibble: 2 × 2\n  transcript_status      n\n  <chr>              <int>\n1 KNOWN              65006\n2 NOVEL             149510\n\ntableS1Novel1 = tableS1 %>%\n  filter(transcript_novelty %in% c(\"NIC\", \"NNC\"))\n\ntableS1Novel1 %>%\n  summarize(n = n(), n_genes = n_distinct(gene_id))\n\n# A tibble: 1 × 2\n      n n_genes\n  <int>   <int>\n1 65184   10175\n\ntableS1Novel2 = tableS1 %>%\n  filter(transcript_novelty %in% c(\"NIC\", \"NNC\", \"ISM\"))\n\ntableS1Novel2 %>%\n  count(within_CAGE_peak, within_ATAC_peak) %>%\n  mutate(prop = n/nrow(tableS1Novel2))\n\n# A tibble: 4 × 4\n  within_CAGE_peak within_ATAC_peak     n   prop\n  <lgl>            <lgl>            <int>  <dbl>\n1 FALSE            FALSE            28580 0.193 \n2 FALSE            TRUE             15183 0.102 \n3 TRUE             FALSE            10204 0.0688\n4 TRUE             TRUE             94306 0.636 \n\ntableS1Novel2 %>% count(within_CAGE_peak) %>% mutate(prop = n/nrow(tableS1Novel2))\n\n# A tibble: 2 × 3\n  within_CAGE_peak      n  prop\n  <lgl>             <int> <dbl>\n1 FALSE             43763 0.295\n2 TRUE             104510 0.705\n\ntableS1Novel2 %>% count(within_ATAC_peak) %>% mutate(prop = n/nrow(tableS1Novel2))\n\n# A tibble: 2 × 3\n  within_ATAC_peak      n  prop\n  <lgl>             <int> <dbl>\n1 FALSE             38784 0.262\n2 TRUE             109489 0.738\n\ntableS1Novel2 %>%\n  count(within_polyA_site, polyA_motif_found) %>%\n  mutate(prop = n/nrow(tableS1Novel2))\n\n# A tibble: 4 × 4\n  within_polyA_site polyA_motif_found      n   prop\n  <lgl>             <lgl>              <int>  <dbl>\n1 FALSE             FALSE              13342 0.0900\n2 FALSE             TRUE               13429 0.0906\n3 TRUE              FALSE              12279 0.0828\n4 TRUE              TRUE              109223 0.737 \n\ntableS1 %>%\n  filter(transcript_novelty %in% c(\"Known\", \"ISM\")) %>%\n  count(transcript_novelty, within_polyA_site | polyA_motif_found)\n\n# A tibble: 4 × 3\n  transcript_novelty `within_polyA_site | polyA_motif_found`     n\n  <fct>              <lgl>                                   <int>\n1 ISM                FALSE                                    9997\n2 ISM                TRUE                                    73092\n3 Known              FALSE                                   15470\n4 Known              TRUE                                    49536\n\n\nSplice junctions from SQANTI:\n\nsqantiJunc = read_tsv(\"data/sqanti/cp_vz_0.75_min_7_recovery_talon_junctions.txt.gz\")\n\nRows: 1901871 Columns: 24\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (10): isoform, chrom, strand, junction_number, transcript_coord, junctio...\ndbl  (9): genomic_start_coord, genomic_end_coord, diff_to_Ref_start_site, di...\nlgl  (5): bite_junction, RTS_junction, indel_near_junct, phyloP_start, phylo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nuniqueJunc = sqantiJunc %>%\n  group_by(chrom, strand, genomic_start_coord, genomic_end_coord) %>%\n  summarize(\n    n = sum(intropolis.v1.hg19.tsv.min_count_10_unique),\n    intropolis_support = n > 0,\n    novel = all(junction_category == \"novel\"),\n    canonical = all(canonical == \"canonical\"),\n    .groups = \"drop\"\n  )\n\nuniqueJunc %>% count(intropolis_support) %>% mutate(prop = n/nrow(uniqueJunc))\n\n# A tibble: 2 × 3\n  intropolis_support      n   prop\n  <lgl>               <int>  <dbl>\n1 FALSE               10896 0.0471\n2 TRUE               220360 0.953 \n\nuniqueJunc %>% count(novel) %>% mutate(prop = n/nrow(uniqueJunc))\n\n# A tibble: 2 × 3\n  novel      n  prop\n  <lgl>  <int> <dbl>\n1 FALSE 193141 0.835\n2 TRUE   38115 0.165\n\nuniqueJunc %>% filter(novel) %>% count(intropolis_support) %>% mutate(prop = n/nrow(uniqueJunc %>% filter(novel)))\n\n# A tibble: 2 × 3\n  intropolis_support     n  prop\n  <lgl>              <int> <dbl>\n1 FALSE               9862 0.259\n2 TRUE               28253 0.741\n\n\nProblematic spliceJns.txt gives us 57.5% novel SJs:\n\ngencodeJuncOld = read_tsv(\"data/splice_junctions/spliceJns.problematic.txt\", col_names = c(\"chrom\", \"genomic_start_coord\", \"genomic_end_coord\", \"strand\")) %>%\n  select(!starts_with(\"X\")) %>%\n  mutate(strand = case_when(strand == 1 ~ \"+\", strand == 2 ~ \"-\")) %>%\n  mutate(novel2 = FALSE)\n\nRows: 474236 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): chrom\ndbl (5): genomic_start_coord, genomic_end_coord, strand, X5, X6\nlgl (3): X7, X8, X9\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nuniqueJunc2 = uniqueJunc %>% left_join(gencodeJuncOld) %>% mutate(novel2 = replace_na(novel2, TRUE))\n\nJoining with `by = join_by(chrom, strand, genomic_start_coord,\ngenomic_end_coord)`\n\nuniqueJunc2 %>% count(novel2) %>% mutate(prop = n/nrow(uniqueJunc2))\n\n# A tibble: 2 × 3\n  novel2      n  prop\n  <lgl>   <int> <dbl>\n1 FALSE   98334 0.425\n2 TRUE   132922 0.575\n\n\nUpdated spliceJns.txt agrees with SQANTI:\n\ngencodeJunc = read_tsv(\"data/splice_junctions/spliceJns.exon_reorder.txt\", col_names = c(\"chrom\", \"genomic_start_coord\", \"genomic_end_coord\", \"strand\")) %>%\n  select(!starts_with(\"X\")) %>%\n  mutate(strand = case_when(strand == 1 ~ \"+\", strand == 2 ~ \"-\")) %>%\n  mutate(novel2 = FALSE)\n\nRows: 383616 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): chrom\ndbl (5): genomic_start_coord, genomic_end_coord, strand, X5, X6\nlgl (3): X7, X8, X9\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nuniqueJunc2 = uniqueJunc %>% left_join(gencodeJunc) %>% mutate(novel2 = replace_na(novel2, TRUE))\n\nJoining with `by = join_by(chrom, strand, genomic_start_coord,\ngenomic_end_coord)`\n\nuniqueJunc2 %>% count(novel2) %>% mutate(prop = n/nrow(uniqueJunc2))\n\n# A tibble: 2 × 3\n  novel2      n  prop\n  <lgl>   <int> <dbl>\n1 FALSE  192904 0.834\n2 TRUE    38352 0.166\n\n\nJoining with intropolis junctions also agrees with SQANTI:\n\nintropJunc = read_tsv(\"ref/intropolis/intropolis_v1_hg19_2samples_10counts_starSJout.tsv.gz\", col_names = c(\"chrom\", \"genomic_start_coord\", \"genomic_end_coord\", \"strand\")) %>%\n  select(!starts_with(\"X\")) %>%\n  mutate(strand = case_when(strand == 1 ~ \"+\", strand == 2 ~ \"-\")) %>%\n  mutate(intropolis_support2 = TRUE)\n\nRows: 4974342 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): chrom\ndbl (8): genomic_start_coord, genomic_end_coord, strand, X5, X6, X7, X8, X9\nlgl (1): X10\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nuniqueJunc2 = uniqueJunc %>%\n  left_join(intropJunc) %>%\n  mutate(intropolis_support2 = replace_na(intropolis_support2, FALSE))\n\nJoining with `by = join_by(chrom, strand, genomic_start_coord,\ngenomic_end_coord)`\n\nuniqueJunc2 %>% count(intropolis_support2) %>% mutate(prop = n/nrow(uniqueJunc2))\n\n# A tibble: 2 × 3\n  intropolis_support2      n   prop\n  <lgl>                <int>  <dbl>\n1 FALSE                10897 0.0471\n2 TRUE                220359 0.953"
  },
  {
    "objectID": "analysis/Figure2_isoFraction.html",
    "href": "analysis/Figure2_isoFraction.html",
    "title": "Figure 2 - Isoform Fraction analysis",
    "section": "",
    "text": "Rows: 214516 Columns: 35\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (7): annot_gene_id, annot_transcript_id, annot_gene_name, annot_transcr...\ndbl (28): gene_ID, transcript_ID, n_exons, length, 209_1_VZ, 209_2_VZ, 209_3...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "analysis/Figure2_isoFraction.html#get-average-gene-expression-and-isoform-number",
    "href": "analysis/Figure2_isoFraction.html#get-average-gene-expression-and-isoform-number",
    "title": "Figure 2 - Isoform Fraction analysis",
    "section": "Get average gene expression and isoform number",
    "text": "Get average gene expression and isoform number\n\ngenes = cts %>% dplyr::select(annot_gene_id, annot_transcript_id,annot_gene_name) %>% group_by(annot_gene_id) %>% summarise(numIso=n_distinct(annot_transcript_id))\n\ncountMat = as.matrix(cts.collapse[,9:14])\ncs = colSums(countMat) / 1000000 ## TPM normalize\ncountMat.tpm = t(apply(countMat, 1, function(x) { x / cs}))\nisoTPM = data.frame(annot_gene_id = cts$annot_gene_id, annot_transcript_id = cts$annot_transcript_id, isoTPM=rowMeans(countMat.tpm))\n\ngenes <- genes %>% left_join(isoTPM %>% group_by(annot_gene_id) %>% summarise(geneTPM = log2(.1 + mean(isoTPM))))\n\nJoining with `by = join_by(annot_gene_id)`"
  },
  {
    "objectID": "analysis/Figure2_isoFraction.html#treeplot",
    "href": "analysis/Figure2_isoFraction.html#treeplot",
    "title": "Figure 2 - Isoform Fraction analysis",
    "section": "TreePlot",
    "text": "TreePlot\n\nlibrary(treemapify)\n\ndf_treemap = cts  %>% dplyr::select(Gene=annot_gene_name, Isoform=annot_transcript_name, novelty2, counts) %>% filter(Gene%in% c(\"TBR1\",\"SATB2\", \"SOX5\", \"SOX2\", \"EOMES\", \"DLX1\",\"POU3F2\", \"HOPX\", \"HES1\", \"RBFOX2\"))\n\n\nggplot(df_treemap, aes(area=counts, fill=Gene, label=Isoform, alpha=(novelty2==\"Known\"), subgroup=Gene)) + \n  geom_treemap() +geom_treemap_subgroup_border(colour = \"black\", size = 5, alpha=1) +\n  geom_treemap_subgroup_text(place = \"centre\", grow = TRUE,\n                             alpha = 0.95, colour = \"black\",\n                             fontface = \"italic\") +\n  geom_treemap_text(colour = \"white\", place = \"top\", alpha=.5,\n                    size = 15, grow = F)+   theme(legend.position = \"none\")\n\nWarning: Using alpha for a discrete variable is not advised.\n\n\n\n\ndf_treemap = cts  %>% dplyr::select(Gene=annot_gene_name, Isoform=annot_transcript_name, novelty2, counts) %>% filter(Gene%in% c(\"SCN2A\", \"CHD8\", \"SYNGAP1\", \"ADNP\", \"PTEN\", \"FOXP1\", \"CHD2\", \"POGZ\", \"GRIN2B\", \"KTM5B\", \"ARID1B\", \"ASH1L\"))\n\n\nFig5_ASDtreeplot = ggplot(df_treemap, aes(area=counts, fill=Gene, label=Isoform, alpha=(novelty2==\"Known\"), subgroup=Gene)) + \n  geom_treemap() +geom_treemap_subgroup_border(colour = \"black\", size = 2, alpha=1) +\n  geom_treemap_subgroup_text(place = \"centre\", grow = F,\n                             alpha = 0.95, colour = \"black\",\n                             fontface = \"italic\") +\n  geom_treemap_text(colour = \"grey\", place = \"top\", alpha=.5,\n                    size = 15, grow = F)+   theme(legend.position = \"none\") + \n  scale_fill_brewer(palette = 'Paired')\n\nggsave(Fig5_ASDtreeplot, file=\"output/figures/Fig5/Fig5_ASDtreeplot.pdf\",width=5,height=3)\n\nWarning: Using alpha for a discrete variable is not advised."
  },
  {
    "objectID": "analysis/Figure2_novel_exons.html",
    "href": "analysis/Figure2_novel_exons.html",
    "title": "Figure 2 - Novel Exons",
    "section": "",
    "text": "options(stringsAsFactors = F)\noptions(ucscChromosomeNames = F)\n\nsuppressMessages({\n  library(data.table)\n  library(tidyverse)\n  library(rtracklayer)\n  library(GenomicFeatures)\n  library(GenomicRanges)\n  library(plyranges)\n#  devtools::install_github(\"mskilab/gUtils\")\n  library(gUtils)\n\n})\n\ncolorVector = c(\n  \"Known\" = \"#009E73\",\n  \"ISM\"   = \"#0072B2\",\n  \"ISM_Prefix\" = \"#005996\",\n  \"ISM_Suffix\" = \"#378bcc\",\n  \"NIC\"   = \"#D55E00\",\n  \"NNC\"   = \"#E69F00\",\n  \"Other\" = \"#000000\"\n)\ncolorVector_ismSplit = colorVector[-2]\n\n # Gencode v33 Annotations\n  gencode=\"ref/gencode.v33lift37.annotation.gtf.gz\"\n  gr.gencode = rtracklayer::import(gencode)\n  #txdb.gencode = makeTxDbFromGRanges(gr.gencode)\n\n  # Isoseq Annotations\n  isoseq=\"data/cp_vz_0.75_min_7_recovery_talon.gtf.gz\"\n  gr.isoseq = rtracklayer::import(isoseq)\n  #txdb.isoseq = makeTxDbFromGRanges(gr.isoseq)"
  },
  {
    "objectID": "analysis/Figure2_novel_exons.html#ashoks-code-using-bash-and-bedtools",
    "href": "analysis/Figure2_novel_exons.html#ashoks-code-using-bash-and-bedtools",
    "title": "Figure 2 - Novel Exons",
    "section": "Ashok’s code using bash and bedtools",
    "text": "Ashok’s code using bash and bedtools\n\n\ngzcat ref/gencode.v33lift37.annotation.gtf.gz | awk '{if($3==\"exon\") { for(i=1;i<=NF;i++)if($i~/(exon_id)/){ print $1\"\\t\"$4\"\\t\"$5\"\\t\"$7\"\\t\"$16\"\\t\"$i\"\\t\"$(i+1)}}}' |  sed 's/[\";]//g' | awk '{print $1\"\\t\"$2\"\\t\"$3\"\\t\"$5\"_\"$6\"_\"$7\"\\t\"\"1000\"\"\\t\"$4}' | awk '!seen[$0]++' > data/working/novel_exons/All_Gencode_Exon.bed\n\ngzcat data/cp_vz_0.75_min_7_recovery_talon.gtf.gz | awk '{if($3==\"exon\") { for(i=1;i<=NF;i++)if($i~/(exon_status|talon_exon|gene_name)/){ printf \"%s%s\",(!c++? \"\":FS),$i\"\\t\"$(i+ 1)  }; print \"\\t\"$1\"\\t\"$4\"\\t\"$5\"\\t\"$7; c=0 }\n}' | sed 's/[\";]//g' | awk '{if($6==\"NOVEL\") print $7\"\\t\"$8\"\\t\"$9\"\\t\"$2\"_\"$3\"_\"$4\"\\t\"\"1000\"\"\\t\"$NF}' | awk '!seen[$0]++' > data/working/novel_exons/All_Novel_Exon.bed\n\nbedtools intersect -a data/working/novel_exons/All_Novel_Exon.bed -b data/working/novel_exons/All_Gencode_Exon.bed -v > data/working/novel_exons/No_genecode_ovelap_novel_exon.bed\n\nsort -k 1,1 -k2,2n  data/working/novel_exons/All_Novel_Exon.bed > data/working/novel_exons/All_Novel_Exon_sorted.bed\nsort -k 1,1 -k2,2n  data/working/novel_exons/All_Gencode_Exon.bed > data/working/novel_exons/All_Gencode_Exon_sorted.bed\n\n\nbedtools multiinter -header -names Novel Gencode -i data/working/novel_exons/All_Novel_Exon_sorted.bed data/working/novel_exons/All_Gencode_Exon_sorted.bed > data/working/novel_exons/bulk_NewCoding.txt\n\n***** WARNING: File data/working/novel_exons/All_Novel_Exon.bed has inconsistent naming convention for record:\nGL000204.1  56744   57007   TALONG000062493_talon_exon_1018404  1000    -\n\n***** WARNING: File data/working/novel_exons/All_Novel_Exon.bed has inconsistent naming convention for record:\nGL000204.1  56744   57007   TALONG000062493_talon_exon_1018404  1000    -\n\n\n#Mike’s code using R\n\n#How many distinct GENCODE exons?\n  exons.gencode_unique = gr.gencode %>% as_tibble() %>% filter(type=='exon') %>%\n    dplyr::select(seqnames, start, end, exon_id)\n  exons.gencode_unique$seqnames=as.character(exons.gencode_unique$seqnames)\n  length(unique(exons.gencode_unique$exon_id)) #748355 unique exon IDs in gencode\n\n[1] 748355\n\n  exons.gencode_unique$coord = paste0(exons.gencode_unique$seqnames, \":\", exons.gencode_unique$start, \"-\", exons.gencode_unique$end)\n  length(unique(exons.gencode_unique$coord)) #634758 unique chr-start-stop in gencode\n\n[1] 634758\n\n  exons.gencode = unique(gr.gencode[gr.gencode$type=='exon',])\n  length(exons.gencode)\n\n[1] 634771\n\n  ashok.gencode= read.table(\"data/working/novel_exons/All_Gencode_Exon_sorted.bed\")\n  dim(ashok.gencode) # 750284 in Ashok's bed file\n\n[1] 750284      6\n\n  # How many distinct IsoSeq exons? ~83k\n    exons.isoseq_unique = gr.isoseq %>% as_tibble() %>% filter(type=='exon',exon_status==\"NOVEL\") %>% dplyr::select(seqnames, start, end, exon_id) %>% mutate(coord=paste0(as.character(seqnames), \":\", start, \"-\", end))\n  length(unique(exons.isoseq_unique$exon_id)) #334861 by exon_ID in Talon\n\n[1] 82882\n\n  length(unique(exons.isoseq_unique$coord)) #334774 by coordinates\n\n[1] 82850\n\n   ashok.isoseq = read.table(\"data/working/novel_exons/All_Novel_Exon.bed\")\n  dim(ashok.isoseq) #83153 in Ashok's bed file\n\n[1] 83153     6\n\n  exons.isoseq = unique(gr.isoseq[gr.isoseq$type==\"exon\",])\n  \n  \n  # Find compltely non-overlapping exons\n  ## Used two methods, both give 7039 unique exons in TALON not overlapping in Gencode -- from 3549 genes\n  novel <- exons.isoseq %>% filter_by_non_overlaps(exons.gencode, minoverlap = 2L) %>% filter(grepl(\"chr\", seqnames))\n  \n  length(novel) #7039 novel exons\n\n[1] 7039\n\n  length(unique(novel$gene_id)) #3551 genes with novel exons\n\n[1] 3551\n\n  sum(width(novel %>% reduce_ranges())) #3849462 bp --> 3.85MB of novel exons\n\n[1] 3849462\n\n  novel2 = subsetByOverlaps(exons.isoseq, exons.gencode,invert = T,type='any',ignore.strand=T, minoverlap = 2L)\n  novel2 = novel2[grepl('chr',seqnames(novel2))]\n  length(unique(novel2$gene_name))\n\n[1] 3549\n\n  these_novel = novel2 %>% as_tibble()\n  \n  write.csv(these_novel, file=\"data/working/novel_exons/mike_novel.csv\")\n \n  ## Write GTF for novel exons, and control (strand flipped exons)\n   export(novel2,\"data/working/novel_exons/novel_exons_mike.gff\",format = \"gff\")\n    export(gr.flipstrand(novel2),\"data/working/novel_exons/novel_exons_strandflip_mike.gff\",format = \"gff\")\n   \n  \n   \n  ashok.novel =  read.table(\"data/working/novel_exons/No_genecode_ovelap_novel_exon.bed\")\n  ashok.novel = ashok.novel[grepl(\"chr\",ashok.novel$V1),]\n  dim(ashok.novel) # Ashok gets 7041 isoforms in 3542 genes\n\n[1] 7041    6\n\n  ashok.novel.genes = unique(unlist(lapply(strsplit(ashok.novel$V4, \"_\"),'[',1)))\n  \n  length(intersect(ashok.novel.genes, novel2$gene_name))\n\n[1] 3539\n\n  ashok.novel.genes[!ashok.novel.genes %in% novel2$gene_name]\n\n[1] \"SLC35A1\"    \"PPP1R32\"    \"AC007262.2\"\n\n  novel2$gene_name[!novel2$gene_name %in% ashok.novel.genes]\n\n [1] \"PINK1\"           \"ERI3\"            \"RBM5\"            \"B3GALNT1\"       \n [5] \"PDK4\"            \"SMARCD3\"         \"RBM17\"           \"ABLIM1\"         \n [9] \"DDB1\"            \"TALONG000089386\"\n\n\n\nthese_novel %>% head()\n\n# A tibble: 6 × 54\n  seqnames  start    end width strand source type  score phase gene_id   gene_…¹\n  <fct>     <int>  <int> <int> <fct>  <fct>  <fct> <dbl> <int> <chr>     <chr>  \n1 chr1      18913  19139   227 -      TALON  exon     NA    NA ENSG0000… WASH7P \n2 chr1      18913  20286  1374 -      TALON  exon     NA    NA ENSG0000… WASH7P \n3 chr1      18913  21119  2207 -      TALON  exon     NA    NA ENSG0000… WASH7P \n4 chr1      18913  20960  2048 -      TALON  exon     NA    NA ENSG0000… WASH7P \n5 chr1      18913  19416   504 -      TALON  exon     NA    NA ENSG0000… WASH7P \n6 chr1     840675 841059   385 +      TALON  exon     NA    NA ENSG0000… AL6456…\n# … with 43 more variables: gene_status <chr>, gene_type <chr>,\n#   talon_gene <chr>, havana_gene <chr>, hgnc_id <chr>, level <chr>,\n#   remap_num_mappings <chr>, remap_status <chr>, remap_target_status <chr>,\n#   transcript_id <chr>, transcript_status <chr>, transcript_name <chr>,\n#   talon_transcript <chr>, NNC_transcript <chr>, exon_number <chr>,\n#   exon_id <chr>, talon_exon <chr>, exon_status <chr>, ont <chr>,\n#   remap_original_location <chr>, source.1 <chr>, tag <chr>, …\n\nthese_novel$protein_coding = these_novel$gene_type==\"protein_coding\"\nthese_novel$protein_coding[is.na(these_novel$protein_coding)] = F\nthese_novel$protein_coding = factor(these_novel$protein_coding, levels=c(TRUE,FALSE))\nFig2_exonWidth = ggplot(these_novel, aes(x=width,fill=protein_coding)) + geom_histogram(alpha=.5) + scale_x_log10(limits=c(10,10000))  + theme_bw() +\n  labs(x=\"Novel exon width (bp)\")\nFig2_exonWidth\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 62 rows containing non-finite values (`stat_bin()`).\n\n\nWarning: Removed 4 rows containing missing values (`geom_bar()`).\n\n\n\n\nggsave(Fig2_exonWidth, file=\"output/figures/Fig2/Fig2_exonWidth.pdf\",width=4,height=3)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 62 rows containing non-finite values (`stat_bin()`).\nRemoved 4 rows containing missing values (`geom_bar()`)."
  },
  {
    "objectID": "analysis/Figure2_plotNovelGenes.html",
    "href": "analysis/Figure2_plotNovelGenes.html",
    "title": "Figure 2 - Plot Novel Genes",
    "section": "",
    "text": "options(stringsAsFactors = F)\noptions(ucscChromosomeNames = F)\n\nsuppressMessages({\n  library(data.table)\n  library(tidyverse)\n  library(IsoformSwitchAnalyzeR)\n  library(rtracklayer)\n  library(ggrepel)\n  library(scales)\n  library(GenomicFeatures)\n  library(GenomicRanges)\n  library(GenomicInteractions)\n  library(Gviz)\n  library(ggtranscript)\n\n\n})\n\ncolorVector = c(\n  \"Known\" = \"#009E73\",\n  \"ISM\"   = \"#0072B2\",\n  \"ISM_Prefix\" = \"#005996\",\n  \"ISM_Suffix\" = \"#378bcc\",\n  \"NIC\"   = \"#D55E00\",\n  \"NNC\"   = \"#E69F00\",\n  \"Other\" = \"#000000\"\n)\ncolorVector_ismSplit = colorVector[-2]\n\n\nif(!file.exists('data/working/locusPlot_workingData.RData')) {\n  \n  # CAGE tracks\n  cage=AnnotationTrack(range = \"ref/CAGE/hg19.cage_peak_phase1and2combined_coord.bed\",\n                       background.panel = \"#99d8c9\",\n                       fill=\"#fc9272\",\n                       name = \"CAGE peaks\",\n                       col.line=\"#99d8c9\",\n                       background.title=\"#2ca25f\",\n                       fontcolor.title=\"black\")\n  \n  # Intropolis junctions\n  jc=read.delim(\"ref/intropolis/intropolis_v1_hg19_2samples_10counts_starSJout.tsv.gz\",header = F)\n  jc= jc[jc$V7>100,]\n  anchor.one = GRanges(jc$V1, IRanges(jc$V2 + 1, width=5))\n  anchor.two = GRanges(jc$V1, IRanges(jc$V3, width=5))\n  interaction_counts = log2(jc$V7)\n  \n  jc_object=GenomicInteractions(anchor.one,anchor.two,interaction_counts)\n  jc_track=InteractionTrack(jc_object,name = \"Intropolis junctions\")\n  displayPars(jc_track)=list(background.panel = \"#fee0d2\",\n                             col.interactions =\"#6a51a3\", #\"#43a2ca\",\n                             col.anchors.line = \"gray\",\n                             col.anchors.line = \"gray\",\n                             lwd=0.6,\n                             fontcolor.title=\"black\",\n                             background.title=\"#de2d26\",\n                             plot.outside = FALSE)\n  \n  # Gencode v33 Annotations\n  gencode=\"ref/gencode.v33lift37.annotation.gtf.gz\"\n  gencode_txdb=makeTxDbFromGFF(gencode, format=\"gtf\")\n  gencode_transcript=exonsBy(gencode_txdb,by=\"tx\",use.names=T)\n  gr.gencode = rtracklayer::import(gencode) %>% as_tibble()\n  \n  # Isoseq Annotations\n  isoseq=\"data/sqanti/cp_vz_0.75_min_7_recovery_talon_corrected.gtf.cds.gff.gz\"\n  isoseq_txdb=makeTxDbFromGFF(isoseq, format=\"gtf\")\n  isoseq_transcript=exonsBy(isoseq_txdb,by=\"tx\",use.names=T)\n  gr.isoseq = rtracklayer::import(isoseq) %>% as_tibble()\n  \n  cts = read_table(\"data/cp_vz_0.75_min_7_recovery_talon_abundance_filtered.tsv.gz\")\ncts$novelty2 = as.character(cts$transcript_novelty)\ncts$novelty2[which(cts$novelty2==\"ISM\" & cts$ISM_subtype==\"Prefix\")] = \"ISM_Prefix\"\ncts$novelty2[which(cts$novelty2==\"ISM\" & cts$ISM_subtype==\"Suffix\")] = \"ISM_Suffix\"\ncts$novelty2[cts$novelty2 %in% c(\"Antisense\", \"Genomic\", \"Intergenic\", \"ISM\")] = \"Other\"\ncts$novelty2 = factor(cts$novelty2,levels=c(\"Known\", \"ISM_Prefix\", \"ISM_Suffix\", \"NIC\", \"NNC\", \"Other\"))\ncts$counts = rowSums(cts[,c(12:35)])\ncts$cpm = cts$counts / (sum(cts$counts)/1000000)\n\ngr.isoseq.old = gr.isoseq\n\ngr.isoseq <- gr.isoseq.old %>% left_join(cts, by=c(\"transcript_id\" = \"annot_transcript_id\"))\n\n  save.image('data/working/locusPlot_workingData.RData')\n\n} else {\n  load('data/working/locusPlot_workingData.RData')\n}\n\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... \n\n\nWarning in .get_cds_IDX(mcols0$type, mcols0$phase): The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\n\n\nWarning in .reject_transcripts(bad_tx, because): The following transcripts were dropped because they have incompatible\n  CDS and stop codons: ENST00000422803.2_2, ENST00000618549.1_2,\n  ENST00000619291.4_2, ENST00000621077.1_2, ENST00000621229.1_2,\n  ENST00000631326.2_2\n\n\nOK\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... \n\n\nWarning in .get_cds_IDX(mcols0$type, mcols0$phase): some CDS phases are missing\nor not between 0 and 2\n\n\nOK\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  .default = col_double(),\n  annot_gene_id = col_character(),\n  annot_transcript_id = col_character(),\n  annot_gene_name = col_character(),\n  annot_transcript_name = col_character(),\n  gene_novelty = col_character(),\n  transcript_novelty = col_character(),\n  ISM_subtype = col_character()\n)\nℹ Use `spec()` for the full column specifications."
  },
  {
    "objectID": "analysis/Figure2_plotNovelGenes.html#find-novel-intergenic-genes",
    "href": "analysis/Figure2_plotNovelGenes.html#find-novel-intergenic-genes",
    "title": "Figure 2 - Plot Novel Genes",
    "section": "Find Novel Intergenic Genes",
    "text": "Find Novel Intergenic Genes\n\n\n.\n Antisense Intergenic      Known \n       413        310     213793 \n\n\n[[1]]\n\n\n\n[[2]]\n\n\n\n[[3]]\n\n\n\n[[4]]\n\n\n\n[[5]]\n\n\n\n[[6]]\n\n\n\n[[7]]\n\n\n\n[[8]]\n\n\n\n[[9]]\n\n\n\n[[10]]\n\n\n\n[[11]]\n\n\n\n[[12]]\n\n\n\n[[13]]\n\n\n\n[[14]]\n\n\n\n[[15]]\n\n\n\n[[16]]\n\n\n\n[[17]]\n\n\n\n[[18]]\n\n\n\n[[19]]\n\n\n\n[[20]]\n\n\n\n[[21]]\n\n\n\n[[22]]\n\n\n\n[[23]]\n\n\n\n[[24]]\n\n\n\n[[25]]\n\n\n\n[[26]]\n\n\n\n[[27]]\n\n\n\n[[28]]\n\n\n\n[[29]]\n\n\n\n[[30]]\n\n\n\n[[31]]\n\n\n\n[[32]]\n\n\n\n[[33]]\n\n\n\n[[34]]\n\n\n\n[[35]]\n\n\n\n[[36]]\n\n\n\n[[37]]\n\n\n\n[[38]]\n\n\n\n[[39]]\n\n\n\n[[40]]\n\n\n\n[[41]]\n\n\n\n[[42]]\n\n\n\n[[43]]\n\n\n\n[[44]]\n\n\n\n[[45]]\n\n\n\n[[46]]\n\n\n\n[[47]]\n\n\n\n[[48]]\n\n\n\n[[49]]\n\n\n\n[[50]]\n\n\n\n[[51]]\n\n\n\n[[52]]\n\n\n\n[[53]]\n\n\n\n[[54]]\n\n\n\n[[55]]\n\n\n\n[[56]]\n\n\n\n[[57]]\n\n\n\n[[58]]\n\n\n\n[[59]]\n\n\n\n[[60]]\n\n\n\n[[61]]\n\n\n\n[[62]]\n\n\nquartz_off_screen \n                2"
  },
  {
    "objectID": "analysis/Figure2_plotNovelGenes.html#plot-antisense-genes",
    "href": "analysis/Figure2_plotNovelGenes.html#plot-antisense-genes",
    "title": "Figure 2 - Plot Novel Genes",
    "section": "Plot antisense genes",
    "text": "Plot antisense genes\n\n\n[1] 0\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n[1] 11\n[1] 12\n[1] 13\n[1] 14\n[1] 15\n[1] 16\n[1] 17\n[1] 18\n[1] 19\n[1] 20\n[1] 21\n[1] 22\n[1] 23\n[1] 24\n[1] 25\n[1] 26\n[1] 27\n[1] 28\n[1] 29\n[1] 30\n[1] 31\n[1] 32\n[1] 33\n[1] 34\n[1] 35\n[1] 36\n[1] 37\n[1] 38\n[1] 39\n[1] 40\n[1] 41\n[1] 42\n[1] 43\n[1] 44\n[1] 45\n[1] 46\n[1] 47\n[1] 48\n[1] 49\n[1] 50\n[1] 51\n[1] 52\n[1] 53\n[1] 54\n[1] 55\n[1] 56\n[1] 57\n[1] 58\n[1] 59\n[1] 60\n[1] 61\n[1] 62\n[1] 63\n[1] 64\n[1] 65\n[1] 66\n[1] 67\n[1] 68\n[1] 69\n[1] 70\n[1] 71\n[1] 72\n[1] 73\n[1] 74\n[1] 75\n[1] 76\n[1] 77\n[1] 78\n[1] 79\n[1] 80\n[1] 81\n[1] 82\n[1] 83\n[1] 84\n[1] 85\n[1] 86\n[1] 87\n[1] 88\n[1] 89\n[1] 90\n[1] 91\n[1] 92\n[1] 93\n[1] 94\n[1] 95\n[1] 96\n[1] 97\n[1] 98\n[1] 99\n[1] 100\n[1] 101\n[1] 102\n[1] 103\n[1] 104\n[1] 105\n[1] 106\n[1] 107\n[1] 108\n[1] 109\n[1] 110\n[1] 111\n[1] 112\n[1] 113\n[1] 114\n[1] 115\n[1] 116\n[1] 117\n[1] 118\n[1] 119\n[1] 120\n[1] 121\n[1] 122\n[1] 123\n[1] 124\n[1] 125\n[1] 126\n[1] 127\n[1] 128\n[1] 129\n[1] 130\n[1] 131\n[1] 132\n[1] 133\n[1] 134\n[1] 135\n[1] 136\n[1] 137\n[1] 138\n[1] 139\n[1] 140\n[1] 141\n[1] 142\n[1] 143\n[1] 144\n[1] 145\n[1] 146\n[1] 147\n[1] 148\n[1] 149\n[1] 150\n[1] 151\n[1] 152\n[1] 153\n[1] 154\n[1] 155\n[1] 156\n[1] 157\n[1] 158\n[1] 159\n[1] 160\n[1] 161\n[1] 162\n[1] 163\n[1] 164\n[1] 165\n[1] 166\n[1] 167\n[1] 168\n[1] 169\n[1] 170\n[1] 171\n[1] 172\n[1] 173\n[1] 174\n[1] 175\n[1] 176\n[1] 177\n[1] 178\n[1] 179\n[1] 180\n[1] 181\n[1] 182\n[1] 183\n[1] 184\n[1] 185\n[1] 186\n[1] 187\n[1] 188\n[1] 189\n[1] 190\n[1] 191\n[1] 192\n[1] 193\n[1] 194\n[1] 195\n[1] 196\n[1] 197\n[1] 198\n[1] 199\n[1] 200\n[1] 201\n[1] 202\n[1] 203\n[1] 204\n[1] 205\n[1] 206\n[1] 207\n[1] 208\n[1] 209\n[1] 210\n[1] 211\n[1] 212\n[1] 213\n[1] 214\n[1] 215\n[1] 216\n[1] 217\n[1] 218\n[1] 219\n[1] 220\n[1] 221\n[1] 222\n[1] 223\n[1] 224\n[1] 225\n[1] 226\n[1] 227\n[1] 228\n[1] 229\n[1] 230\n[1] 231\n[1] 232\n[1] 233\n[1] 234\n[1] 235\n[1] 236\n[1] 237\n[1] 238\n[1] 239\n[1] 240\n[1] 241\n[1] 242\n[1] 243\n[1] 244\n[1] 245\n[1] 246\n[1] 247\n\n\n[[1]]\n\n\n\n[[2]]\n\n\n\n[[3]]\n\n\n\n[[4]]\n\n\n\n[[5]]\n\n\n\n[[6]]\n\n\n\n[[7]]\n\n\n\n[[8]]\n\n\n\n[[9]]\n\n\n\n[[10]]\n\n\n\n[[11]]\n\n\n\n[[12]]\n\n\n\n[[13]]\n\n\n\n[[14]]\n\n\n\n[[15]]\n\n\n\n[[16]]\n\n\n\n[[17]]\n\n\n\n[[18]]\n\n\n\n[[19]]\n\n\n\n[[20]]\n\n\n\n[[21]]\n\n\n\n[[22]]\n\n\n\n[[23]]\n\n\n\n[[24]]\n\n\n\n[[25]]\n\n\n\n[[26]]\n\n\n\n[[27]]\n\n\n\n[[28]]\n\n\n\n[[29]]\n\n\n\n[[30]]\n\n\n\n[[31]]\n\n\n\n[[32]]\n\n\n\n[[33]]\n\n\n\n[[34]]\n\n\n\n[[35]]\n\n\n\n[[36]]\n\n\n\n[[37]]\n\n\n\n[[38]]\n\n\n\n[[39]]\n\n\n\n[[40]]\n\n\n\n[[41]]\n\n\n\n[[42]]\n\n\n\n[[43]]\n\n\n\n[[44]]\n\n\n\n[[45]]\n\n\n\n[[46]]\n\n\n\n[[47]]\n\n\n\n[[48]]\n\n\n\n[[49]]\n\n\n\n[[50]]\n\n\n\n[[51]]\n\n\n\n[[52]]\n\n\n\n[[53]]\n\n\n\n[[54]]\n\n\n\n[[55]]\n\n\n\n[[56]]\n\n\n\n[[57]]\n\n\n\n[[58]]\n\n\n\n[[59]]\n\n\n\n[[60]]\n\n\n\n[[61]]\n\n\n\n[[62]]\n\n\n\n[[63]]\n\n\n\n[[64]]\n\n\n\n[[65]]\n\n\n\n[[66]]\n\n\n\n[[67]]\n\n\n\n[[68]]\n\n\n\n[[69]]\n\n\n\n[[70]]\n\n\n\n[[71]]\n\n\n\n[[72]]\n\n\n\n[[73]]\n\n\n\n[[74]]\n\n\n\n[[75]]\n\n\n\n[[76]]\n\n\n\n[[77]]\n\n\n\n[[78]]\n\n\n\n[[79]]\n\n\n\n[[80]]\n\n\n\n[[81]]\n\n\n\n[[82]]\n\n\n\n[[83]]\n\n\n\n[[84]]\n\n\n\n[[85]]\n\n\n\n[[86]]\n\n\n\n[[87]]\n\n\n\n[[88]]\n\n\n\n[[89]]\n\n\n\n[[90]]\n\n\n\n[[91]]\n\n\n\n[[92]]\n\n\n\n[[93]]\n\n\n\n[[94]]\n\n\n\n[[95]]\n\n\n\n[[96]]\n\n\n\n[[97]]\n\n\n\n[[98]]\n\n\n\n[[99]]\n\n\n\n[[100]]\n\n\n\n[[101]]\n\n\n\n[[102]]\n\n\n\n[[103]]\n\n\n\n[[104]]\n\n\n\n[[105]]\n\n\n\n[[106]]\n\n\n\n[[107]]\n\n\n\n[[108]]\n\n\n\n[[109]]\n\n\n\n[[110]]\n\n\n\n[[111]]\n\n\n\n[[112]]\n\n\n\n[[113]]\n\n\n\n[[114]]\n\n\n\n[[115]]\n\n\n\n[[116]]\n\n\n\n[[117]]\n\n\n\n[[118]]\n\n\n\n[[119]]\n\n\n\n[[120]]\n\n\n\n[[121]]\n\n\n\n[[122]]\n\n\n\n[[123]]\n\n\n\n[[124]]\n\n\n\n[[125]]\n\n\n\n[[126]]\n\n\n\n[[127]]\n\n\n\n[[128]]\n\n\n\n[[129]]\n\n\n\n[[130]]\n\n\n\n[[131]]\n\n\n\n[[132]]\n\n\n\n[[133]]\n\n\n\n[[134]]\n\n\n\n[[135]]\n\n\n\n[[136]]\n\n\n\n[[137]]\n\n\n\n[[138]]\n\n\n\n[[139]]\n\n\n\n[[140]]\n\n\n\n[[141]]\n\n\n\n[[142]]\n\n\n\n[[143]]\n\n\n\n[[144]]\n\n\n\n[[145]]\n\n\n\n[[146]]\n\n\n\n[[147]]\n\n\n\n[[148]]\n\n\n\n[[149]]\n\n\n\n[[150]]\n\n\n\n[[151]]\n\n\n\n[[152]]\n\n\n\n[[153]]\n\n\n\n[[154]]\n\n\n\n[[155]]\n\n\n\n[[156]]\n\n\n\n[[157]]\n\n\n\n[[158]]\n\n\n\n[[159]]\n\n\n\n[[160]]\n\n\n\n[[161]]\n\n\n\n[[162]]\n\n\n\n[[163]]\n\n\n\n[[164]]\n\n\n\n[[165]]\n\n\n\n[[166]]\n\n\n\n[[167]]\n\n\n\n[[168]]\n\n\n\n[[169]]\n\n\n\n[[170]]\n\n\n\n[[171]]\n\n\n\n[[172]]\n\n\n\n[[173]]\n\n\n\n[[174]]\n\n\n\n[[175]]\n\n\n\n[[176]]\n\n\n\n[[177]]\n\n\n\n[[178]]\n\n\n\n[[179]]\n\n\n\n[[180]]\n\n\n\n[[181]]\n\n\n\n[[182]]\n\n\n\n[[183]]\n\n\n\n[[184]]\n\n\n\n[[185]]\n\n\n\n[[186]]\n\n\n\n[[187]]\n\n\n\n[[188]]\n\n\n\n[[189]]\n\n\n\n[[190]]\n\n\n\n[[191]]\n\n\n\n[[192]]\n\n\n\n[[193]]\n\n\n\n[[194]]\n\n\n\n[[195]]\n\n\n\n[[196]]\n\n\n\n[[197]]\n\n\n\n[[198]]\n\n\n\n[[199]]\n\n\n\n[[200]]\n\n\n\n[[201]]\n\n\n\n[[202]]\n\n\n\n[[203]]\n\n\n\n[[204]]\n\n\n\n[[205]]\n\n\n\n[[206]]\n\n\n\n[[207]]\n\n\n\n[[208]]\n\n\n\n[[209]]\n\n\n\n[[210]]\n\n\n\n[[211]]\n\n\n\n[[212]]\n\n\n\n[[213]]\n\n\n\n[[214]]\n\n\n\n[[215]]\n\n\n\n[[216]]\n\n\n\n[[217]]\n\n\n\n[[218]]\n\n\n\n[[219]]\n\n\n\n[[220]]\n\n\n\n[[221]]\n\n\n\n[[222]]\n\n\n\n[[223]]\n\n\n\n[[224]]\n\n\n\n[[225]]\n\n\n\n[[226]]\n\n\n\n[[227]]\n\n\n\n[[228]]\n\n\n\n[[229]]\n\n\n\n[[230]]\n\n\n\n[[231]]\n\n\n\n[[232]]\n\n\n\n[[233]]\n\n\n\n[[234]]\n\n\n\n[[235]]\n\n\n\n[[236]]\n\n\n\n[[237]]\n\n\n\n[[238]]\n\n\n\n[[239]]\n\n\n\n[[240]]\n\n\n\n[[241]]\n\n\n\n[[242]]\n\n\n\n[[243]]\n\n\n\n[[244]]\n\n\n\n[[245]]\n\n\n\n[[246]]\n\n\n\n[[247]]\n\n\n\n[[248]]\n\n\nquartz_off_screen \n                2"
  },
  {
    "objectID": "analysis/Figure2_plotNovelGenes.html#novel-gene-talong000088362",
    "href": "analysis/Figure2_plotNovelGenes.html#novel-gene-talong000088362",
    "title": "Figure 2 - Plot Novel Genes",
    "section": "Novel gene: TALONG000088362",
    "text": "Novel gene: TALONG000088362\n\nthis_gene = \"TALONG000088362\"   \nthese_exons <- gr.isoseq %>% dplyr::filter(annot_gene_name == this_gene & type == \"exon\")\nthis_cds <- gr.isoseq %>% dplyr::filter(annot_gene_name == this_gene & type == \"CDS\")\nthis.start = min(c(these_exons$start, these_exons$end)-5e4)\nthis.end = max(c(these_exons$start, these_exons$end)+5e4)\n\ngencode_exons =gr.gencode %>% dplyr::filter(type==\"exon\", seqnames==as.character(these_exons$seqnames[1]),start > this.start, end < this.end)\n\nFigS3F <- ggplot(these_exons, aes(xstart = start,xend = end, y = annot_transcript_name)) +\n  geom_range(aes(fill = log2(1+cpm), group=novelty2), height=.25) + \n  geom_range(data=this_cds, aes(fill = log2(1+cpm), group=novelty2)) + \n    geom_intron(\n        data = to_intron(these_exons, \"annot_transcript_name\"),\n        aes(strand = strand),arrow.min.intron.length = 5000,\n        arrow = grid::arrow(ends = \"last\", length = grid::unit(0.1, \"inches\")),\n        color='grey60',\n    ) +\n  xlim(this.start, this.end) + \n  geom_range(data=gencode_exons, fill='darkgrey', aes(xstart = start,xend = end, y=gene_name)) +\n  geom_intron(\n        data = to_intron(gencode_exons, \"transcript_name\"),\n        aes(strand = strand,y=gene_name),arrow.min.intron.length = 5000,\n        arrow = grid::arrow(ends = \"last\", length = grid::unit(0.1, \"inches\")),\n        color='grey60',\n    ) +\n  \n  facet_grid(source~.,scales = 'free', space = 'free') + ggtitle(this_gene, subtitle = paste0(these_exons$seqnames[1], \":\", this.start+5e4,\"-\", this.end-5e4)) + theme(legend.position = 'none') + labs(x=these_exons$seqnames[1], y=\"\")  +theme_bw() + scale_fill_gradient(low = 'darkgrey', high='red', limits=c(0,12)) + theme(legend.position = 'none')\nggsave(FigS3F, file='output/figures/supplement/FigS3F.pdf', height=4, width=6)"
  }
]