{
  "hash": "4f54d131be7b4a16bcbefcca0f12a7db",
  "result": {
    "markdown": "---\ntitle: \"Figure S9 - Correlation plots\"\nauthor: \"Connor Jops\"\ndate: \"2023-01-31\"\nexecute:\n  cache: false\n  freeze: auto\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.0      ✔ stringr 1.5.0 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(rtracklayer)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: GenomicRanges\nLoading required package: stats4\nLoading required package: BiocGenerics\n\nAttaching package: 'BiocGenerics'\n\nThe following objects are masked from 'package:dplyr':\n\n    combine, intersect, setdiff, union\n\nThe following objects are masked from 'package:stats':\n\n    IQR, mad, sd, var, xtabs\n\nThe following objects are masked from 'package:base':\n\n    anyDuplicated, append, as.data.frame, basename, cbind, colnames,\n    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,\n    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,\n    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,\n    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,\n    union, unique, unsplit, which.max, which.min\n\nLoading required package: S4Vectors\n\nAttaching package: 'S4Vectors'\n\nThe following objects are masked from 'package:dplyr':\n\n    first, rename\n\nThe following object is masked from 'package:tidyr':\n\n    expand\n\nThe following objects are masked from 'package:base':\n\n    expand.grid, I, unname\n\nLoading required package: IRanges\n\nAttaching package: 'IRanges'\n\nThe following objects are masked from 'package:dplyr':\n\n    collapse, desc, slice\n\nThe following object is masked from 'package:purrr':\n\n    reduce\n\nLoading required package: GenomeInfoDb\n```\n:::\n\n```{.r .cell-code}\nSys.setenv(\"VROOM_CONNECTION_SIZE\" = 524288) # 512kb - default is 128kb. entire line must fit inside this buffer and we have very long lines\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_size_pt = 16\ntheme_set(theme_bw(base_size = base_size_pt))\ntheme_update(\n  plot.title = element_text(size = rel(1.2), hjust = 0.5),\n  axis.title = element_text(size = rel(1)),\n  axis.text = element_text(color=\"black\", size = rel(1)),\n  legend.title = element_text(size = rel(1)),\n  legend.text = element_text(color=\"black\", size = rel(1)),\n  strip.text = element_text(color=\"black\", size = rel(1))\n)\nbase_size_mm = base_size_pt * 25.4 / 72.27\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nisoseq = read_tsv(\"data/AllBarcode_newID_geneLevel.txt.gz\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 19158 Columns: 4282\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr    (1): gene_name\ndbl (4281): ACGGCATAGTAC, ACTGACTGATCC, ACTGGCACCGAG, AGCTAGCCCATG, AGTTTAGC...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nisoseq\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 19,158 × 4,282\n   gene_name ACGGCATAG…¹ ACTGA…² ACTGG…³ AGCTA…⁴ AGTTT…⁵ ATCCG…⁶ CAGAC…⁷ CCCCC…⁸\n   <chr>           <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 A1BG                0       0       0       0       0       0       0       0\n 2 A1BG-AS1            0       0       0       0       0       0       0       0\n 3 A2M                 0       0       0       1       0       0       0       0\n 4 AAAS                0       0       0       0       0       0       0       0\n 5 AACS                1       0       0       0       0       0       0       0\n 6 AADAT               0       0       0       0       0       0       0       0\n 7 AAGAB               0       0       0       0       0       0       0       0\n 8 AAK1                0       0       0       0       0       0       0       0\n 9 AAMDC               0       0       0       0       0       0       0       0\n10 AAMP                0       0       0       0       0       0       0       0\n# … with 19,148 more rows, 4,273 more variables: GCCGTAAAACTC <dbl>,\n#   GGGCTGCTTATA <dbl>, GGTTGCTGTACG <dbl>, GTAGCGAGATGC <dbl>,\n#   TCAGCTCACCCT <dbl>, TGACATTCTATT <dbl>, TGGTGAACCAGA <dbl>,\n#   TTCTATGCCCGC <dbl>, AAAAATAAATTG <dbl>, AAAACCGCGCAG <dbl>,\n#   AAAAGCAACGTG <dbl>, AAAGGCGCGCGG <dbl>, AAATCAACTGTA <dbl>,\n#   AACCACGTTTAA <dbl>, AACGTACTATCG <dbl>, AACTGCCTTGTA <dbl>,\n#   AAGATCCAAGGC <dbl>, AAGGCAGAATCT <dbl>, AAGGCTGACCGA <dbl>, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshort_read = read_tsv(\"data/single_cell/Raw_Single_Cell_4281.tsv.gz\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 30119 Columns: 4282\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr    (1): gene_name\ndbl (4281): GTATAACATGAA, CGAATATTCTGT, TGGAACAGCAAT, TACCCTGTAAGA, CTCACTGA...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nshort_read\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30,119 × 4,282\n   gene_name GTATAACAT…¹ CGAAT…² TGGAA…³ TACCC…⁴ CTCAC…⁵ ACAGC…⁶ AGTCC…⁷ AGGCT…⁸\n   <chr>           <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 TSPAN6              0       1       0       1       0       1       1       0\n 2 DPM1                1       0       0       0       0       1       3       2\n 3 SCYL3               0       0       0       0       0       0       0       0\n 4 C1orf112            0       0       0       0       1       0       1       0\n 5 CFH                 0       0       0       0       0       0       0       0\n 6 FUCA2               0       0       0       0       0       0       0       0\n 7 GCLC                0       0       0       0       0       0       0       0\n 8 NFYA                1       0       0       0       0       0       0       0\n 9 STPG1               0       0       0       0       0       0       0       0\n10 NIPAL3              0       0       0       0       0       0       0       0\n# … with 30,109 more rows, 4,273 more variables: CCATCTATCAGG <dbl>,\n#   AAGAAGTCCATT <dbl>, GCCGCAGAGTCA <dbl>, AACCTTCGCAAC <dbl>,\n#   CTCTCCCCAATC <dbl>, TTTTATTTATAA <dbl>, CGTATCAGTATT <dbl>,\n#   GTACTCTACAGA <dbl>, CAGTTTAGGAAA <dbl>, GTACCACCCTTC <dbl>,\n#   ATGTGCACAGCA <dbl>, GTAGGTTAACTA <dbl>, CAGGGCCAGGCA <dbl>,\n#   CGGGAACCCAAA <dbl>, GTGATTAGCCCA <dbl>, ATCTCCTTGTTA <dbl>,\n#   CGGCTTATCGTA <dbl>, ACCCATCAAAGG <dbl>, GGCTGAGAGTCA <dbl>, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncell_metadata = read_tsv(\"ref/polioudakis_neuron2020/TableS3_Cell_metadata.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 33976 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (7): Cell, Cluster, Subcluster, Layer, Index, Library, Phase\ndbl (7): Donor, Gestation_week, Number_genes_detected, Number_UMI, Percentag...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncell_metadata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 33,976 × 14\n   Cell        Cluster Subcl…¹ Donor Layer Gesta…² Index Library Numbe…³ Numbe…⁴\n   <chr>       <chr>   <chr>   <dbl> <chr>   <dbl> <chr> <chr>     <dbl>   <dbl>\n 1 TGCTAATACT… vRG     vRG_0     368 CP         17 N701  Plath      1366    2736\n 2 TTCACGATTT… vRG     vRG_2     368 GZ         17 N702  Plath      3012    7318\n 3 CTGTCAGAAT… vRG     vRG_2     368 GZ         17 N702  Plath      1597    3451\n 4 CATAATATGT… vRG     vRG_0     368 GZ         17 N702  Plath      1551    2941\n 5 TGCCAATCCG… vRG     vRG_0     368 GZ         17 N702  Plath      1569    2769\n 6 TCGACTATTT… vRG     vRG_2     368 GZ         17 N702  Plath      1610    2994\n 7 GTTACCCGGC… vRG     vRG_1     368 GZ         17 N702  Plath      1227    2092\n 8 GCCACCGATA… vRG     vRG_1     368 GZ         17 N702  Plath      1197    2057\n 9 GGGCAGATGT… vRG     vRG_1     368 GZ         17 N702  Plath      1237    2221\n10 TTGAGCGGTA… vRG     vRG_0     368 GZ         17 N702  Plath      1344    2393\n# … with 33,966 more rows, 4 more variables: Percentage_mitochondrial <dbl>,\n#   S_phase_score <dbl>, G2M_phase_score <dbl>, Phase <chr>, and abbreviated\n#   variable names ¹​Subcluster, ²​Gestation_week, ³​Number_genes_detected,\n#   ⁴​Number_UMI\n```\n:::\n:::\n\n\n## Gene expr\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_counts = inner_join(\n  isoseq %>% mutate(\n    cts_isoseq = rowSums(across(where(is.numeric))),\n    .keep = \"unused\"\n  ),\n  short_read %>% mutate(\n    cts_short_read = rowSums(across(where(is.numeric))),\n    .keep = \"unused\"\n  ),\n  by = \"gene_name\"\n) %>%\n  filter(!if_any(starts_with(\"cts_\"), ~.x == 0))\ngene_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13,946 × 3\n   gene_name cts_isoseq cts_short_read\n   <chr>          <dbl>          <dbl>\n 1 A1BG              18              6\n 2 A1BG-AS1           3              6\n 3 A2M               22             57\n 4 AAAS             169            288\n 5 AACS              69            198\n 6 AADAT             79            174\n 7 AAGAB             62             82\n 8 AAK1              64            479\n 9 AAMDC             95            189\n10 AAMP             298            401\n# … with 13,936 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_counts_logRPM = gene_counts %>%\n  mutate(across(\n    starts_with(\"cts_\"),\n    ~log2(1 + (.x / (sum(.x) / 1000000)))\n  ))\ngene_counts_logRPM\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13,946 × 3\n   gene_name cts_isoseq cts_short_read\n   <chr>          <dbl>          <dbl>\n 1 A1BG           2.77           0.916\n 2 A1BG-AS1       0.976          0.916\n 3 A2M            3.02           3.24 \n 4 AAAS           5.79           5.44 \n 5 AACS           4.54           4.92 \n 6 AADAT          4.73           4.74 \n 7 AAGAB          4.39           3.71 \n 8 AAK1           4.43           6.17 \n 9 AAMDC          4.98           4.85 \n10 AAMP           6.60           5.91 \n# … with 13,936 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncor = cor.test(gene_counts_logRPM$cts_isoseq, gene_counts_logRPM$cts_short_read, method = \"pearson\")\ncor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPearson's product-moment correlation\n\ndata:  gene_counts_logRPM$cts_isoseq and gene_counts_logRPM$cts_short_read\nt = 242.12, df = 13944, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.8955646 0.9019444\nsample estimates:\n      cor \n0.8988021 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  gene_counts_logRPM,\n  aes(x = cts_short_read, y = cts_isoseq)\n) +\n  geom_point(alpha = 0.1, color = \"#08519c\") +\n  geom_abline() +\n  annotate(\n    geom = \"text\",\n    label = str_c(\"r = \", round(cor$estimate[[1]], digits = 3), \", p\\uadvalue < 2.2e-16\"),\n    size = base_size_mm,\n    x = 0, y = 16,\n    vjust = \"middle\", hjust = \"left\",\n    parse = F\n  ) +\n  xlim(0, 16) +\n  ylim(0, 16) +\n  labs(\n    x = \"Gene Expr (RNA\\uadSeq)\\nlog2(TPM+1)\",\n    y = \"Gene Expr (Iso\\uadSeq)\\nlog2(TPM+1)\"\n  )\n```\n\n::: {.cell-output-display}\n![](FigureS9_cor_plots_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"output/figures/supplement/FigS9_GeneExprCor.pdf\", width = 5, height = 5)\n```\n:::\n\n\n## UMI\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUMI_counts = inner_join(\n  short_read %>%\n    select(-gene_name) %>%\n    summarize(across(everything(), sum)) %>%\n    pivot_longer(everything(), names_to = \"UMI\", values_to = \"cts_short_read\"),\n  isoseq %>%\n    select(-gene_name) %>%\n    summarize(across(everything(), sum)) %>%\n    pivot_longer(everything(), names_to = \"UMI\", values_to = \"cts_isoseq\"),\n  by = \"UMI\"\n)\nUMI_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,281 × 3\n   UMI          cts_short_read cts_isoseq\n   <chr>                 <dbl>      <dbl>\n 1 GTATAACATGAA           7756       3123\n 2 CGAATATTCTGT           6478       2604\n 3 TGGAACAGCAAT           5334       2524\n 4 TACCCTGTAAGA           6227       2721\n 5 CTCACTGAATGT           6731       3021\n 6 ACAGCTCAGATA           5432       2452\n 7 AGTCCCCCACTC           6623       3923\n 8 AGGCTCCCATTT           5286       2998\n 9 CCATCTATCAGG           5827       2671\n10 AAGAAGTCCATT           4599       2187\n# … with 4,271 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncor = cor.test(UMI_counts$cts_isoseq, UMI_counts$cts_short_read, method = \"pearson\")\ncor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPearson's product-moment correlation\n\ndata:  UMI_counts$cts_isoseq and UMI_counts$cts_short_read\nt = 154.02, df = 4279, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.9157149 0.9248780\nsample estimates:\n      cor \n0.9204228 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  UMI_counts,\n  aes(x = cts_short_read, y = cts_isoseq)\n) +\n  geom_point(alpha = 0.1) +\n  annotate(\n    geom = \"text\",\n    label = str_c(\"r = \", round(cor$estimate[[1]], digits = 3), \", p\\uadvalue < 2.2e-16\"),\n    size = base_size_mm,\n    x = 0, y = 5500,\n    vjust = \"middle\", hjust = \"left\",\n    parse = F\n  ) +\n  scale_x_continuous(limits = c(0, 8000), breaks = seq(0, 8000, by = 2000)) +\n  scale_y_continuous(limits = c(0, 5500), breaks = seq(0, 5000, by = 1000)) +\n  labs(\n    x = \"Total UMI count in RNA\\uadSeq\",\n    y = \"Total UMI count in Iso\\uadSeq\"\n  )\n```\n\n::: {.cell-output-display}\n![](FigureS9_cor_plots_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"output/figures/supplement/FigS9_UMICountCor.pdf\", width = 5, height = 5)\n```\n:::\n\n\n## Unique transcripts per cell\n\nmean = 538.6\n\n\n::: {.cell}\n\n```{.r .cell-code}\nisoseq_tx = read_tsv(\"data/AllBarcode_newID_4281.txt.gz\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 143490 Columns: 4283\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr    (2): gene_name, transcript_id\ndbl (4281): ACGGCATAGTAC, ACTGACTGATCC, ACTGGCACCGAG, AGCTAGCCCATG, AGTTTAGC...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nisoseq_tx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 143,490 × 4,283\n   gene_name  transcri…¹ ACGGC…² ACTGA…³ ACTGG…⁴ AGCTA…⁵ AGTTT…⁶ ATCCG…⁷ CAGAC…⁸\n   <chr>      <chr>        <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 AL669831.3 ENST00000…       0       0       0       0       0       0       0\n 2 MTND1P23   ENST00000…       0       0       0       0       0       0       0\n 3 MTND2P28   ENST00000…       0       0       0       0       0       0       0\n 4 MTCO1P12   ENST00000…       0       0       0       0       1       0       1\n 5 MTCO2P12   ENST00000…       0       0       0       0       0       0       0\n 6 MTATP6P1   ENST00000…       0       0       0       0       0       0       0\n 7 LINC01409  ENST00000…       0       0       0       0       0       0       0\n 8 LINC01409  ENST00000…       0       0       0       0       0       0       0\n 9 LINC01128  ENST00000…       0       0       0       0       0       0       0\n10 LINC01128  ENST00000…       0       0       0       0       0       0       0\n# … with 143,480 more rows, 4,274 more variables: CCCCCACTTAGC <dbl>,\n#   GCCGTAAAACTC <dbl>, GGGCTGCTTATA <dbl>, GGTTGCTGTACG <dbl>,\n#   GTAGCGAGATGC <dbl>, TCAGCTCACCCT <dbl>, TGACATTCTATT <dbl>,\n#   TGGTGAACCAGA <dbl>, TTCTATGCCCGC <dbl>, AAAAATAAATTG <dbl>,\n#   AAAACCGCGCAG <dbl>, AAAAGCAACGTG <dbl>, AAAGGCGCGCGG <dbl>,\n#   AAATCAACTGTA <dbl>, AACCACGTTTAA <dbl>, AACGTACTATCG <dbl>,\n#   AACTGCCTTGTA <dbl>, AAGATCCAAGGC <dbl>, AAGGCAGAATCT <dbl>, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntx_per_cell = isoseq_tx %>% select(!(c(gene_name, transcript_id))) %>%\n  summarize(across(everything(), ~sum(.x > 0))) %>%\n  pivot_longer(everything())\ntx_per_cell\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,281 × 2\n   name         value\n   <chr>        <int>\n 1 ACGGCATAGTAC   198\n 2 ACTGACTGATCC   147\n 3 ACTGGCACCGAG   129\n 4 AGCTAGCCCATG   226\n 5 AGTTTAGCGGTC   930\n 6 ATCCGACCATCA   103\n 7 CAGACGCGACAT   253\n 8 CCCCCACTTAGC   115\n 9 GCCGTAAAACTC    65\n10 GGGCTGCTTATA   201\n# … with 4,271 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(tx_per_cell)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     name               value       \n Length:4281        Min.   :  10.0  \n Class :character   1st Qu.: 262.0  \n Mode  :character   Median : 452.0  \n                    Mean   : 538.6  \n                    3rd Qu.: 720.0  \n                    Max.   :2785.0  \n```\n:::\n:::\n\n\n## Donor v donor in iso-seq\n\n### Filtered for isoforms present in 3 or more cells\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncpgz = rtracklayer::import(\"data/cp_vz_sc_unified_talon.gtf.gz\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndonor_counts_filt = read_tsv(\"data/AllBarcode_newID_byDonor_min3cells.txt.gz\") %>%\n  rename_with(~str_c(\"donor_\", .x), .cols = where(is.numeric))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 84478 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (2): gene_name, transcript_id\ndbl (3): 370, 371, 372\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ndonor_counts_filt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 84,478 × 5\n   gene_name transcript_id   donor_370 donor_371 donor_372\n   <chr>     <chr>               <dbl>     <dbl>     <dbl>\n 1 MTND1P23  ENST00000416931         0         3         0\n 2 MTND2P28  ENST00000457540         3        52        38\n 3 MTCO1P12  ENST00000414273         2         9        10\n 4 LINC00115 ENST00000473798         4         6         9\n 5 NOC2L     ENST00000327044        20        16        28\n 6 NOC2L     ENST00000469563         7         9        14\n 7 KLHL17    ENST00000338591         0         3         1\n 8 HES4      ENST00000428771         7        28        36\n 9 HES4      ENST00000304952        22        42        47\n10 HES4      ENST00000481869        17        35        37\n# … with 84,468 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndonor_counts_filt = donor_counts_filt %>% filter(transcript_id %in% str_extract(cpgz$transcript_id, \"^[^\\\\.]*\"))\ndonor_counts_filt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 84,224 × 5\n   gene_name transcript_id   donor_370 donor_371 donor_372\n   <chr>     <chr>               <dbl>     <dbl>     <dbl>\n 1 MTND1P23  ENST00000416931         0         3         0\n 2 MTND2P28  ENST00000457540         3        52        38\n 3 MTCO1P12  ENST00000414273         2         9        10\n 4 LINC00115 ENST00000473798         4         6         9\n 5 NOC2L     ENST00000327044        20        16        28\n 6 NOC2L     ENST00000469563         7         9        14\n 7 KLHL17    ENST00000338591         0         3         1\n 8 HES4      ENST00000428771         7        28        36\n 9 HES4      ENST00000304952        22        42        47\n10 HES4      ENST00000481869        17        35        37\n# … with 84,214 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncpgz.exons = cpgz[cpgz$type == \"exon\" & str_extract(cpgz$transcript_id, \"^[^\\\\.]*\") %in% donor_counts_filt$transcript_id]\ncpgz.exons.by.gene = split(cpgz.exons, cpgz.exons$gene_name)\ndonor_counts_filt = donor_counts_filt %>% left_join(\n  enframe(\n    sum(width(reduce(ranges(cpgz.exons.by.gene)))), # calculate exonic width\n    name = \"gene_name\",\n    value = \"gene_length\"\n  )\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"gene_name\"\n```\n:::\n\n```{.r .cell-code}\ndonor_counts_filt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 84,224 × 6\n   gene_name transcript_id   donor_370 donor_371 donor_372 gene_length\n   <chr>     <chr>               <dbl>     <dbl>     <dbl>       <int>\n 1 MTND1P23  ENST00000416931         0         3         0         372\n 2 MTND2P28  ENST00000457540         3        52        38        1044\n 3 MTCO1P12  ENST00000414273         2         9        10        1543\n 4 LINC00115 ENST00000473798         4         6         9        1317\n 5 NOC2L     ENST00000327044        20        16        28        4572\n 6 NOC2L     ENST00000469563         7         9        14        4572\n 7 KLHL17    ENST00000338591         0         3         1        2567\n 8 HES4      ENST00000428771         7        28        36        1675\n 9 HES4      ENST00000304952        22        42        47        1675\n10 HES4      ENST00000481869        17        35        37        1675\n# … with 84,214 more rows\n```\n:::\n:::\n\n\nwrong but matches old plots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal = sum(donor_counts_filt %>% select(starts_with(\"donor_\")))\ndonor_counts_filt_logRPM_wrong = donor_counts_filt %>%\n  mutate(across(\n    starts_with(\"donor_\"),\n    ~log10(1 + (.x / (total / 1000000)))\n  ))\ndonor_counts_filt_logRPM_wrong\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 84,224 × 6\n   gene_name transcript_id   donor_370 donor_371 donor_372 gene_length\n   <chr>     <chr>               <dbl>     <dbl>     <dbl>       <int>\n 1 MTND1P23  ENST00000416931     0         0.288     0             372\n 2 MTND2P28  ENST00000457540     0.288     1.24      1.11         1044\n 3 MTCO1P12  ENST00000414273     0.212     0.583     0.617        1543\n 4 LINC00115 ENST00000473798     0.354     0.460     0.583        1317\n 5 NOC2L     ENST00000327044     0.863     0.780     0.991        4572\n 6 NOC2L     ENST00000469563     0.505     0.583     0.732        4572\n 7 KLHL17    ENST00000338591     0         0.288     0.119        2567\n 8 HES4      ENST00000428771     0.505     0.991     1.09         1675\n 9 HES4      ENST00000304952     0.898     1.15      1.20         1675\n10 HES4      ENST00000481869     0.802     1.08      1.10         1675\n# … with 84,214 more rows\n```\n:::\n:::\n\n\ncorrectly calculate logRPM:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndonor_counts_filt_logRPM = donor_counts_filt %>%\n  mutate(across(\n    starts_with(\"donor_\"),\n    ~log10(1 + (.x / (sum(.x) / 1000000)))\n  ))\ndonor_counts_filt_logRPM\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 84,224 × 6\n   gene_name transcript_id   donor_370 donor_371 donor_372 gene_length\n   <chr>     <chr>               <dbl>     <dbl>     <dbl>       <int>\n 1 MTND1P23  ENST00000416931     0         0.565     0             372\n 2 MTND2P28  ENST00000457540     0.816     1.68      1.42         1044\n 3 MTCO1P12  ENST00000414273     0.672     0.955     0.880        1543\n 4 LINC00115 ENST00000473798     0.924     0.803     0.841        1317\n 5 NOC2L     ENST00000327044     1.58      1.18      1.29         4572\n 6 NOC2L     ENST00000469563     1.14      0.955     1.01         4572\n 7 KLHL17    ENST00000338591     0         0.565     0.220        2567\n 8 HES4      ENST00000428771     1.14      1.41      1.39         1675\n 9 HES4      ENST00000304952     1.62      1.58      1.50         1675\n10 HES4      ENST00000481869     1.51      1.51      1.40         1675\n# … with 84,214 more rows\n```\n:::\n:::\n\n\ncorrectly calculate logTPM:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndonor_counts_filt_logTPM = donor_counts_filt %>%\n  mutate(across(\n    starts_with(\"donor_\"),\n    ~log10(1 + ((.x / (gene_length / 1000)) / (sum(.x) / 1000000)))\n  ))\ndonor_counts_filt_logTPM\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 84,224 × 6\n   gene_name transcript_id   donor_370 donor_371 donor_372 gene_length\n   <chr>     <chr>               <dbl>     <dbl>     <dbl>       <int>\n 1 MTND1P23  ENST00000416931     0         0.913    0              372\n 2 MTND2P28  ENST00000457540     0.800     1.66     1.40          1044\n 3 MTCO1P12  ENST00000414273     0.531     0.792    0.722         1543\n 4 LINC00115 ENST00000473798     0.820     0.704    0.740         1317\n 5 NOC2L     ENST00000327044     0.958     0.615    0.702         4572\n 6 NOC2L     ENST00000469563     0.583     0.440    0.480         4572\n 7 KLHL17    ENST00000338591     0         0.310    0.0992        2567\n 8 HES4      ENST00000428771     0.941     1.20     1.18          1675\n 9 HES4      ENST00000304952     1.40      1.37     1.29          1675\n10 HES4      ENST00000481869     1.30      1.29     1.19          1675\n# … with 84,214 more rows\n```\n:::\n:::\n\n\n### Digression - Gene expression is correlated to gene length\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweighted.mean(donor_counts_filt$gene_length, donor_counts_filt$donor_370)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6988.761\n```\n:::\n\n```{.r .cell-code}\nweighted.mean(donor_counts_filt$gene_length, donor_counts_filt$donor_371)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6925.062\n```\n:::\n\n```{.r .cell-code}\nweighted.mean(donor_counts_filt$gene_length, donor_counts_filt$donor_372)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7101.579\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncpgz.exons = cpgz[cpgz$type == \"exon\" & str_extract(cpgz$transcript_id, \"^[^\\\\.]*\") %in% donor_counts_filt$transcript_id]\ncpgz.exons.by.gene = split(cpgz.exons, cpgz.exons$gene_name)\ndonor_counts_filt = donor_counts_filt %>% left_join(\n  enframe(\n    sum(width(reduce(ranges(cpgz.exons.by.gene)))), # calculate exonic width\n    name = \"gene_name\",\n    value = \"gene_length\"\n  )\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = c(\"gene_name\", \"gene_length\")\n```\n:::\n\n```{.r .cell-code}\ndonor_counts_filt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 84,224 × 6\n   gene_name transcript_id   donor_370 donor_371 donor_372 gene_length\n   <chr>     <chr>               <dbl>     <dbl>     <dbl>       <int>\n 1 MTND1P23  ENST00000416931         0         3         0         372\n 2 MTND2P28  ENST00000457540         3        52        38        1044\n 3 MTCO1P12  ENST00000414273         2         9        10        1543\n 4 LINC00115 ENST00000473798         4         6         9        1317\n 5 NOC2L     ENST00000327044        20        16        28        4572\n 6 NOC2L     ENST00000469563         7         9        14        4572\n 7 KLHL17    ENST00000338591         0         3         1        2567\n 8 HES4      ENST00000428771         7        28        36        1675\n 9 HES4      ENST00000304952        22        42        47        1675\n10 HES4      ENST00000481869        17        35        37        1675\n# … with 84,214 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndonor_gene_counts = donor_counts_filt %>% group_by(gene_name) %>%\n  summarize(across(starts_with(\"donor_\"), sum), gene_length = dplyr::first(gene_length)) %>%\n  mutate(\n    gene_length = gene_length / 1000,\n    across(starts_with(\"donor_\"), ~.x / (sum(.x) / 1000000))\n  ) %>%\n  mutate(\n    across(where(is.numeric), ~log10(.x + 1))\n  ) #%>%\n#  mutate(across(starts_with(\"donor_\"), ~na_if(.x, 0)))\ndonor_gene_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14,177 × 5\n   gene_name donor_370 donor_371 donor_372 gene_length\n   <chr>         <dbl>     <dbl>     <dbl>       <dbl>\n 1 A1BG          0.816     0.565     0.950       0.496\n 2 A2M           0.672     0.910     0.695       0.488\n 3 AAAS          1.71      1.81      1.65        0.717\n 4 AACS          1.40      1.44      1.19        0.995\n 5 AADAT         1.25      1.41      1.36        1.01 \n 6 AAGAB         1.14      1.44      1.17        0.972\n 7 AAK1          1.40      1.25      1.29        0.939\n 8 AAMDC         1.58      1.44      1.42        0.322\n 9 AAMP          1.82      1.93      2.00        0.646\n10 AAR2          1.49      1.18      1.34        0.568\n# … with 14,167 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  donor_gene_counts %>%\n    pivot_longer(cols = starts_with(\"donor_\"), names_to = \"donor\", values_to = \"count\"),\n  aes(x = count, y = gene_length)\n) +\n#  geom_point() +\n  geom_point(alpha = 0.05) +\n#  geom_rug(alpha = 0.01) +\n#  geom_hex(bins = 20) +\n  xlim(0, 5) +\n  ylim(0, 3) +\n  abline() +\n  labs(\n    x = \"Gene expression (logRPM)\",\n    y = \"Gene length (logKB)\"\n  ) +\n  facet_wrap(vars(donor))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"output/figures/supplement/FigS9_GeneLengthCor.pdf\", width = 14, height = 7)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncor.test(donor_gene_counts$donor_370, donor_gene_counts$gene_length, method = \"pearson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPearson's product-moment correlation\n\ndata:  donor_gene_counts$donor_370 and donor_gene_counts$gene_length\nt = 61.234, df = 14175, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.4442555 0.4702924\nsample estimates:\n     cor \n0.457372 \n```\n:::\n\n```{.r .cell-code}\ncor.test(donor_gene_counts$donor_371, donor_gene_counts$gene_length, method = \"pearson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPearson's product-moment correlation\n\ndata:  donor_gene_counts$donor_371 and donor_gene_counts$gene_length\nt = 61.173, df = 14175, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.4438894 0.4699372\nsample estimates:\n      cor \n0.4570113 \n```\n:::\n\n```{.r .cell-code}\ncor.test(donor_gene_counts$donor_372, donor_gene_counts$gene_length, method = \"pearson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPearson's product-moment correlation\n\ndata:  donor_gene_counts$donor_372 and donor_gene_counts$gene_length\nt = 64.128, df = 14175, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.4613527 0.4868732\nsample estimates:\n      cor \n0.4742125 \n```\n:::\n:::\n\n\n### Unfiltered\n\nWe will use this but instead filter out isoforms with 0 counts in either donor\nfrom each comparison.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndonor_counts = read_tsv(\"data/AllBarcode_newID_byDonor.txt.gz\") %>%\n  rename_with(~str_c(\"donor_\", .x), .cols = where(is.numeric))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 143490 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (2): gene_name, transcript_id\ndbl (3): 370, 371, 372\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ndonor_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 143,490 × 5\n   gene_name  transcript_id   donor_370 donor_371 donor_372\n   <chr>      <chr>               <dbl>     <dbl>     <dbl>\n 1 AL669831.3 ENST00000447954         0         1         1\n 2 MTND1P23   ENST00000416931         0         3         0\n 3 MTND2P28   ENST00000457540         3        52        38\n 4 MTCO1P12   ENST00000414273         2         9        10\n 5 MTCO2P12   ENST00000427426         0         0         1\n 6 MTATP6P1   ENST00000514057         0         0         0\n 7 LINC01409  ENST00000665867         0         0         1\n 8 LINC01409  ENST00000591702         0         0         1\n 9 LINC01128  ENST00000445118         1         0         1\n10 LINC01128  ENST00000669922         0         1         0\n# … with 143,480 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndonor_counts = donor_counts %>% filter(transcript_id %in% str_extract(cpgz$transcript_id, \"^[^\\\\.]*\"))\ndonor_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 142,938 × 5\n   gene_name  transcript_id   donor_370 donor_371 donor_372\n   <chr>      <chr>               <dbl>     <dbl>     <dbl>\n 1 AL669831.3 ENST00000447954         0         1         1\n 2 MTND1P23   ENST00000416931         0         3         0\n 3 MTND2P28   ENST00000457540         3        52        38\n 4 MTCO1P12   ENST00000414273         2         9        10\n 5 MTCO2P12   ENST00000427426         0         0         1\n 6 MTATP6P1   ENST00000514057         0         0         0\n 7 LINC01409  ENST00000665867         0         0         1\n 8 LINC01409  ENST00000591702         0         0         1\n 9 LINC01128  ENST00000445118         1         0         1\n10 LINC01128  ENST00000669922         0         1         0\n# … with 142,928 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncpgz.exons = cpgz[cpgz$type == \"exon\" & str_extract(cpgz$transcript_id, \"^[^\\\\.]*\") %in% donor_counts$transcript_id]\ncpgz.exons.by.gene = split(cpgz.exons, cpgz.exons$gene_name)\ndonor_counts = donor_counts %>% left_join(\n  enframe(\n    sum(width(reduce(ranges(cpgz.exons.by.gene)))), # calculate exonic width\n    name = \"gene_name\",\n    value = \"gene_length\"\n  )\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"gene_name\"\n```\n:::\n\n```{.r .cell-code}\ndonor_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 142,938 × 6\n   gene_name  transcript_id   donor_370 donor_371 donor_372 gene_length\n   <chr>      <chr>               <dbl>     <dbl>     <dbl>       <int>\n 1 AL669831.3 ENST00000447954         0         1         1         355\n 2 MTND1P23   ENST00000416931         0         3         0         372\n 3 MTND2P28   ENST00000457540         3        52        38        1044\n 4 MTCO1P12   ENST00000414273         2         9        10        1543\n 5 MTCO2P12   ENST00000427426         0         0         1         682\n 6 MTATP6P1   ENST00000514057         0         0         0         681\n 7 LINC01409  ENST00000665867         0         0         1        2157\n 8 LINC01409  ENST00000591702         0         0         1        2157\n 9 LINC01128  ENST00000445118         1         0         1       13584\n10 LINC01128  ENST00000669922         0         1         0       13584\n# … with 142,928 more rows\n```\n:::\n:::\n\n\ncorrectly calculate logRPM:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndonor_counts_logRPM = donor_counts %>%\n  mutate(across(\n    starts_with(\"donor_\"),\n    ~log2(1 + (.x / (sum(.x) / 1000000)))\n  ))\ndonor_counts_logRPM\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 142,938 × 6\n   gene_name  transcript_id   donor_370 donor_371 donor_372 gene_length\n   <chr>      <chr>               <dbl>     <dbl>     <dbl>       <int>\n 1 AL669831.3 ENST00000447954      0        0.901     0.713         355\n 2 MTND1P23   ENST00000416931      0        1.85      0             372\n 3 MTND2P28   ENST00000457540      2.67     5.53      4.66         1044\n 4 MTCO1P12   ENST00000414273      2.20     3.14      2.88         1543\n 5 MTCO2P12   ENST00000427426      0        0         0.713         682\n 6 MTATP6P1   ENST00000514057      0        0         0             681\n 7 LINC01409  ENST00000665867      0        0         0.713        2157\n 8 LINC01409  ENST00000591702      0        0         0.713        2157\n 9 LINC01128  ENST00000445118      1.48     0         0.713       13584\n10 LINC01128  ENST00000669922      0        0.901     0           13584\n# … with 142,928 more rows\n```\n:::\n:::\n\n\ncorrectly calculate logTPM:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndonor_counts_logTPM = donor_counts %>%\n  mutate(across(\n    starts_with(\"donor_\"),\n    ~log10(1 + ((.x / (gene_length / 1000)) / (sum(.x) / 1000000)))\n  ))\ndonor_counts_logTPM\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 142,938 × 6\n   gene_name  transcript_id   donor_370 donor_371 donor_372 gene_length\n   <chr>      <chr>               <dbl>     <dbl>     <dbl>       <int>\n 1 AL669831.3 ENST00000447954    0         0.537     0.447          355\n 2 MTND1P23   ENST00000416931    0         0.903     0              372\n 3 MTND2P28   ENST00000457540    0.789     1.65      1.38          1044\n 4 MTCO1P12   ENST00000414273    0.521     0.782     0.711         1543\n 5 MTCO2P12   ENST00000427426    0         0         0.287          682\n 6 MTATP6P1   ENST00000514057    0         0         0              681\n 7 LINC01409  ENST00000665867    0         0         0.113         2157\n 8 LINC01409  ENST00000591702    0         0         0.113         2157\n 9 LINC01128  ENST00000445118    0.0538    0         0.0200       13584\n10 LINC01128  ENST00000669922    0         0.0269    0            13584\n# … with 142,928 more rows\n```\n:::\n:::\n\n\n### Final plots\n\n#### Donor 370 + Donor 371\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor = cor.test(na_if(donor_counts_logRPM$donor_370, 0), na_if(donor_counts_logRPM$donor_371, 0), method = \"pearson\")\ncor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPearson's product-moment correlation\n\ndata:  na_if(donor_counts_logRPM$donor_370, 0) and na_if(donor_counts_logRPM$donor_371, 0)\nt = 397.42, df = 57300, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.8544174 0.8587770\nsample estimates:\n      cor \n0.8566125 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  donor_counts_logRPM %>% mutate(across(starts_with(\"donor_\"), na_if, 0)),\n  aes(x = donor_370, y = donor_371)\n) +\n  geom_point(alpha = 0.1, color = \"#08519c\") +\n  geom_abline() +\n  annotate(\n    geom = \"text\",\n    label = str_c(\"r = \", round(cor$estimate[[1]], digits = 3), \", p\\uadvalue < 2.2e-16\"),\n    size = base_size_mm,\n    x = 0, y = 16,\n    vjust = \"middle\", hjust = \"left\",\n    parse = F\n  ) +\n  xlim(0, 16) +\n  ylim(0, 16) +\n  labs(\n    x = \"Iso Expr (Donor 370)\\nlog2(TPM+1)\",\n    y = \"Iso Expr (Donor 371)\\nlog2(TPM+1)\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 85636 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](FigureS9_cor_plots_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"output/figures/supplement/FigS9_DonorCor_RPMno0_370_371.pdf\", width = 5, height = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 85636 rows containing missing values (geom_point).\n```\n:::\n:::\n\n\n#### Donor 370 + Donor 372\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor = cor.test(na_if(donor_counts_logRPM$donor_370, 0), na_if(donor_counts_logRPM$donor_372, 0), method = \"pearson\")\ncor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPearson's product-moment correlation\n\ndata:  na_if(donor_counts_logRPM$donor_370, 0) and na_if(donor_counts_logRPM$donor_372, 0)\nt = 418.37, df = 60683, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.8596590 0.8637556\nsample estimates:\n      cor \n0.8617213 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  donor_counts_logRPM %>% mutate(across(starts_with(\"donor_\"), na_if, 0)),\n  aes(x = donor_370, y = donor_372)\n) +\n  geom_point(alpha = 0.1, color = \"#08519c\") +\n  geom_abline() +\n  annotate(\n    geom = \"text\",\n    label = str_c(\"r = \", round(cor$estimate[[1]], digits = 3), \", p\\uadvalue < 2.2e-16\"),\n    size = base_size_mm,\n    x = 0, y = 16,\n    vjust = \"middle\", hjust = \"left\",\n    parse = F\n  ) +\n  xlim(0, 16) +\n  ylim(0, 16) +\n  labs(\n    x = \"Iso Expr (Donor 370)\\nlog2(TPM+1)\",\n    y = \"Iso Expr (Donor 372)\\nlog2(TPM+1)\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 82253 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](FigureS9_cor_plots_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"output/figures/supplement/FigS9_DonorCor_RPMno0_370_372.pdf\", width = 5, height = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 82253 rows containing missing values (geom_point).\n```\n:::\n:::\n\n\n#### Donor 371 + Donor 372\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor = cor.test(na_if(donor_counts_logRPM$donor_371, 0), na_if(donor_counts_logRPM$donor_372, 0), method = \"pearson\")\ncor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPearson's product-moment correlation\n\ndata:  na_if(donor_counts_logRPM$donor_371, 0) and na_if(donor_counts_logRPM$donor_372, 0)\nt = 538.97, df = 80515, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.8833523 0.8863504\nsample estimates:\n      cor \n0.8848605 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  donor_counts_logRPM %>% mutate(across(starts_with(\"donor_\"), na_if, 0)),\n  aes(x = donor_371, y = donor_372)\n) +\n  geom_point(alpha = 0.1, color = \"#08519c\") +\n  geom_abline() +\n  annotate(\n    geom = \"text\",\n    label = str_c(\"r = \", round(cor$estimate[[1]], digits = 3), \", p\\uadvalue < 2.2e-16\"),\n    size = base_size_mm,\n    x = 0, y = 16,\n    vjust = \"middle\", hjust = \"left\",\n    parse = F\n  ) +\n  xlim(0, 16) +\n  ylim(0, 16) +\n  labs(\n    x = \"Iso Expr (Donor 371)\\nlog2(TPM+1)\",\n    y = \"Iso Expr (Donor 372)\\nlog2(TPM+1)\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 62421 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](FigureS9_cor_plots_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"output/figures/supplement/FigS9_DonorCor_RPMno0_371_372.pdf\", width = 5, height = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 62421 rows containing missing values (geom_point).\n```\n:::\n:::\n",
    "supporting": [
      "FigureS9_cor_plots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}