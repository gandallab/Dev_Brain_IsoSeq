---
title: "Figure 1 - BulkTxomeAnalysis"
author: "Michael Gandal"
format: html
execute:
  cache: true
editor: source
editor_options:
  chunk_output_type: console
  markdown: 
    wrap: 72
---

```{r}
suppressPackageStartupMessages({
  library(IsoformSwitchAnalyzeR)
  library(rtracklayer)
  library(ggrepel)
  library(scales)
  library(GenomicFeatures)
  library(DescTools)
  library(tidyverse)
  library(magrittr)
})

colorVector = c(
  "Known" = "#009E73",
  "ISM"   = "#0072B2",
  "ISM_Prefix" = "#005996",
  "ISM_Suffix" = "#378bcc",
  "NIC"   = "#D55E00",
  "NNC"   = "#E69F00",
  "Other" = "#000000"
)
colorVector_ismSplit = colorVector[-2]
```

## Load Data

```{r}
if(!file.exists("data/working/bulkTxome.Rdata")) {
  talon_gtf = rtracklayer::import("data/cp_vz_0.75_min_7_recovery_talon.gtf.gz")
  tx.isoseq =  talon_gtf %>% as_tibble() %>% filter(type == "transcript") 
  
  sqanti_gtf = rtracklayer::import("data/sqanti/cp_vz_0.75_min_7_recovery_talon_corrected.gtf.cds.gtf.gz")
  tx.sqanti = sqanti_gtf %>% as_tibble() %>% filter(type == "transcript")
  
  gencode_gtf = rtracklayer::import("ref/gencode.v33lift37.annotation.gtf.gz") 
  tx.gencode =  gencode_gtf %>% as_tibble() %>% filter(type == "transcript")
  
  txdb.gencode = makeTxDbFromGRanges(gencode_gtf)
  gencodelengths= transcriptLengths(txdb.gencode)
  
  txdb.isoseq = makeTxDbFromGRanges(talon_gtf)
  isoSeqLengths = transcriptLengths(txdb.isoseq)
  samps = tribble( 
    ~sample_id, ~condition,
    "VZ_209", "VZ",
    "VZ_334", "VZ",
    "VZ_336", "VZ",
    "CP_209", "CP",
    "CP_334", "CP",
    "CP_336", "CP"
  ) %>%
    dplyr::mutate(
      dplyr::across(condition, as_factor)
    )
  
  cts = read_table("data/cp_vz_0.75_min_7_recovery_talon_abundance_filtered.tsv.gz")
  cts.collapse = cts %>%
    mutate(
      VZ_209 = rowSums(across(matches("209_.*_VZ"))),
      VZ_334 = rowSums(across(matches("334_.*_VZ"))),
      VZ_336 = rowSums(across(matches("336_.*_VZ"))),
      CP_209 = rowSums(across(matches("209_.*_CP"))),
      CP_334 = rowSums(across(matches("334_.*_CP"))),
      CP_336 = rowSums(across(matches("336_.*_CP"))),
      .keep = "unused"
    ) %>%
    dplyr::select(!c("gene_ID", "transcript_ID", "annot_transcript_name")) %>%
    dplyr::rename(
      gene_id = "annot_gene_id",
      transcript_id = "annot_transcript_id",
      gene_name = "annot_gene_name"
    ) %>%
    mutate(
      gene_novelty = as.factor(gene_novelty),
      transcript_novelty = as.factor(transcript_novelty),
      ISM_subtype = ISM_subtype %>% na_if("None") %>% as.factor()
    )
  cts$counts = rowSums(as.matrix(cts.collapse[,9:14]))
  
  cts$novelty2 = as.character(cts$transcript_novelty)
  cts$novelty2[which(cts$novelty2=="ISM" & cts$ISM_subtype=="Prefix")] = "ISM_Prefix"
  cts$novelty2[which(cts$novelty2=="ISM" & cts$ISM_subtype=="Suffix")] = "ISM_Suffix"
  cts$novelty2[cts$novelty2 %in% c("Antisense", "Genomic", "Intergenic", "ISM")] = "Other"
  cts$novelty2 = factor(cts$novelty2,levels=c("Known", "ISM_Prefix", "ISM_Suffix", "NIC", "NNC", "Other"))
  
  
  TableS1 = tx.isoseq %>% dplyr::select(gene_id, transcript_id, gene_name, transcript_name, seqnames, start, end, strand, transcript_length=width, source, gene_status, gene_type, transcript_status,transcript_type,  havana_transcript, ccdsid, protein_id)
  TableS1 = TableS1 %>% left_join(cts %>% dplyr::select(transcript_id=annot_transcript_id, transcript_novelty, ISM_subtype, transcript_novelty2 = novelty2, n_exons, cds_length = length, expression_counts = counts))
  TableS1$expression_TPM = TableS1$expression_counts / (sum(TableS1$expression_counts / 1000000))
  write_tsv(TableS1, file="output/tables/TableS1_transcript_annotation.tsv")
  save.image("data/working/bulkTxome.Rdata")
} else {
  load("data/working/bulkTxome.Rdata")
}


```

## Technical and Biological Replicates

### Fig1B: Isoform level MDS

```{r}
##
length(unique(cts$annot_transcript_id)) #214516 total isoforms
length(unique(cts$annot_gene_id)) #24554 genes

## Collapsing across technical replicates
countMat = as.matrix(cts.collapse[,9:14])
cs = colSums(countMat) / 1000000 ## TPM normalize
countMat.tpm = t(apply(countMat, 1, function(x) { x / cs}))

table(rowSums(countMat.tpm > 0.1) >3)  ## 175730 isoforms @ TPM > 0.1 in half of samples
table(rowSums(countMat.tpm > 1) >3)  ## 58102 @ TPM > 1 in half of samples

expressedIsoforms = rowSums(countMat.tpm > .1) >3  ## TPM > .1 in half of samples
length(unique(cts$annot_gene_id[expressedIsoforms])) ## 17,299 genes with expressed isoforms (TPM > .1)

# Analyze technical replicates separately
cts.all = cts[,12:35]
cs = colSums(cts.all) / 1000000
cts.all.tpm = t(apply(cts.all, 1, function(x) { x / cs}))

mds = cmdscale(dist(t(log2(.1+cts.all.tpm))),k = 4)
df = data.frame(sample=rownames(mds), PC1 = mds[,1], PC2=mds[,2], PC3=mds[,3], PC4=mds[,4])
df$Region = substr(df$sample, 7,9)
df$Subject = substr(df$sample, 1,3)
df$batch = substr(df$sample, 5,5)
Fig1B=ggplot(df, aes(x=PC1,y=PC2, color=Region, shape=Subject,label=batch)) + geom_point(size=4) +  geom_text(color='black', size=2) +  theme_bw() + ggtitle("Isoform level clustering")
Fig1B
ggsave(Fig1B,filename = "output/figures/Fig1/Fig1B.pdf", width = 3.5,height=2)

```

### Fig1C: smoothscatter

```{r}
geneCountMap.tpm = tibble(gene = cts$annot_gene_name, as_tibble(cts.all.tpm)) %>% group_by(gene) %>%  summarise(across(everything(), sum))
mds = cmdscale(dist(t(log2(.1+geneCountMap.tpm %>% dplyr::select(-gene)))),k = 4)
df = data.frame(sample=rownames(mds), PC1 = mds[,1], PC2=mds[,2], PC3=mds[,3], PC4=mds[,4])
df$Region = substr(df$sample, 7,9)
df$Subject = substr(df$sample, 1,3)
df$TechnicalReplicate = substr(df$sample, 5,5)
#ggplot(df, aes(x=PC1,y=PC2, color=Region, shape=Subject)) + geom_point(size=3) + theme_bw() + ggtitle("Gene level clustering")

Fig1C=ggplot(as.data.frame(countMat.tpm), aes(x=log2(1+VZ_334), y=log2(1+VZ_336))) + geom_point(color='blue',size=.4,alpha=.5) + theme_bw() + geom_abline(slope=1,lty=2) + geom_smooth(method='lm',color='black') + ggtitle("R=0.93, p<2e-16")
Fig1C
ggsave(Fig1C ,filename = "output/figures/Fig1/Fig1C.pdf", width = 3,height=3)
pdf(file= "output/figures/Fig1/Fig1Cb.pdf", width = 4, height=4)
smoothScatter(log2(1+countMat.tpm[,"VZ_334"]), log2(1+countMat.tpm[,"VZ_336"]))
dev.off()
smoothScatter(log2(1+countMat.tpm[,"VZ_334"]), log2(1+countMat.tpm[,"VZ_336"]))

panel.cor <- function(x, y, digits = 2, prefix = "R=", cex.cor, ...)
{
    usr <- par("usr"); on.exit(par(usr))
    par(usr = c(0, 1, 0, 1))
    r <- abs(cor(x, y))
    txt <- format(c(r, 0.123456789), digits = digits)[1]
    txt <- paste0(prefix, txt)
    if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
    text(0.5, 0.5, txt, cex =1)
}

pdf(file="output/figures/supplement/FigS2_bio_replicates.pdf", width=8,height=6)  
pairs(log2(1+countMat.tpm), panel=function(x,y){smoothScatter(x,y,add=T)},upper.panel = panel.cor)
dev.off()

```

### Fig1E: tx novelty

```{r}

Fig1E = ggplot(cts %>% filter(counts>10,), aes(x=counts, fill=novelty2)) + geom_histogram(position=position_fill(),alpha=.75, binwidth = .3)+ theme_bw()  +  scale_x_log10()+
  annotation_logticks(scaled = T,sides='b')+ theme(panel.grid.minor = element_blank()) + labs(x="Min observed counts", y="Proportion of transcripts") + ggtitle("Transcript novelty & type") + theme(plot.title = element_text(hjust=.5))  + scale_fill_manual(values=colorVector_ismSplit)
Fig1E
ggsave(file="output/figures/Fig1/Fig1E.pdf",width=5,height=3)

## Removing MAP1B
ggplot(cts %>% filter(counts>10,annot_gene_name!="MAP1B"), aes(x=counts, fill=novelty2)) + geom_histogram(position=position_fill(),alpha=.5, binwidth = .3)+ theme_bw()  +  scale_x_log10()+
  annotation_logticks(scaled = T,sides='b')+ theme(panel.grid.minor = element_blank()) + labs(x="Min observed counts", y="Proportion of transcripts") + ggtitle("Transcript novelty & type",subtitle = '(MAP1B removed)') + theme(plot.title = element_text(hjust=.5))  + scale_fill_manual(values=colorVector_ismSplit)

```

## Analyses of Transcript Length

### Fig1F: Tx Length Histogra

```{r}
df<- cts%>% dplyr::select("annot_transcript_id", "transcript_novelty", "ISM_subtype", "annot_gene_name", "counts") %>% right_join(isoSeqLengths, by=c("annot_transcript_id" = "tx_name")) 

df$novelty2 = as.character(df$transcript_novelty)
df$novelty2[which(df$novelty2=="ISM" & df$ISM_subtype=="Prefix")] = "ISM_Prefix"
df$novelty2[which(df$novelty2=="ISM" & df$ISM_subtype=="Suffix")] = "ISM_Suffix"
df$novelty2[df$novelty2 %in% c("Antisense", "Genomic", "Intergenic", "ISM")] = "Other"
df$novelty2 = factor(df$novelty2,levels=c("Known", "ISM_Prefix", "ISM_Suffix", "NIC", "NNC", "Other"))

df %>% filter(tx_len > 900, tx_len < 6000) %>% group_by(novelty2) %>% summarise(peak=10^mean(log10(tx_len)), median(tx_len), mean(tx_len))


Fig1F = ggplot(df, aes(x=tx_len, fill=novelty2)) + geom_histogram(alpha=.75,binwidth = .03)+ 
  theme_bw() + scale_fill_manual(values=colorVector_ismSplit) +
  scale_x_continuous(trans = log10_trans(),breaks = trans_breaks("log10", function(x) 10^x),
    labels = trans_format("log10", math_format(10^.x)),limits = c(50,10^5)) + annotation_logticks() +
  labs(x="Transcript Length (bp)") + ggtitle("Transcript length distribution")
Fig1F
ggsave(Fig1F,file='output/figures/Fig1/Fig1F.pdf', width=5,height=2.5)
  
 
## Zoomed in
ggplot(df, aes(x=tx_len, fill=novelty2)) + geom_histogram(alpha=.5,binwidth = 100)+ 
  theme_bw() + scale_fill_manual(values=colorVector_ismSplit) + xlim(800,5500) + 
  labs(x="Transcript Length (bp)") + ggtitle("Transcript length distribution") + 
  geom_vline(xintercept = 2588, lty=2,color="#009E73")

mean(df$tx_len[df$novelty2=="Known"])
sd(df$tx_len[df$novelty2=="Known"])
mean(df$tx_len[df$novelty2!="Known"])
sd(df$tx_len[df$novelty2!="Known"])

## Linear model: Known is the intercept
summary(lm(log2(tx_len) ~ novelty2,data=df[df$tx_len > 1000,]))
summary(lm(log2(tx_len) ~ novelty2=="Known",data=df))


## Non-parametric test
kruskal.test((tx_len) ~ novelty2=="Known",data=df)

kruskal.test(log2(tx_len) ~ novelty2,data=df[df$tx_len > 1000,])
DescTools::DunnTest(log2(tx_len) ~ novelty2, data=df[df$tx_len > 1000,], method='bonferroni')

## Boxplot
# ggplot(df, aes(x=novelty2, y=tx_len, fill=novelty2)) + geom_boxplot()+ 
#   theme_bw()  + scale_fill_manual(values=colorVector_ismSplit) + 
#   scale_y_continuous(trans = log10_trans(),breaks = trans_breaks("log10", function(x) 10^x),
#     labels = trans_format("log10", math_format(10^.x)))
```

### Fig1G: \# Exons / gene

```{r}
Fig1G = ggplot(df, aes(x=nexon, fill=novelty2)) + geom_histogram(alpha=.75, binwidth = 1) + theme_bw() + 
  xlim(1,40) + scale_fill_manual(values=colorVector_ismSplit) + labs(x="# Exons", y="# Transcripts") + ggtitle('Exons per  Transcript') + theme(legend.position = "none")
Fig1G
ggsave(Fig1G,file='output/figures/Fig1/Fig1G.pdf', width=3,height=2.5)

df %>% group_by(novelty2) %>% dplyr::select(nexon) %>% summarise(median(nexon), mean(nexon), sd(nexon), quantile(nexon, .05), quantile(nexon,.95))

df %>% group_by(novelty2=="Known") %>% dplyr::select(nexon) %>% summarise(median(nexon), mean(nexon), sd(nexon), quantile(nexon, .05), quantile(nexon,.95))


# Linear model (known is intercept)
summary(lm(log2(df$nexon) ~ df$novelty2))

## Non-parametric test
kruskal.test(log2(df$nexon) ~ as.factor(df$novelty2))
kruskal.test(log2(df$nexon) ~ as.factor(df$novelty2=="Known"))
kruskal.test((df$nexon) ~ as.factor(df$novelty2=="Known"))
DescTools::DunnTest(log2(df$nexon) ~ as.factor(df$novelty2),method='bonferroni')
```

## Analyses of transcripts per gene & disease

### NDD risk genes \~ unique transcipts per gene

```{r}
risk_genes =read.csv("ref/ASD+SCZ+DDD_2022.csv")
pLI_scores = read.table('ref/pLI_scores.ensid.txt',header = T)
asd_genes = risk_genes$Gene[risk_genes$Set=="ASD (SFARI score 1)"]
ddd_genes = risk_genes$Gene[risk_genes$Set=="DDD (Kaplanis et al. 2019)"]

geneCounts = cts %>% group_by(gene_id=substr(annot_gene_id,1,15)) %>% summarise(gene_counts = sum(counts))
geneCounts$gene_counts = geneCounts$gene_counts / (sum(geneCounts$gene_counts) / 1000000)

df <- talon_gtf %>% as_tibble()  %>% 
  mutate(gene_id = str_sub(gene_id, 1, 15)) %>%
  group_by(gene_id) %>%
  summarize(n_transcripts = n_distinct(na.omit(transcript_id)), n_exons = n_distinct(na.omit(exon_id))) %>%
  ungroup() 

df <-as_tibble(gencode_gtf) %>% dplyr::filter(type=="gene") %>% mutate(gene_id=substr(gene_id,0,15)) %>% right_join(df, by="gene_id")
df <- df %>% left_join(geneCounts) 
df <- pLI_scores %>% as_tibble() %>% dplyr::select(gene_id=gene, pLI) %>% right_join(df)

df$gene_rank = rank(-df$n_transcripts, ties.method = 'first')
df$DDD = FALSE
df$DDD[df$gene_name %in% c(asd_genes, ddd_genes)] = TRUE
s=summary(glm(DDD ~ log10(n_transcripts)  + log10(width)  + log10(gene_counts), data=df %>% filter(gene_type == "protein_coding"), family='binomial'))
print(s)
exp(s$coefficients[,1])

Fig1H=ggplot(df, aes(x = gene_rank, y = n_transcripts,color=DDD)) +
  geom_point() + geom_line(color='blue') + 
  geom_label_repel(data = df %>% filter(n_transcripts > 150 | (n_transcripts > 75 & DDD==TRUE)),aes(label = gene_name),force = 30, direction='both',nudge_y=-.1,nudge_x = .3, max.iter = 10000,max.overlaps = 50, size=2.5) + scale_color_manual(values=c("TRUE" = "red", "FALSE" = "black")) + scale_y_log10() + scale_x_log10() + theme_bw() + annotation_logticks() + theme(legend.position = 'none') + labs(x="Gene rank", y="# Transcripts") + ggtitle("NDD risk genes ~ unique  transcipts per gene",subtitle=paste0("OR ",signif(exp(s$coefficients[2,1]),3),", P=", signif(s$coefficients[2,4],2)))
Fig1H
ggsave(file="output/figures/Fig1/Fig1H.pdf",Fig1H, width = 8, height=3)
  
```

### FigS3: NDD risk genes \~ unique NOVEL transcipts per gene

```{r}
df.novel <- talon_gtf %>% as_tibble()  %>% filter(type=="transcript", transcript_id %in% cts$annot_transcript_id[cts$novelty2!="Known"]) %>% 
  mutate(gene_id = str_sub(gene_id, 1, 15)) %>%
  group_by(gene_id) %>%
  summarize(n_transcripts = n_distinct(na.omit(transcript_id)), n_exons = n_distinct(na.omit(exon_id))) %>%
  ungroup() 

df.novel <- as_tibble(gencode_gtf) %>% dplyr::filter(type=="gene") %>% mutate(gene_id=substr(gene_id,0,15)) %>% right_join(df.novel, by="gene_id")
df.novel <- df.novel %>% left_join(geneCounts) 
df.novel$gene_rank = rank(-df.novel$n_transcripts, ties.method = 'first')
df.novel$DDD = FALSE
df.novel$DDD[df.novel$gene_name %in% c(asd_genes, ddd_genes)] = TRUE

s=summary(glm(DDD ~ log10(n_transcripts)  + log10(width)  + log10(gene_counts), data=df.novel %>% filter(gene_type == "protein_coding"), family='binomial'))
print(s)
sort(exp(s$coefficients[,1]))

FigS3=ggplot(df.novel, aes(x = gene_rank, y = n_transcripts,color=DDD)) +
  geom_point() + geom_line(color='blue') + 
  geom_label_repel(data = df.novel %>% filter(n_transcripts > 150 | (n_transcripts > 75 & DDD==TRUE)),aes(label = gene_name),force = 30, direction='both',nudge_y=-.1,nudge_x = .3, max.iter = 10000,max.overlaps = 50, size=2.5) + scale_color_manual(values=c("TRUE" = "red", "FALSE" = "black")) + scale_y_log10() + scale_x_log10() + theme_bw() + annotation_logticks() + theme(legend.position = 'none') + labs(x="Gene rank", y="# Transcripts") + ggtitle("NDD risk genes ~ unique novel transcipts per gene",subtitle=paste0("OR ",signif(exp(s$coefficients[2,1]),2),", P=", signif(s$coefficients[2,4],2)))
FigS3
ggsave(file="output/figures/supplement/FigS3G.pdf",FigS3, width = 8, height=3)

```

## Pathway Analysis

```{r}

sumstats <- tx.isoseq %>% group_by(gene_name, gene_type) %>% summarise(total = n_distinct(transcript_id), known = sum(transcript_status=="KNOWN"), ISM.pre = sum(ISM.prefix_transcript=="TRUE", na.rm=T), ISM.suffix = sum(ISM.suffix_transcript=="TRUE", na.rm=T), NIC = sum(NIC_transcript==TRUE, na.rm = T), NNC = sum(NNC_transcript==TRUE, na.rm = T))

write.csv(file="output/isoformNovetyCounts_at_geneLevel.csv",sumstats)


query = sort(unique(tx.isoseq$gene_name[tx.isoseq$transcript_status=="NOVEL" & (tx.isoseq$NNC_transcript==TRUE | tx.isoseq$NIC_transcript == TRUE)]))
bg = sort(unique(tx.isoseq$gene_name[tx.isoseq$transcript_status=="NOVEL" | tx.isoseq$transcript_status=="KNOWN"]))

go = gprofiler2::gost(query = query,custom_bg = bg,sources = c("GO", "KEGG", "REACTOME"),as_short_link = T)

```

## Gene Body Coverage

```{r}

files = dir(path = "data/QC/RNA_Metrics/", pattern="RNA_Metrics")
df_coverage_isoseq = data.frame(Position=seq(0,100))

for(i in 1:length(files)) {
  this_file = data.table::fread(paste0("data/QC/RNA_Metrics/", files[i]),skip=10)
  names(this_file)[2] = gsub(".RNA_Metrics", "", files[i])
  df_coverage_isoseq = cbind(df_coverage_isoseq, this_file[,2])
}

files = dir(path = "data/QC/RNA_Metrics_short_read//", pattern="RNA_Metrics")
df_coverage_shortread = data.frame(Position=seq(0,100))

for(i in 1:length(files)) {
  this_file = data.table::fread(paste0("data/QC/RNA_Metrics_short_read/", files[i]),skip=10)
  names(this_file)[2] = gsub(".RNA_Metrics", "", files[i])
  df_coverage_shortread = cbind(df_coverage_shortread, this_file[,2])
}



df_coverage_isoseq <- df_coverage_isoseq %>% pivot_longer(cols = -Position, names_to = "Sample", values_to = "Normalized_coverage")
df_coverage_isoseq$modality = "IsoSeq"

df_coverage_shortread <- df_coverage_shortread %>% pivot_longer(cols = -Position, names_to = "Sample", values_to = "Normalized_coverage")
df_coverage_shortread$modality = "short-read\nRNAseq\n(ribozero)" 

FigS2A= ggplot(rbind(df_coverage_isoseq, df_coverage_shortread), aes(x=Position,y=Normalized_coverage,group=Sample, color=modality)) + geom_path() + theme_bw() + labs(x="Gene body position (5' -> 3')", y="Normalized coverage")
ggsave(FigS2A,file="output/figures/supplement/FigS2A_coverage.pdf",width=5,height=3)
```
